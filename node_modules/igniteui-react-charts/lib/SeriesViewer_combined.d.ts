import { Control } from "igniteui-react-core";
import { INotifyPropertyChanged, Base, Type, Point, EventArgs, PropertyChangedEventArgs, IEnumerable, IEnumerable$1, IList$1 } from "igniteui-react-core";
import { ILegendOwner } from "igniteui-react-core";
import { IInternalLegendOwner } from "igniteui-react-core";
import { IDataLegendTarget } from "igniteui-react-core";
import { IToolbarTarget } from "igniteui-react-core";
import { ISupportsAnimation } from "igniteui-react-core";
import { ISeriesViewerWidget } from "./ISeriesViewerWidget";
import { SRProvider } from "igniteui-react-core";
import { ToolCommand } from "igniteui-react-core";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { SeriesViewerScrollbarMode } from "./SeriesViewerScrollbarMode";
import { IHighlightingManager } from "igniteui-react-core";
import { DoubleAnimator } from "igniteui-react-core";
import { BrushCollection } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { DependencyObject } from "igniteui-react-core";
import { MarkerAutomaticBehavior } from "./MarkerAutomaticBehavior";
import { IChartLegend } from "igniteui-react-core";
import { SeriesHighlightingMode } from "./SeriesHighlightingMode";
import { SeriesSelectionMode } from "./SeriesSelectionMode";
import { SeriesSelectionBehavior } from "./SeriesSelectionBehavior";
import { SeriesViewerHorizontalScrollbarPosition } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition } from "./SeriesViewerVerticalScrollbarPosition";
import { Brush } from "igniteui-react-core";
import { SeriesHighlightingBehavior } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode } from "./LegendHighlightingMode";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { LegendItemBadgeMode } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { ChartHitTestMode } from "./ChartHitTestMode";
import { InteractionState } from "igniteui-react-core";
import { WindowResponse } from "./WindowResponse";
import { Visibility } from "igniteui-react-core";
import { IOverviewPlusDetailPane } from "igniteui-react-core";
import { SeriesViewerComponentsFromView } from "./SeriesViewerComponentsFromView";
import { ZoomCoercionMode } from "./ZoomCoercionMode";
import { ModifierKeys } from "igniteui-react-core";
import { SeriesHighlightedValuesDisplayMode } from "./SeriesHighlightedValuesDisplayMode";
import { DataTemplate } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { CanvasRenderScheduler } from "igniteui-react-core";
import { SyncSettings } from "./SyncSettings";
import { ToolActionInfo } from "igniteui-react-core";
import { ToolCommandExecutionState } from "igniteui-react-core";
import { ICommandAvailabilityListener } from "igniteui-react-core";
import { ICommandStateChangedListener } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesViewerComponentsForView } from "./SeriesViewerComponentsForView";
import { Dictionary$2 } from "igniteui-react-core";
import { IDataLegend } from "igniteui-react-core";
import { PropertyUpdatedEventArgs } from "igniteui-react-core";
import { NotifyCollectionChangedEventArgs } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { FrameworkElement } from "igniteui-react-core";
import { EventProxy } from "igniteui-react-core";
import { MouseEventArgs } from "igniteui-react-core";
import { MouseButtonEventArgs } from "igniteui-react-core";
import { Tuple$2 } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { SeriesViewerManipulationEventArgs } from "./SeriesViewerManipulationEventArgs";
import { IFastItemsSource } from "igniteui-react-core";
import { Key } from "igniteui-react-core";
import { RectChangedEventArgs } from "igniteui-react-core";
import { RefreshCompletedEventArgs } from "./RefreshCompletedEventArgs";
import { Thickness } from "igniteui-react-core";
import { AxisTitlePosition } from "./AxisTitlePosition";
import { FontInfo } from "igniteui-react-core";
import { CoercionInfo } from "./CoercionInfo";
import { IDataLegendSeries } from "igniteui-react-core";
import { CaptureImageSettings } from "igniteui-react-core";
import { CultureInfo } from "igniteui-react-core";
import { ImageCapturedEventArgs } from "igniteui-react-core";
import { ChartContentType } from "./ChartContentType";
import { ISchedulableRender } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { Line } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { TextBlock } from "igniteui-react-core";
import { ITileZoomTile } from "./ITileZoomTile";
import { IExecutionContext } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { PathGeometry } from "igniteui-react-core";
import { Geometry } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { LabelPanelsArrangeState } from "./LabelPanelsArrangeState";
import { DataTemplateRenderInfo } from "igniteui-react-core";
import { DataTemplateMeasureInfo } from "igniteui-react-core";
import { AxisLabelsLocation } from "./AxisLabelsLocation";
import { IProvidesViewport } from "./IProvidesViewport";
import { ActualLegendItemBadgeShape } from "./ActualLegendItemBadgeShape";
import { StandardLegendItems } from "igniteui-react-core";
import { DomRenderer, DomWrapper } from "igniteui-react-core";
import { PointerTooltipStyle } from "./PointerTooltipStyle";
import { DefaultPaletteInfo } from "./DefaultPaletteInfo";
import { AxisRange } from "./AxisRange";
import { AxisAnnotationCollection } from "./AxisAnnotationCollection";
import { VerticalAlignment } from "igniteui-react-core";
import { Canvas } from "igniteui-react-core";
import { IFastItemsSourceProvider } from "igniteui-react-core";
import { AxisExtentType } from "./AxisExtentType";
import { DoubleCollection } from "igniteui-react-core";
import { LabelPosition } from "./LabelPosition";
import { BindingFormatter } from "igniteui-react-core";
import { LabelFontHeuristics } from "./LabelFontHeuristics";
import { AxisOrientation } from "./AxisOrientation";
import { Pool$1 } from "igniteui-react-core";
import { AxisComponentsFromView } from "./AxisComponentsFromView";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { GeometryCollection } from "igniteui-react-core";
import { PathRenderingInfo } from "./PathRenderingInfo";
import { RenderRequestedEventArgs } from "./RenderRequestedEventArgs";
import { CategoryMode } from "./CategoryMode";
import { GridMode } from "./GridMode";
import { Panel } from "igniteui-react-core";
import { UIElement } from "igniteui-react-core";
import { TickmarkValues } from "./TickmarkValues";
import { ICategoryScaler } from "./ICategoryScaler";
import { FastItemsSourceEventArgs } from "igniteui-react-core";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { AxisRangeBufferMode } from "./AxisRangeBufferMode";
import { NumericAxisRenderingParameters } from "./NumericAxisRenderingParameters";
import { AxisRenderingParametersBase } from "./AxisRenderingParametersBase";
import { AutomaticSeriesPurpose } from "./AutomaticSeriesPurpose";
import { SeriesMatcher } from "./SeriesMatcher";
import { Stack$1 } from "igniteui-react-core";
import { RenderValidEventArgs } from "./RenderValidEventArgs";
import { SeriesLayerPropertyOverlayValueResolvingEventArgs } from "./SeriesLayerPropertyOverlayValueResolvingEventArgs";
import { HighlightingInfo } from "igniteui-react-core";
import { Marker } from "./Marker";
import { Polyline } from "igniteui-react-core";
import { ContentControl } from "igniteui-react-core";
import { Polygon } from "igniteui-react-core";
import { AutoMarginsAndAngleUpdateMode } from "./AutoMarginsAndAngleUpdateMode";
import { ComputedPlotAreaMarginMode } from "./ComputedPlotAreaMarginMode";
import { ILegendSeries } from "igniteui-react-core";
import { ILegendSeriesInternal } from "igniteui-react-core";
import { ILegendTemplateProvider } from "igniteui-react-core";
import { PenLineJoin } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
import { SeriesVisibleRangeMode } from "./SeriesVisibleRangeMode";
import { SeriesOutlineMode } from "./SeriesOutlineMode";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { TransitionOutSpeedType } from "./TransitionOutSpeedType";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { SeriesComponentsForView } from "./SeriesComponentsForView";
import { MarkerOutlineMode } from "./MarkerOutlineMode";
import { MarkerFillMode } from "./MarkerFillMode";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { ValueLayerValueMode } from "./ValueLayerValueMode";
import { TransitionOutCompletedEventArgs } from "./TransitionOutCompletedEventArgs";
import { SeriesComponentsFromView } from "./SeriesComponentsFromView";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { ISortingAxis } from "./ISortingAxis";
import { MarkerType } from "./MarkerType";
import { Style } from "igniteui-react-core";
import { HashPool$2 } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class SeriesViewer extends Control implements INotifyPropertyChanged, ILegendOwner, IInternalLegendOwner, IDataLegendTarget, IToolbarTarget, ISupportsAnimation {
    static $t: Type;
    private _widget;
    get widget(): ISeriesViewerWidget;
    set widget(a: ISeriesViewerWidget);
    c8: SeriesViewerView;
    static staticInit(): void;
    private dr;
    private get ds();
    private an;
    ao(a: SeriesViewer): AutomaticSeriesManager;
    getDesiredToolbarActions(): ToolActionInfo[];
    onToolCommandExecuting(a: ToolCommand): ToolCommandExecutionState;
    addCommandAvailabilityListener(a: ICommandAvailabilityListener): void;
    removeCommandAvailabilityListener(a: ICommandAvailabilityListener): void;
    private gf;
    addCommandStateChangedListener(a: ICommandStateChangedListener): void;
    removeCommandStateChangedListener(a: ICommandStateChangedListener): void;
    private _commandCompleted;
    get commandCompleted(): (arg1: ToolCommand) => void;
    set commandCompleted(a: (arg1: ToolCommand) => void);
    private _invalidateActions;
    get invalidateActions(): () => void;
    set invalidateActions(a: () => void);
    private no;
    private a8;
    get a9(): IDataChartToolbarProvider;
    get fc(): boolean;
    private ba;
    get bb(): ISeriesViewerInteractionManager;
    get e5(): boolean;
    constructor();
    private qr;
    private nc;
    private d8;
    protected pa(a: any, b: NotifyCollectionChangedEventArgs): void;
    private d7;
    protected on(a: any, b: NotifyCollectionChangedEventArgs): void;
    private ou;
    private os;
    ne(a: (arg1: Series) => void): void;
    private ov;
    private ot;
    private c0;
    nj(): void;
    private pv;
    protected get_fn(): boolean;
    get fn(): boolean;
    protected get_fm(): boolean;
    get fm(): boolean;
    nk(): void;
    get series(): SeriesCollection;
    private br;
    private qt;
    private bz;
    get b0(): SeriesPlotAreaMarginHorizontalMode;
    set b0(a: SeriesPlotAreaMarginHorizontalMode);
    private b1;
    get b2(): SeriesPlotAreaMarginVerticalMode;
    set b2(a: SeriesPlotAreaMarginVerticalMode);
    nm(): void;
    protected n8(): void;
    private _skipDataCleanup;
    get skipDataCleanup(): boolean;
    set skipDataCleanup(a: boolean);
    protected ql(a: any): void;
    private qu;
    nq(a: number, b: number, c: boolean, d: boolean): {
        p0?: number;
        p1?: number;
    };
    er(): boolean;
    get f0(): boolean;
    protected get e1(): boolean;
    protected get ek(): boolean;
    protected get ej(): boolean;
    get ei(): boolean;
    get dj(): IHighlightingManager;
    get dk(): IHighlightingManager;
    get di(): IHighlightingManager;
    get bc(): ISeriesViewerScrollbarManager;
    private m8;
    private m9;
    private m7;
    da: DoubleAnimator;
    dc: DoubleAnimator;
    c9: DoubleAnimator;
    db: DoubleAnimator;
    private ni;
    private qs;
    private nd;
    f6(a: number): boolean;
    f7(a: number): boolean;
    f5(a: number): boolean;
    nh(): void;
    un(a: number): Brush;
    ut(a: number): Brush;
    ur(a: number): Brush;
    us(a: number): Brush;
    private um;
    ag: BrushCollection;
    aj: BrushCollection;
    ah: BrushCollection;
    ai: BrushCollection;
    bg: MarkerAutomaticBehavior;
    ar: ChartContentManager;
    get u8(): Point;
    set u8(a: Point);
    private u7;
    qh(): void;
    get e4(): boolean;
    get legend(): IChartLegend;
    set legend(a: IChartLegend);
    static readonly su: DependencyProperty;
    get eg(): boolean;
    set eg(a: boolean);
    plotAreaMouseLeftButtonDown: (sender: any, e: PlotAreaMouseButtonEventArgs) => void;
    plotAreaMouseLeftButtonUp: (sender: any, e: PlotAreaMouseButtonEventArgs) => void;
    plotAreaClicked: (sender: any, e: PlotAreaMouseButtonEventArgs) => void;
    plotAreaMouseEnter: (sender: any, e: PlotAreaMouseEventArgs) => void;
    plotAreaMouseLeave: (sender: any, e: PlotAreaMouseEventArgs) => void;
    plotAreaMouseOver: (sender: any, e: PlotAreaMouseEventArgs) => void;
    o5(a: Point, b: boolean): void;
    private bh;
    private bl;
    o6(a: Point, b: boolean, c: boolean): void;
    static readonly rv: DependencyProperty;
    get fd(): boolean;
    set fd(a: boolean);
    static readonly sq: DependencyProperty;
    get fz(): boolean;
    set fz(a: boolean);
    static readonly th: DependencyProperty;
    get by(): SeriesHighlightingMode;
    set by(a: SeriesHighlightingMode);
    static readonly r9: DependencyProperty;
    get cb(): SeriesSelectionMode;
    set cb(a: SeriesSelectionMode);
    static readonly te: DependencyProperty;
    get b6(): SeriesSelectionBehavior;
    set b6(a: SeriesSelectionBehavior);
    static readonly tc: DependencyProperty;
    get b9(): SeriesSelectionMode;
    set b9(a: SeriesSelectionMode);
    static readonly r3: DependencyProperty;
    get ch(): SeriesViewerScrollbarMode;
    set ch(a: SeriesViewerScrollbarMode);
    protected cf: SeriesViewerScrollbarMode;
    static readonly sh: DependencyProperty;
    get ci(): SeriesViewerScrollbarMode;
    set ci(a: SeriesViewerScrollbarMode);
    protected cg: SeriesViewerScrollbarMode;
    static readonly tv: DependencyProperty;
    get ce(): SeriesViewerHorizontalScrollbarPosition;
    set ce(a: SeriesViewerHorizontalScrollbarPosition);
    static readonly sj: DependencyProperty;
    get cl(): SeriesViewerVerticalScrollbarPosition;
    set cl(a: SeriesViewerVerticalScrollbarPosition);
    static readonly tx: DependencyProperty;
    get uv(): Brush;
    set uv(a: Brush);
    static readonly sd: DependencyProperty;
    get uw(): Brush;
    set uw(a: Brush);
    static readonly si: DependencyProperty;
    get hp(): number;
    set hp(a: number);
    static readonly sl: DependencyProperty;
    get ho(): number;
    set ho(a: number);
    static readonly sg: DependencyProperty;
    get hl(): number;
    set hl(a: number);
    static readonly sc: DependencyProperty;
    get hm(): number;
    set hm(a: number);
    static readonly se: DependencyProperty;
    get hn(): number;
    set hn(a: number);
    static readonly sf: DependencyProperty;
    get hr(): number;
    set hr(a: number);
    static readonly sn: DependencyProperty;
    get hq(): number;
    set hq(a: number);
    static readonly sm: DependencyProperty;
    get et(): boolean;
    set et(a: boolean);
    static readonly j8: string;
    static readonly sk: DependencyProperty;
    get u5(): Brush;
    set u5(a: Brush);
    static readonly ts: DependencyProperty;
    get u6(): Brush;
    set u6(a: Brush);
    static readonly tw: DependencyProperty;
    get ib(): number;
    set ib(a: number);
    static readonly tz: DependencyProperty;
    get ia(): number;
    set ia(a: number);
    static readonly tu: DependencyProperty;
    get h8(): number;
    set h8(a: number);
    static readonly tr: DependencyProperty;
    get ie(): number;
    set ie(a: number);
    my(): void;
    private o8;
    static readonly t2: DependencyProperty;
    get h9(): number;
    set h9(a: number);
    static readonly tt: DependencyProperty;
    get id(): number;
    set id(a: number);
    static readonly t1: DependencyProperty;
    get ic(): number;
    set ic(a: number);
    static readonly t0: DependencyProperty;
    get gb(): boolean;
    set gb(a: boolean);
    static readonly l9: string;
    static readonly ty: DependencyProperty;
    private ca;
    private b5;
    private bx;
    private bu;
    get bv(): SeriesHighlightingBehavior;
    private b7;
    get b8(): SeriesSelectionMode;
    private b3;
    get b4(): SeriesSelectionBehavior;
    get bw(): SeriesHighlightingBehavior;
    set bw(a: SeriesHighlightingBehavior);
    static readonly r8: DependencyProperty;
    get bd(): LegendHighlightingMode;
    set bd(a: LegendHighlightingMode);
    static readonly sr: DependencyProperty;
    get bf(): LegendItemBadgeShape;
    set bf(a: LegendItemBadgeShape);
    static readonly st: DependencyProperty;
    get be(): LegendItemBadgeMode;
    set be(a: LegendItemBadgeMode);
    static readonly ss: DependencyProperty;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    protected p4(a: string, b: any, c: any): void;
    ow(): void;
    ox(a: IEnumerable): void;
    pd(a: Series, b: any, c: any): void;
    ph(a: Series, b: any, c: any): void;
    pe(a: Series, b: any, c: any): void;
    pf(a: Series, b: any, c: any): void;
    pg(a: Series, b: any, c: any): void;
    mp(a: Rect, b: ScalerParams): Tuple$2<boolean, number>;
    get fj(): boolean;
    private d3;
    n7(a: boolean): void;
    pi(a: Series, b: any, c: any): void;
    pj(a: Series, b: any, c: any): void;
    seriesCursorMouseMove: (sender: any, e: ChartCursorEventArgs) => void;
    p8(a: Series, b: any): void;
    seriesMouseLeftButtonDown: (sender: any, e: DataChartMouseButtonEventArgs) => void;
    qc(a: Series, b: any, c: MouseButtonEventArgs): void;
    seriesMouseLeftButtonUp: (sender: any, e: DataChartMouseButtonEventArgs) => void;
    seriesClick: (sender: any, e: DataChartMouseButtonEventArgs) => void;
    qd(a: Series, b: any, c: MouseButtonEventArgs): void;
    p7(a: Series, b: any, c: MouseButtonEventArgs): void;
    pb(a: Series, b: any): void;
    private gk;
    private gh;
    private nf;
    private gi;
    seriesMouseMove: (sender: any, e: ChartMouseEventArgs) => void;
    qy(a: Point): void;
    qz(a: Point): void;
    qe(a: Series, b: any, c: MouseEventArgs): void;
    seriesMouseEnter: (sender: any, e: ChartMouseEventArgs) => void;
    qa(a: Series, b: any, c: MouseEventArgs): void;
    seriesMouseLeave: (sender: any, e: ChartMouseEventArgs) => void;
    qb(a: Series, b: any, c: MouseEventArgs): void;
    private dx;
    n6(): void;
    private vg;
    protected get_vw(): Rect;
    get vw(): Rect;
    private ve;
    get vl(): Rect;
    set vl(a: Rect);
    protected get_es(): boolean;
    get es(): boolean;
    vq(a: Rect, b: Rect, c: Rect): Rect;
    private dv;
    private vd;
    protected get_vk(): Rect;
    get vk(): Rect;
    vo(a: Rect, b: Rect, c: Rect): Rect;
    protected vj(a: Rect): Rect;
    vp(): Rect;
    protected q3(a: Axis): void;
    vx: Rect;
    ga: boolean;
    ed: boolean;
    ft: boolean;
    iy: number;
    private io;
    get ir(): number;
    set ir(a: number);
    iv: number;
    ix: number;
    it: number;
    iw: number;
    protected fk: boolean;
    protected ef: boolean;
    py(a: Rect, b: Rect): void;
    private cc;
    cd(): SeriesViewerComponentsForView;
    private d1;
    mx(a: Point, b: boolean): void;
    e8: boolean;
    private at;
    get av(): ChartHitTestMode;
    set av(a: ChartHitTestMode);
    qg(): void;
    protected aw(): ChartHitTestMode;
    private as;
    get au(): ChartHitTestMode;
    set au(a: ChartHitTestMode);
    e9: boolean;
    seriesAnimating: (series: Series) => void;
    private dt;
    queueForAnimationIdle(a: () => void, b: number): void;
    getAnimationIdleVersionNumber(): number;
    isAnimationActive(): boolean;
    pc(a: Series): void;
    op(): void;
    protected pk(): void;
    p6(a: Series): void;
    abstract ff(): boolean;
    abstract fg(): boolean;
    fe(): boolean;
    private d0;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    get cz(): InteractionState;
    set cz(a: InteractionState);
    private dy;
    private cv;
    oz(a: Point): void;
    o0(a: Point, b: boolean): void;
    fr(a: Point, b: number): boolean;
    oi(a: Point): void;
    fq(a: Key): boolean;
    private d5;
    en: boolean;
    private dw;
    get eh(): boolean;
    set eh(a: boolean);
    protected get_e6(): boolean;
    get e6(): boolean;
    ok(a: Point): void;
    get eq(): boolean;
    ly: string;
    o4(a: Point): void;
    ol(a: Point, b: boolean): void;
    oj(a: Point): void;
    get fs(): boolean;
    set fs(a: boolean);
    private pt;
    o3(a: Point): void;
    pu(a: Point, b: number, c: number, d: number): void;
    o2(a: number): void;
    pq(a: Point, b: number, c: number, d: number): void;
    oy(a: Point): void;
    o1(a: number): void;
    oo(a: Point): void;
    pp(a: Point, b: number, c: number, d: number): void;
    pm(): void;
    or(a: Size): void;
    ng(): void;
    ob(a: Point, b: boolean): void;
    cx(a: boolean): InteractionState;
    viewerManipulationStarting: (sender: any, e: SeriesViewerManipulationEventArgs) => void;
    viewerManipulationEnding: (sender: any, e: SeriesViewerManipulationEventArgs) => void;
    private eb;
    ps(a: boolean): void;
    pr(): void;
    q0(): void;
    m5(): void;
    m0(): void;
    mz(): void;
    pw(): void;
    qk(): void;
    qi(): void;
    oa(a: Point, b: boolean): void;
    fx(): boolean;
    private d6;
    get f2(): boolean;
    set f2(a: boolean);
    n9(a: Point, b: boolean, c: boolean): void;
    rc(a: any, b: PropertyUpdatedEventArgs): void;
    rb(a: SyncLink, b: SyncLink): void;
    m1(a: Point): void;
    rf(a: Rect, b: boolean): void;
    rg(a: Rect, b: boolean, c: boolean): void;
    px(a: Rect, b: boolean): void;
    get fa(): boolean;
    private _ge;
    ge(): IEnumerable$1<SeriesViewer>;
    vb(a: Point): Point;
    u9(a: Point): Point;
    vv(a: Rect): Rect;
    windowRectChanged: (sender: any, e: RectChangedEventArgs) => void;
    private qf;
    po(a: Rect, b: Rect): void;
    sizeChanged: (sender: any, e: RectChangedEventArgs) => void;
    pl(a: Size, b: Size): void;
    ew: boolean;
    fu(a: Rect, b: Rect): boolean;
    actualWindowRectChanged: (sender: any, e: RectChangedEventArgs) => void;
    private p1;
    rh(a: number): void;
    ri(a: number): void;
    qq(): void;
    gridAreaRectChanged: (sender: any, e: RectChangedEventArgs) => void;
    private p2;
    protected get_e7(): boolean;
    get e7(): boolean;
    o7(a: Rect, b: Rect): void;
    cp: WindowResponse;
    np(): void;
    ep: boolean;
    ij: number;
    ii: number;
    private gr;
    get hd(): number;
    set hd(a: number);
    private gq;
    get hc(): number;
    set hc(a: number);
    il: number;
    ik: number;
    private _syncChannel;
    get syncChannel(): string;
    set syncChannel(a: string);
    private cm;
    get actualSyncLink(): SyncLink;
    set actualSyncLink(a: SyncLink);
    f3: boolean;
    nn(): void;
    v2: Visibility;
    private ea;
    og(): void;
    oe(): void;
    of(): void;
    get c1(): IOverviewPlusDetailPane;
    protected q8(a: boolean): void;
    v1: Visibility;
    ev: boolean;
    f9: boolean;
    uu: Brush;
    u4: Brush;
    private cq;
    get cr(): ZoomCoercionMode;
    set cr(a: ZoomCoercionMode);
    cs(): ZoomCoercionMode;
    ct: ZoomCoercionMode;
    uy: Brush;
    uj: Brush;
    ux: Brush;
    em(): boolean;
    ee(): boolean;
    vy: Rect;
    mu(): void;
    private iq;
    private notifyCrosshairUpdate;
    rd(a: number, b: number): void;
    re(a: number, b: number, c: number, d: number): void;
    hj(): number;
    hk(): number;
    private hx;
    private hw;
    protected pz(a: any, b: string, c: any, d: any): void;
    get e2(): boolean;
    protected get fp(): boolean;
    bq: Series;
    q7(a: Point): void;
    private mo;
    ra(): void;
    protected n3(): void;
    q9(): void;
    private d9;
    protected f4: boolean;
    cw: InteractionState;
    cy: InteractionState;
    uf: ModifierKeys;
    ug: ModifierKeys;
    private vf;
    get vr(): Rect;
    set vr(a: Rect);
    bt: SeriesHighlightedValuesDisplayMode;
    private _selectedSeriesItems;
    get selectedSeriesItems(): ChartSelectedItemCollection;
    set selectedSeriesItems(a: ChartSelectedItemCollection);
    private _focusedSeriesItems;
    get focusedSeriesItems(): ChartSelectedItemCollection;
    set focusedSeriesItems(a: ChartSelectedItemCollection);
    selectedSeriesItemsChanged: (sender: any, e: SeriesViewerSelectedSeriesItemsChangedEventArgs) => void;
    o9(a: any, b: SeriesViewerSelectedSeriesItemsChangedEventArgs): void;
    focusedSeriesItemsChanged: (sender: any, e: SeriesViewerSelectedSeriesItemsChangedEventArgs) => void;
    om(a: any, b: SeriesViewerSelectedSeriesItemsChangedEventArgs): void;
    gl: Date;
    gc: boolean;
    protected q2(): void;
    mq(a: Rect, b: Rect): void;
    fv(): boolean;
    protected n4(a: Rect, b: Rect): void;
    ig: number;
    ih: number;
    private vu;
    refreshCompleted: (sender: any, e: RefreshCompletedEventArgs) => void;
    p5(): void;
    protected abstract c7(): SeriesViewerView;
    protected pn(a: SeriesViewerView): void;
    u1: Brush;
    uk: Brush;
    static vt: Rect;
    rj: DataTemplate;
    rs: DataTemplate;
    rp: DataTemplate;
    rq: DataTemplate;
    rk: DataTemplate;
    rn: DataTemplate;
    rl: DataTemplate;
    rr: DataTemplate;
    ro: DataTemplate;
    rm: DataTemplate;
    lo: string;
    ue: HorizontalAlignment;
    ud: HorizontalAlignment;
    private i4;
    get lv(): string;
    set lv(a: string);
    private i3;
    get lj(): string;
    set lj(a: string);
    private ui;
    get u3(): Brush;
    set u3(a: Brush);
    private uh;
    get u2(): Brush;
    set u2(a: Brush);
    private g6;
    get h6(): number;
    set h6(a: number);
    private g4;
    get h4(): number;
    set h4(a: number);
    private g5;
    get h5(): number;
    set h5(a: number);
    private g3;
    get h3(): number;
    set h3(a: number);
    private g2;
    get h2(): number;
    set h2(a: number);
    private g0;
    get h0(): number;
    set h0(a: number);
    private g1;
    get h1(): number;
    set h1(a: number);
    private gz;
    get hz(): number;
    set hz(a: number);
    lc: string;
    vz(): Thickness;
    v0(): Thickness;
    ap(a: Axis): AxisTitlePosition;
    aq(a: Axis): AxisTitlePosition;
    abstract getFontInfo(): FontInfo;
    getFontHeight(): number;
    protected get_fo(): boolean;
    get fo(): boolean;
    od(): void;
    abstract getFontBrush(): Brush;
    abstract ul(): Brush;
    i1: any;
    provideContainer(a: any): void;
    oc(a: number, b: number): void;
    notifyContainerResized(): void;
    vm(): Rect;
    m6(): void;
    va(): Point;
    de(): FontInfo;
    dd(): FontInfo;
    uo(): Brush;
    up(): Brush;
    ms(a: Series): void;
    qm(a: Series): void;
    al: CanvasRenderScheduler;
    am: CanvasRenderScheduler;
    ak: CanvasRenderScheduler;
    private d4;
    get fl(): boolean;
    set fl(a: boolean);
    private du;
    get ec(): boolean;
    set ec(a: boolean);
    private _syncSettings;
    get syncSettings(): SyncSettings;
    set syncSettings(a: SyncSettings);
    mr(a: any): void;
    qo(a: any): void;
    n0(source_: any, a: number, b: any, c: any): void;
    nr(source_: any): void;
    ny(source_: any, a: number, b: any): void;
    nz(source_: any, a: number, b: any): void;
    destroyed: boolean;
    protected iz: any;
    protected gd: Dictionary$2<string, any>;
    fi: boolean;
    destroy(): void;
    protected m4(): void;
    qx(source_: any): void;
    qp(): void;
    qw(a: string, source_: any): void;
    qn(a: string, b: boolean): void;
    protected qv(a: Series, b: any): void;
    protected q5(a: any): void;
    protected q6(): void;
    private g7;
    get h7(): number;
    set h7(a: number);
    private gw;
    get ht(): number;
    set ht(a: number);
    private gy;
    get hy(): number;
    set hy(a: number);
    private gu;
    get hg(): number;
    set hg(a: number);
    private gt;
    get hf(): number;
    set hf(a: number);
    private gs;
    get he(): number;
    set he(a: number);
    fw(): boolean;
    private dz;
    get ey(): boolean;
    set ey(a: boolean);
    private gx;
    get hu(): number;
    set hu(a: number);
    private gv;
    get hs(): number;
    set hs(a: number);
    static cu(a: string, b: any): CoercionInfo;
    private i2;
    get kp(): string;
    set kp(a: string);
    private gn;
    get g9(): number;
    set g9(a: number);
    private gm;
    get g8(): number;
    set g8(a: number);
    fy: boolean;
    private vc;
    get vh(): Rect;
    set vh(a: Rect);
    vn(): Rect;
    eu: boolean;
    private nl;
    vs(): Rect;
    protected vi(): Rect;
    i0(a: number, b: number): any;
    private go;
    get ha(): number;
    set ha(a: number);
    private gp;
    get hb(): number;
    set hb(a: number);
    n2(): void;
    n1(): void;
    flush(): void;
    nb(a: boolean, b: boolean, c: boolean): void;
    f8(): boolean;
    private rt;
    private az;
    protected qj(a: DependencyObject, b: (arg1: boolean) => void): void;
    protected q1(a: DependencyObject): void;
    m2(): void;
    ez: boolean;
    e0: boolean;
    ex: boolean;
    oq(): void;
    private d2;
    get fb(): boolean;
    mt(): void;
    fh(): boolean;
    private ip;
    iu(): number;
    dh(): FontInfo;
    dg(): FontInfo;
    q4(): void;
    protected el: boolean;
    u0: Brush;
    uz: Brush;
    hv: number;
    e3: boolean;
    seriesDataUpdated: (sender: any, e: EventArgs) => void;
    p9(): void;
    nv(): void;
    nw(): void;
    private nx;
    nu(a: Point): void;
    private gg;
    attachDataLegend(a: IDataLegend): void;
    detachDataLegend(a: IDataLegend): void;
    get isDetached(): boolean;
    getDataLegendSeries(): IDataLegendSeries[];
    protected gj: List$1<CaptureImageSettings>;
    mv(a: CaptureImageSettings): void;
    private mw;
    protected jh(a: CaptureImageSettings, b: (arg1: string, arg2: any) => void): string;
    imageCaptured: (sender: any, args: ImageCapturedEventArgs) => void;
    protected p3(a: CaptureImageSettings, b: string, c?: any): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare abstract class SeriesViewerView extends Base implements ISchedulableRender {
    static $t: Type;
    constructor(a: SeriesViewer);
    l(): IExecutionContext;
    co(): void;
    p: SeriesViewer;
    c4(): void;
    e(): Series;
    private cn;
    a: CanvasRenderScheduler;
    n: IOverviewPlusDetailPane;
    private dn;
    private dm;
    em(): void;
    private ct;
    private cs;
    o: OverviewPlusDetailViewportHost;
    cb(a: number, b: number, c: RenderSurface): void;
    d5(): void;
    cd(): void;
    d7(): void;
    ck(): void;
    cc(): void;
    ce(): void;
    dy(a: Series): void;
    dc(): void;
    private er;
    aq(a: Series): boolean;
    protected g: SeriesCollection;
    protected b: AxisCollection;
    private ai;
    get au(): boolean;
    set au(a: boolean);
    bp(a: Series): void;
    dt(a: RenderingContext): void;
    bx(): void;
    bt(): void;
    cf(): void;
    ca(): void;
    dr(): void;
    protected fi: Rectangle;
    protected ff: Path;
    d8(): void;
    eg(a: Rect): void;
    bw(): void;
    df(): void;
    eo(a: number, b: number, c: number, d: number): void;
    protected fe: Line;
    protected fd: Line;
    ed(): void;
    cl(): void;
    eh(a: number, b: number, c: number, d: number): void;
    d9(): void;
    cg(): void;
    cj(): void;
    private e6;
    private e7;
    en(a: Rect, b: Rect): void;
    ec(): void;
    ep(a: Rect): void;
    dw(a: Axis): void;
    dx(a: Axis): void;
    bo(a: Axis): void;
    bl(a: Axis): void;
    private h;
    i(): SeriesViewerComponentsFromView;
    static aw(a: Series): List$1<Series>;
    d2(): void;
    j: SeriesViewerViewManager;
    protected w: RenderingContext;
    z: RenderingContext;
    y: RenderingContext;
    x: RenderingContext;
    an: boolean;
    ao: boolean;
    bi: any;
    c0(a: any): void;
    private al;
    protected cy(a: Point, b: boolean): void;
    protected cz(a: Point, b: boolean): void;
    protected c3(a: Point): void;
    protected cx(a: Point, b: boolean, c: boolean): void;
    du(a: RenderingContext): void;
    protected get_ap(): boolean;
    get ap(): boolean;
    k: EventProxy;
    ef(): void;
    a9: number;
    f(a: Point, b: boolean, c: DataContext, d: boolean): {
        ret: Series;
        p2: DataContext;
    };
    bd(): number;
    bc(): number;
    a8: number;
    a7: number;
    private e9;
    private aj;
    cu(): void;
    c1(a: number, b: number): void;
    private fg;
    private fh;
    b6(a: Rectangle): void;
    b9(a: Rectangle): void;
    b8(): void;
    d3(): void;
    private a1;
    private az;
    private a0;
    private ay;
    private ak;
    private aa;
    private b2;
    private ek;
    v(): FontInfo;
    u(): FontInfo;
    private e5;
    private e4;
    private bf;
    private a2;
    private be;
    fm(): Thickness;
    fl(): Thickness;
    protected dv(a: Rect): void;
    cq(): void;
    private fa;
    protected d0(): void;
    isValid(): boolean;
    preRender(): void;
    protected ds(): void;
    protected ab: boolean;
    protected d1(): void;
    c2(): void;
    cw(): void;
    fb(): Rect;
    e8(): Point;
    private d6;
    ee(): void;
    dp(): void;
    protected as(a: Point): boolean;
    c8(a: Point, b: boolean, c: boolean): void;
    protected c7(a: Point): void;
    protected c6(a: Point): void;
    protected c9(a: Point): void;
    d4(): void;
    get ez(): ModifierKeys;
    eq(a: Rect): void;
    cr(a: boolean): void;
    bk(a: boolean): void;
    protected el(): void;
    private af;
    get isDirty(): boolean;
    set isDirty(a: boolean);
    undirty(a: boolean): void;
    get index(): number;
    postRender(): void;
    b7(): void;
    protected ae: boolean;
    ch(): void;
    ea(): void;
    bv(a: boolean): void;
    bm(a: any): void;
    ei(a: number): void;
    ej(a: number): void;
    bn(a: any): void;
    dz(a: any): void;
    da(a: Brush): void;
    bu(a: Point): void;
    av: boolean;
    m(a: boolean): InteractionState;
    c5(): void;
    private et;
    private es;
    bb(a: TextBlock, b: FontInfo): number;
    ba(a: string, b: FontInfo): number;
    dj(): void;
    private eu;
    di(): void;
    de(): void;
    c(a: Axis): AxisTitlePosition;
    d(a: Axis): AxisTitlePosition;
    dk(): void;
    dl(): void;
    t(): FontInfo;
    e3(): Brush;
    q(): FontInfo;
    e0(): Brush;
    s(): FontInfo;
    r(): FontInfo;
    e2(): Brush;
    e1(): Brush;
    get a4(): number;
    get a5(): number;
    get a6(): number;
    get a3(): number;
    get ew(): TextBlock;
    get ev(): TextBlock;
    fc(): Rect;
    fk(): Thickness;
    fj(): Thickness;
    private ad;
    private ac;
    dd(a: any, b: any): void;
    dh(a: any, b: any): void;
    ey(): HorizontalAlignment;
    ex(): HorizontalAlignment;
    private ag;
    bq(): void;
    am(): boolean;
    b5(): void;
    cp(): void;
    at(a: Point): boolean;
    dq(): void;
    private ax;
    b3(a: Dictionary$2<any, ITileZoomTile>, b: List$1<ITileZoomTile>, c: number): void;
    bh(a: Rect, b: ITileZoomTile, c: number): any;
    b0(): void;
    b1(a: ITileZoomTile): void;
    cm(): void;
    ar: boolean;
    private bg;
    by(): void;
    br(): void;
    bz(a: number): void;
    bs(): void;
    private ah;
    ci(): void;
    eb(): void;
    dg(): void;
    cv(): void;
    db(): void;
    b4(a: any): void;
    bj(a: number, b: number, c: number): any;
}
/**
 * @hidden
 */
export declare class OverviewPlusDetailViewportHost extends Base implements IProvidesViewport {
    static $t: Type;
    constructor(a: SeriesViewerView);
    a: SeriesViewerView;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    getEffectiveViewport(): Rect;
    getMainContentViewport(): Rect;
}
/**
 * @hidden
 */
export declare class LegendTemplates extends Base {
    static $t: Type;
    private static readonly z;
    private static readonly ae;
    private static readonly ad;
    private static readonly ah;
    private static readonly ab;
    private static readonly y;
    private static readonly aa;
    private static readonly ac;
    static af(a: Series): DataTemplate;
    static a(a: DataTemplateRenderInfo): RenderingContext;
    static v(a: DataContext): void;
    private static b;
    private static c;
    static u(a: DataTemplateRenderInfo, b: number, c: Brush, d: Brush, e: number, f: number, g: number, h: number): void;
    static s(a: DataTemplateRenderInfo): void;
    static r(a: DataTemplateRenderInfo, b: number, c: number): void;
    static t(a: DataTemplateRenderInfo, b?: number): void;
    static j(a: DataTemplateRenderInfo): void;
    static n(a: DataTemplateRenderInfo): void;
    static o(a: DataTemplateRenderInfo): void;
    static q(a: DataTemplateRenderInfo): void;
    static p(a: DataTemplateRenderInfo): void;
    static i(a: DataTemplateRenderInfo): void;
    static l(a: DataTemplateRenderInfo): void;
    static m(a: DataTemplateRenderInfo): void;
    static k(a: DataTemplateRenderInfo): void;
    static g(a: DataTemplateRenderInfo): void;
    private static readonly w;
    private static readonly x;
    static resolveLegendItemTemplate(a: StandardLegendItems): DataTemplate;
    static e(a: DataTemplateRenderInfo): void;
    static f(a: DataTemplateMeasureInfo): void;
    static d(a: DataTemplateMeasureInfo): void;
    static h(a: DataTemplateMeasureInfo): void;
}
/**
 * @hidden
 */
export declare class SeriesViewerViewManager extends Base {
    static $t: Type;
    ae: DomRenderer;
    protected af: DomWrapper;
    protected aj: DomWrapper;
    protected ai: DomWrapper;
    protected ag: DomWrapper;
    ak: DomWrapper;
    t: RenderingContext;
    w: RenderingContext;
    v: RenderingContext;
    u: RenderingContext;
    x: RenderingContext;
    f: EventProxy;
    private j;
    constructor(a: SeriesViewerView);
    protected ah: DomWrapper;
    bj(): void;
    bg(a: any): void;
    static by(a: DomRenderer, b: () => void): void;
    private bi;
    ba(): void;
    g(): IOverviewPlusDetailPane;
    bm(): void;
    bn(): void;
    b3(): Brush;
    private ab;
    private aa;
    private ac;
    az(a: number, b: number, c: number): void;
    b8(): Point;
    y(): boolean;
    bc(a: boolean): void;
    a8(a: BrushCollection, b: BrushCollection, c: Brush, d: FontInfo, e: Brush): {
        p0: BrushCollection;
        p1: BrushCollection;
        p2: Brush;
        p3: FontInfo;
        p4: Brush;
    };
    e(): DefaultPaletteInfo;
    a7(a: number, b: number[], c: Brush, d: Brush, e: number, f: boolean): {
        p0: number;
        p1: number[];
        p2: Brush;
        p3: Brush;
        p4: number;
        p5: boolean;
    };
    ay(): void;
    bu(x_: number): void;
    private ad;
    bv(y_: number): void;
    au(a: any): void;
    a9(): void;
    bo(): void;
    av(a: any): void;
    bk(a: any): void;
    bd(): void;
    private l;
    p(): FontInfo;
    private ca;
    ce(): Thickness;
    private aq;
    as(): string;
    private ap;
    ar(): string;
    private b9;
    cd(): Thickness;
    private b0;
    b5(): Brush;
    private bz;
    b4(): Brush;
    private k;
    o(): FontInfo;
    private a;
    c(): AxisTitlePosition;
    private b;
    d(): AxisTitlePosition;
    private n;
    r(): FontInfo;
    private b2;
    b7(): Brush;
    private m;
    q(): FontInfo;
    private b1;
    b6(): Brush;
    private cb;
    cf(): Thickness;
    private cc;
    cg(): Thickness;
    bp(): void;
    private bx;
    private br;
    private bq;
    private bs;
    private bt;
    a6(a: number, b: number): void;
    private h;
    i(): PointerTooltipStyle;
    bb(a: boolean): void;
    private z;
    an(a: Rect, b: ITileZoomTile, c: number): any;
    a3(a: ITileZoomTile): void;
    a2(): void;
    bl(a: List$1<ITileZoomTile>): void;
    private al;
    a0(): void;
    aw(): void;
    private am;
    a1(a: number): void;
    ax(): void;
    private s;
    be(): void;
    bw(a: boolean): void;
    a4(): void;
    a5(): void;
    bh(): void;
    bf(): void;
    ao(a: number, b: number, c: number): any;
    at(a: number, b: number, c: number, d: string, e?: (arg1: string, arg2: any) => void): string;
}
/**
 * @hidden
 */
export declare class AutoRangeCalculator extends Base {
    static $t: Type;
    static a(a: NumericAxisBase, b: number, c: number, d: boolean, e: number, f: number, g: number): {
        p5: number;
        p6: number;
    };
}
/**
 * @hidden
 */
export interface IAxisAnnotationManager {
    owner: Axis;
    onAutoAnnotionsChanged(a: Axis, b: AxisAnnotationCollection, c: NotifyCollectionChangedEventArgs): void;
    onAutoAnnotionsReset(a: Axis, b: AxisAnnotationCollection, c: EventArgs): void;
    onAnnotionsChanged(a: Axis, b: AxisAnnotationCollection, c: NotifyCollectionChangedEventArgs): void;
    onAnnotionsReset(a: Axis, b: AxisAnnotationCollection, c: EventArgs): void;
    onAddAnnotations(a: Axis): void;
    arrangeAnnotations(a: Axis, b: AxisLabelPanelBaseView, c: List$1<FrameworkElement>, d: List$1<Rect>, e: boolean, f: number, g: number, h: number, i: number, j: number): void;
}
/**
 * @hidden
 */
export declare let IAxisAnnotationManager_$type: Type;
/**
 * @hidden
 */
export declare class AxisLabelSettings extends Base implements INotifyPropertyChanged {
    static $t: Type;
    constructor();
    private ab;
    get textStyle(): string;
    set textStyle(a: string);
    private ay;
    get textColor(): Brush;
    set textColor(a: Brush);
    get location(): AxisLabelsLocation;
    set location(a: AxisLabelsLocation);
    private b;
    get visibility(): Visibility;
    set visibility(a: Visibility);
    private a3;
    get showFirstLabel(): boolean;
    set showFirstLabel(a: boolean);
    private i;
    c: AxisLabelsLocation;
    a: Axis;
    registerAxis(a: Axis): void;
    unregisterAxis(a: Axis): void;
    get angle(): number;
    set angle(a: number);
    private n;
    get extent(): number;
    set extent(a: number);
    private p;
    set margin(a: number);
    get leftMargin(): number;
    set leftMargin(a: number);
    private q;
    get rightMargin(): number;
    set rightMargin(a: number);
    private r;
    get topMargin(): number;
    set topMargin(a: number);
    private s;
    get bottomMargin(): number;
    set bottomMargin(a: number);
    private o;
    private av;
    get horizontalAlignment(): HorizontalAlignment;
    set horizontalAlignment(a: HorizontalAlignment);
    private a0;
    get verticalAlignment(): VerticalAlignment;
    set verticalAlignment(a: VerticalAlignment);
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    as(a: string, b: any, c: any): void;
    protected ar(a: any, b: string, c: any, d: any): void;
    k(): boolean;
    l(): boolean;
    static readonly extentPropertyDefault: number;
    get j(): boolean;
    private f;
    get g(): FontInfo;
    set g(a: FontInfo);
    h(a: DomRenderer): FontInfo;
}
/**
 * @hidden
 */
export declare class TitleSettings extends AxisLabelSettings {
    static $t: Type;
    constructor();
    private a5;
    get position(): AxisTitlePosition;
    set position(a: AxisTitlePosition);
    protected ar(a: any, b: string, c: any, d: any): void;
}
/**
 * @hidden
 */
export declare abstract class Axis extends Control implements INotifyPropertyChanged {
    static $t: Type;
    a4(): AxisView;
    a5: AxisView;
    hs(a: AxisView): void;
    abstract ag(): number[];
    hf(): void;
    private bt;
    get bu(): SRProvider;
    private a9;
    get ba(): IAxisVisualDataManager;
    ei(): number;
    f2(): any;
    f1(): any;
    protected get_cb(): boolean;
    get cb(): boolean;
    protected get_cj(): boolean;
    get cj(): boolean;
    protected get_b9(): boolean;
    get b9(): boolean;
    protected get_cm(): boolean;
    get cm(): boolean;
    protected get_cp(): boolean;
    get cp(): boolean;
    protected get_cn(): boolean;
    get cn(): boolean;
    protected get_ce(): boolean;
    get ce(): boolean;
    protected get_ck(): boolean;
    get ck(): boolean;
    protected get_cl(): boolean;
    get cl(): boolean;
    protected get_cc(): boolean;
    get cc(): boolean;
    protected get_cd(): boolean;
    get cd(): boolean;
    ak(): Axis;
    constructor();
    private a7;
    get a8(): IAxisAnnotationManager;
    get ca(): boolean;
    private hd;
    private he;
    private hb;
    private hc;
    provideRenderer(a: DomRenderer): void;
    au: (item: any) => string;
    hp(a: Rect, b: Rect): void;
    abstract av(): AxisLabelPanelBase;
    ac(): void;
    ir: Canvas;
    get bo(): IFastItemsSourceProvider;
    set bo(a: IFastItemsSourceProvider);
    private bn;
    get bi(): SeriesViewer;
    set bi(a: SeriesViewer);
    private bh;
    get bg(): XamDataChart;
    set bg(a: XamDataChart);
    readonly bs: (sender: any, e: RectChangedEventArgs) => void;
    private by;
    get c6(): boolean;
    set c6(a: boolean);
    private dl;
    get e6(): number;
    set e6(a: number);
    private df;
    get dx(): number;
    set dx(a: number);
    private ds;
    get fc(): number;
    set fc(a: number);
    private dp;
    get e9(): number;
    set e9(a: number);
    private as;
    get at(): AxisExtentType;
    set at(a: AxisExtentType);
    private dk;
    get e5(): number;
    set e5(a: number);
    dw: number;
    private dr;
    get fb(): number;
    set fb(a: number);
    private dn;
    get e8(): number;
    set e8(a: number);
    private bk;
    private bj;
    get bm(): FontInfo;
    set bm(a: FontInfo);
    private f3;
    get gx(): string;
    set gx(a: string);
    private dm;
    get e7(): number;
    set e7(a: number);
    dy: number;
    private dt;
    get fd(): number;
    set fd(a: number);
    private dq;
    get fa(): number;
    set fa(a: number);
    private fo;
    get ft(): number;
    set ft(a: number);
    private fn;
    get fs(): number;
    set fs(a: number);
    private fm;
    get fr(): number;
    set fr(a: number);
    fp: number;
    private kj;
    get km(): VerticalAlignment;
    set km(a: VerticalAlignment);
    private dv;
    get ff(): number;
    set ff(a: number);
    private du;
    get fe(): number;
    set fe(a: number);
    ih(): void;
    private h5;
    private h6;
    is: TextBlock;
    g6: string;
    jz: Brush;
    jv: Brush;
    fg: number;
    j3: DoubleCollection;
    jy: Brush;
    jw: Brush;
    jt: Brush;
    er: number;
    j1: DoubleCollection;
    jx: Brush;
    ju: Brush;
    eu: number;
    j2: DoubleCollection;
    j0: Brush;
    fi: number;
    j4: DoubleCollection;
    fh: number;
    dz: number;
    private ik;
    cf: boolean;
    ch: boolean;
    ci: boolean;
    cu: boolean;
    private bw;
    private dg;
    get b4(): boolean;
    get b7(): boolean;
    ig(a: number): void;
    ia(): void;
    ef(): number;
    ew(): number;
    cv: boolean;
    cw: boolean;
    cx: boolean;
    bz: boolean;
    c5: boolean;
    get c4(): boolean;
    set c4(a: boolean);
    static readonly jp: DependencyProperty;
    fq: number;
    b1: boolean;
    az: AxisLabelSettings;
    d5(): number;
    jr(): HorizontalAlignment;
    kk(): VerticalAlignment;
    js(): HorizontalAlignment;
    kl(): VerticalAlignment;
    d7(): number;
    d9(): number;
    d8(): number;
    d6(): number;
    ec(): number;
    ee(): number;
    ed(): number;
    eb(): number;
    a0(): AxisLabelsLocation;
    a1(): AxisLabelsLocation;
    aj: Axis;
    fv: any;
    rangeChanged: (sender: any, e: AxisRangeChangedEventArgs) => void;
    protected h3(a: AxisRangeChangedEventArgs): void;
    bf: TitleSettings;
    ea(): number;
    d4(): number;
    get an(): AxisAnnotationCollection;
    private al;
    get ao(): AxisAnnotationCollection;
    private am;
    private j6;
    get kd(): Rect;
    set kd(a: Rect);
    kc: Rect;
    il(): void;
    c8(a: Rect, b: Rect, c: AxisView): boolean;
    co(): boolean;
    dc: List$1<any>;
    dd: List$1<LabelPosition>;
    aw: AxisLabelPanelBase;
    protected ip(a: Rect, b: Rect): void;
    private bx;
    get cq(): boolean;
    set cq(a: boolean);
    protected ka(): Rect;
    protected iq(a: Rect, b: Rect): void;
    h4(): void;
    a6: ContentInfo;
    fl: DomRenderer;
    ai: BindingFormatter;
    protected hw(a: any, b: string, c: any, d: any): void;
    hu(): void;
    hv(): void;
    private _coercionMethods;
    get coercionMethods(): any;
    set coercionMethods(a: any);
    private bv;
    protected get_expectFunctions(): boolean;
    protected set_expectFunctions(a: boolean): void;
    get expectFunctions(): boolean;
    set expectFunctions(a: boolean);
    cy: boolean;
    private ic;
    c7: boolean;
    protected hr(a: GeometryCollection, b: number, c: number, d: Rect): void;
    protected hq(a: GeometryCollection, b: number, c: Rect, d: PathRenderingInfo, e: boolean): void;
    protected io(a: GeometryCollection, b: number, c: number, d: Rect): void;
    protected im(a: GeometryCollection, b: number, c: Rect, d: PathRenderingInfo, e: boolean): void;
    private cg;
    protected ie(a: number, b: number, c: Rect, d: Rect, e: Rect, f: number, g: number): {
        p0: number;
        p1: number;
    };
    d0(a: number, b: number, c: number, d: PathRenderingInfo): number;
    hi(a: GeometryCollection): void;
    protected hh(): void;
    h7(): void;
    h8(a: boolean): void;
    renderRequested: (sender: any, e: RenderRequestedEventArgs) => void;
    bc: LabelFontHeuristics;
    static et: number;
    ez(): number;
    e3(): number;
    e1(): number;
    e2(): number;
    e0(): number;
    ex(): number;
    d2(a: number, b: boolean, c: Rect, d: Rect, e: Rect): number;
    private eq;
    private eh;
    cz(a: number, b: number, c: Rect, d: Rect, e: Rect): boolean;
    protected eg(a: number, b: Rect, c: Rect, d: Rect): number;
    ey(): number;
    protected get c0(): boolean;
    cr: boolean;
    hk(a: boolean): void;
    private di;
    private b2;
    ib(): void;
    protected b6(): boolean;
    d1(a: number, b: ScalerParams): number;
    protected id(): void;
    private dj;
    bb(): LabelFontHeuristics;
    bl(): FontInfo;
    private hl;
    cs: boolean;
    c1(): boolean;
    c2(a: boolean): boolean;
    c3(): boolean;
    protected h9(a: boolean): void;
    ij(): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    protected h2(a: string, b: any, c: any): void;
    de: List$1<Series>;
    ct(a: Series): boolean;
    b0(a: Series): boolean;
    f0: any;
    gg: string;
    ah: any[];
    fx(a: any, b: string): any;
    private da;
    protected gs(a: string): string;
    private c9;
    protected fy(a: any, b: string, c: string): any;
    fz(a: any): any;
    gd(a: number): string;
    ev(): number;
    ej(a: number, b: ScalerParams): number;
    ek(a: number, b: ScalerParams, c: CategoryMode): number;
    j9(a: Rect): Rect;
    j8(): Rect;
    j7(): Rect;
    protected kb(a: Rect, b: Rect): Rect;
    el(a: number, b: Rect, c: Rect): number;
    hn(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    hm(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    em(a: number, b: ScalerParams): number;
    en(a: number, b: ScalerParams, c: CategoryMode): number;
    eo(a: number, b: Rect, c: Rect): number;
    ho(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    e4(a: number): number;
    abstract get a2(): AxisOrientation;
    ki: Size;
    ht(a: Size): void;
    ii(): void;
    ap: AxisComponentsForView;
    aq(): AxisComponentsForView;
    d3: number;
    private dh;
    get es(): number;
    set es(a: number);
    b8(): boolean;
    ep(): number;
    protected hg(): void;
    hj(a: AxisRangeChangedEventArgs): void;
    br: Pool$1<TextBlock>;
    bq: Pool$1<TextBlock>;
    bp: Pool$1<Rectangle>;
    get ke(): Path;
    get kf(): Path;
    get kh(): Path;
    get kg(): Path;
    be(): SyncSettings;
    ar(): AxisComponentsFromView;
    private ax;
    get ay(): AxisLabelSettings;
    hx(a: RenderingContext, b: RenderingContext): void;
    b5(): boolean;
    fw(): any;
    private _db;
    db(): IEnumerable$1<Series>;
    hy(a: string): void;
    h1(a: any): void;
    h0(a: any): void;
    fk: CultureInfo;
    j5(a: number, b: Rect, c: Rect, d?: any, e?: any): Geometry;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AxisCollection extends ObservableCollection$1<Axis> {
    static $t: Type;
    constructor();
    collectionResetting: (sender: any, e: EventArgs) => void;
    protected p(): void;
}
/**
 * @hidden
 */
export declare class AxisLabelManager extends Base {
    static $t: Type;
    e: List$1<any>;
    f: List$1<LabelPosition>;
    b: AxisLabelPanelBase;
    a: Axis;
    c: (arg1: number) => void;
    constructor();
    n(a: Rect, b: Rect): void;
    i(a: any, b: LabelPosition): void;
    t(): void;
    static j(a: FrameworkElement, b: AxisLabelSettings): void;
    private static k;
    private static l;
    static m(a: FrameworkElement, b: TitleSettings): void;
    h(a: FrameworkElement): void;
    r(a: number): void;
    o(a: number): void;
    u(a: number): FrameworkElement;
    s(a: number): void;
    get d(): boolean;
    q(): void;
    p(): void;
    g(): void;
}
/**
 * @hidden
 */
export declare abstract class AxisLabelPanelBase extends Panel {
    static $t: Type;
    ae(): AxisLabelPanelBaseView;
    ch(a: AxisLabelPanelBaseView): void;
    af: AxisLabelPanelBaseView;
    cx: Rect;
    b8(): void;
    cp(): void;
    co(): void;
    constructor();
    bw: number;
    ad: Axis;
    private ak;
    get az(): boolean;
    set az(a: boolean);
    private a3;
    get a9(): List$1<any>;
    set a9(a: List$1<any>);
    ba: List$1<LabelPosition>;
    c4: Rect;
    private cw;
    get c5(): Rect;
    set c5(a: Rect);
    private cv;
    get c1(): Rect;
    set c1(a: Rect);
    c2: Rect;
    private bc;
    get bg(): number;
    set bg(a: number);
    bx: () => boolean;
    bb: List$1<FrameworkElement>;
    a8: List$1<Rect>;
    ag: AxisLabelSettings;
    bn(): number;
    ao: boolean;
    c3: Rect;
    cl(): void;
    ar: boolean;
    av: boolean;
    aw: boolean;
    ax: boolean;
    bz: any;
    al: boolean;
    protected an(a: List$1<Rect>, b: List$1<boolean>): boolean;
    protected by(a: number, b: List$1<Rect>, c: List$1<boolean>): {
        ret: number;
        p1?: List$1<Rect>;
    };
    a5(): List$1<Rect>;
    b6(): void;
    b2(a: Size): void;
    get ap(): boolean;
    bl(): number;
    bq(): number;
    at(a: number, b: Rect): boolean;
    bk(a: any): number;
    bv(a: any): number;
    bm(a: any): number;
    bj(a: any): number;
    aq(): boolean;
    protected ct(a: Rect, b: Rect): void;
    protected cd(a: Rect, b: Rect): void;
    a7(): List$1<Rect>;
    a6(a: List$1<Rect>): List$1<Rect>;
    protected cy(a: number, b: Rect, c: Thickness): Rect;
    protected as(a: List$1<Rect>, b: List$1<number>, c: Thickness): boolean;
    protected a4(a: List$1<Rect>): List$1<number>;
    bp(a: number, b: Size): number;
    bo(a: number, b: Size): number;
    bt(): number;
    br(): number;
    bs(): number;
    bu(): number;
    c6(a: Size): Size;
    protected get am(): boolean;
    c0(): Rect;
    protected b5(a: Size): void;
    protected b4(a: Size): void;
    protected b9(): void;
    protected a2(): IEnumerable$1<number>;
    get ah(): AxisLabelsLocation;
    cs(a: GeometryCollection, b: number, c: number, d: number, e: Rect, f: PathRenderingInfo): void;
    cc(a: GeometryCollection, b: number, c: number, d: number, e: Rect, f: PathRenderingInfo): void;
    cm(a: FrameworkElement, b: number): void;
    protected get_au(): boolean;
    get au(): boolean;
    ac(a: Rect, b: number): Point[];
    cz(a: Rect, b: number): Rect;
    cn(a: FrameworkElement): void;
    cb(a: FrameworkElement, b: number): void;
    c8(a: Size): Size;
    static readonly cu: DependencyProperty;
    get bh(): number;
    set bh(a: number);
    bd: number;
    aj(a: TitleSettings): AxisTitlePosition;
    ai(): AxisLabelsLocation;
    ay(a: AxisLabelsLocation): boolean;
    private _a0;
    a0(): IEnumerable$1<any>;
    b1(a: number, b: TextBlock, c: number, d: number, e: number): string;
    b7(a: any): void;
    cg(a: FrameworkElement): void;
    private _a1;
    a1(): IEnumerable$1<any>;
    protected be: number;
    protected bf: number;
    ca(): void;
    cr(): void;
    ce(): void;
    bi(a: Rect): number;
    c7: Size;
    ci(): void;
    cq(): void;
    cf(): void;
    cj(a: RenderingContext): void;
    b3(): void;
    ck(): void;
}
/**
 * @hidden
 */
export declare abstract class CategoryAxisBase extends Axis implements ICategoryScaler {
    static $t: Type;
    a4(): AxisView;
    ag(): number[];
    protected get_cd(): boolean;
    hs(a: AxisView): void;
    kn: CategoryAxisBaseView;
    protected eg(a: number, b: Rect, c: Rect, d: Rect): number;
    constructor();
    c8(a: Rect, b: Rect, c: AxisView): boolean;
    l1(): void;
    l0(): void;
    ky: List$1<number>;
    protected get_cb(): boolean;
    me(a: Point, b: boolean, c: number): Rect;
    mf(a: Point, b: boolean, c: number, d: boolean): Rect;
    kr: IFastItemsSource;
    private kq;
    get itemsSource(): IEnumerable;
    set itemsSource(a: IEnumerable);
    static readonly l9: DependencyProperty;
    private ld;
    lf: number;
    get lg(): number;
    set lg(a: number);
    get categoryMode(): CategoryMode;
    set categoryMode(a: CategoryMode);
    private ko;
    k1: number;
    protected lb(a: Rect, b: Rect, c: Rect): number;
    k8: number;
    k0: number;
    k9: number;
    la: number;
    kv: boolean;
    get lh(): number;
    set lh(a: number);
    private le;
    em(a: number, b: ScalerParams): number;
    getUnscaledValue3(a: number, b: Rect, c: Rect, d: CategoryMode): number;
    getCategorySize(a: Rect, b: Rect, c: Rect): number;
    k4(a: Rect, b: Rect, c: Rect): number;
    getGroupCenter(a: number, b: Rect, c: Rect, d: Rect): number;
    lc(a: number): number;
    private _kx;
    private kx;
    private kt;
    ku(a: SeriesViewer): boolean;
    private _kw;
    private kw;
    private ks;
    l5(a: boolean): void;
    protected hw(a: any, b: string, c: any, d: any): void;
    protected lt(): void;
    lv(a: any, b: FastItemsSourceEventArgs): void;
    protected l2(a: FastItemsSourceEventArgs): void;
    private l6;
    ct(a: Series): boolean;
    b0(a: Series): boolean;
    private l3;
    ls(): void;
    l4(): void;
    lu(a: NotifyCollectionChangedEventArgs): void;
    lz(a: number, b: any, c: any): void;
    lw(): void;
    lx(a: number, b: any): void;
    ly(a: number, b: any): void;
    k5(a: Rect, b: Rect, c: Rect, d: number): number;
    k6(a: Rect, b: Rect, c: Rect, d: number, e: number): number;
    getSeriesOffset(a: Rect, b: Rect, c: Rect, d: number, e: number): number;
    get isVertical(): boolean;
    j$d(a: number, b: ScalerParams): number;
    j$c(a: number, b: ScalerParams): number;
    j$e(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$g(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    get j$b(): boolean;
    j$a(): number[];
    static $$p: string[];
}
/**
 * @hidden
 */
export declare abstract class HorizontalAxisLabelPanelBase extends AxisLabelPanelBase {
    static $t: Type;
    ae(): AxisLabelPanelBaseView;
    ch(a: AxisLabelPanelBaseView): void;
    c9: HorizontalAxisLabelPanelBaseView;
    dl: number;
    di: number;
    dk: number;
    dj: number;
    b6(): void;
    db(): boolean;
    dc(): boolean;
    aq(): boolean;
    a5(): List$1<Rect>;
    dn(a: List$1<Rect>, b: List$1<boolean>, c: number): void;
    private dm;
    private dp;
    protected dq(a: List$1<Rect>, b: List$1<boolean>): void;
    protected dr(): void;
    protected get_au(): boolean;
    cm(a: FrameworkElement, b: number): void;
    protected dd(): boolean;
    protected da(): boolean;
    protected by(a: number, b: List$1<Rect>, c: List$1<boolean>): {
        ret: number;
        p1?: List$1<Rect>;
    };
    c0(): Rect;
    dh(): number;
    de(): number;
    dg(): number;
    df(): number;
    protected b9(): void;
    a6(a: List$1<Rect>): List$1<Rect>;
}
/**
 * @hidden
 */
export declare class HorizontalAxisLabelPanel extends HorizontalAxisLabelPanelBase {
    static $t: Type;
    ai(): AxisLabelsLocation;
    ay(a: AxisLabelsLocation): boolean;
}
/**
 * @hidden
 */
export declare abstract class NumericAxisBase extends Axis {
    static $t: Type;
    a4(): AxisView;
    ag(): number[];
    hs(a: AxisView): void;
    d1(a: number, b: ScalerParams): number;
    kx: NumericAxisBaseView;
    protected get_cj(): boolean;
    constructor();
    get ku(): AxisRangeBufferMode;
    set ku(a: AxisRangeBufferMode);
    private ks;
    get kv(): AxisRangeBufferMode;
    set kv(a: AxisRangeBufferMode);
    static readonly ne: DependencyProperty;
    l5: number;
    get lx(): number;
    set lx(a: number);
    private lp;
    l3: number;
    f2(): any;
    get l0(): number;
    set l0(a: number);
    private ls;
    l4: number;
    get lw(): number;
    set lw(a: number);
    private lo;
    f1(): any;
    l2: number;
    private lr;
    get lz(): number;
    set lz(a: number);
    l1: number;
    private ln;
    get lv(): number;
    set lv(a: number);
    ev(): number;
    l6: number;
    private lq;
    get ly(): number;
    set ly(a: number);
    l7: number;
    li: boolean;
    private k8;
    get lb(): boolean;
    set lb(a: boolean);
    ld: boolean;
    private k9;
    get lc(): boolean;
    set lc(a: boolean);
    get lj(): boolean;
    l9: number;
    ma: number;
    k0: NumericAxisRenderer;
    protected lk: boolean;
    protected ll: boolean;
    protected h9(a: boolean): void;
    h1(a: any): void;
    h0(a: any): void;
    ko: BindingFormatter;
    protected hw(a: any, b: string, c: any, d: any): void;
    protected m1(): void;
    kq: AxisRange;
    kr(): AxisRange;
    lu: number;
    lt: number;
    private lm;
    private kw;
    my(a: NumericAxisBase, b: number, c: number, d: boolean, e: number, f: number, g: number): {
        p5: number;
        p6: number;
    };
    private kt;
    c3(): boolean;
    private mz;
    m2(a: AxisRangeChangedEventArgs): void;
    ct(a: Series): boolean;
    b0(a: Series): boolean;
    kz(a: AxisLabelManager): NumericAxisRenderer;
    ky(): NumericAxisRenderer;
    kp: (item: any) => string;
    mb: string;
    kn: any[];
    lh: boolean;
    k2(): NumericAxisRenderingParameters;
    m0(): void;
    k3(): NumericScaler;
    k1(a: Rect, b: Rect, c: Rect, d: Rect): NumericAxisRenderingParameters;
    l8(a: number): number;
    le(): boolean;
    get lg(): boolean;
    get lf(): boolean;
    private m3;
    static readonly ng: DependencyProperty;
    get k6(): TickmarkValues;
    set k6(a: TickmarkValues);
    private k4;
    get k5(): TickmarkValues;
    set k5(a: TickmarkValues);
    private k7;
    get la(): boolean;
    set la(a: boolean);
    static $$p: string[];
}
/**
 * @hidden
 */
export declare abstract class NumericScaler extends DependencyObject {
    static $t: Type;
    static readonly ac: Rect;
    abstract t(a: NumericAxisBase, b: number, c: number, d: number, e: number): {
        p3: number;
        p4: number;
    };
    l: number;
    k: number;
    protected o: number;
    protected n: number;
    y(a: number): void;
    x(a: number): void;
    protected w(a: string, b: any, c: any): void;
    private z;
    protected m: number;
    abstract q(a: number, b: ScalerParams): number;
    abstract p(a: number, b: ScalerParams): number;
    j(a: IList$1<number>, b: number, c: number, d: ScalerParams): IList$1<number>;
    v(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    u(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AxisRendererBase extends Base {
    static $t: Type;
    constructor(a: AxisLabelManager);
    u: () => void;
    o: (viewportRect: Rect, windowRect: Rect) => boolean;
    v: () => void;
    m: (p: AxisRenderingParametersBase, value: number) => number;
    l: (p: AxisRenderingParametersBase, geometry: GeometryCollection, startValue: number, endValue: number) => void;
    k: (p: AxisRenderingParametersBase, geometry: GeometryCollection, value: number) => void;
    q: (p: AxisRenderingParametersBase, value: number) => boolean;
    n: (p: AxisRenderingParametersBase, value: number) => boolean;
    j: (p: AxisRenderingParametersBase) => void;
    e: (p: AxisRenderingParametersBase) => void;
    p: (p: AxisRenderingParametersBase, position: number, isLastLabel: boolean) => boolean;
    h: (p: AxisRenderingParametersBase, value: number) => LabelPosition;
    t: (p: AxisRenderingParametersBase, value: number) => number;
    b: AxisLabelManager;
    g: (item: any, fromAbbreviator: boolean) => any;
    d: (viewportRect: Rect, windowRect: Rect, effectiveViewportRect: Rect, contentViewport: Rect) => AxisRenderingParametersBase;
    r: (p: AxisRenderingParametersBase, value: number, absoluteIndex: number, interval: number) => number;
    a: (p: AxisRenderingParametersBase, value: number, absolueIndex: number, interval: number) => number;
    f: (index: number, window: Rect, viewport: Rect, effectiveViewport: Rect) => number;
    i: (index: number) => number;
    c(a: boolean, b: Rect, c: Rect, d: Rect, e: Rect): AxisRenderingParametersBase;
    private aa;
    private ab;
    protected x(a: Rect, b: Rect): void;
    private z;
    private s;
    private y;
    w(a: AxisRenderingParametersBase, b: number, c: number, d: number): any;
}
/**
 * @hidden
 */
export declare class NumericAxisRenderer extends AxisRendererBase {
    static $t: Type;
    constructor(a: AxisLabelManager);
    w(a: AxisRenderingParametersBase, b: number, c: number, d: number): any;
    private ac;
    private ad;
    private ae;
}
/**
 * @hidden
 */
export declare class VerticalAxisLabelPanel extends AxisLabelPanelBase {
    static $t: Type;
    ae(): AxisLabelPanelBaseView;
    ch(a: AxisLabelPanelBaseView): void;
    c9: VerticalAxisLabelPanelView;
    di: number;
    df: number;
    dh: number;
    dg: number;
    b6(): void;
    bq(): number;
    db(): number;
    dd(): number;
    de(): number;
    dc(): number;
    a5(): List$1<Rect>;
    private dj;
    private dk;
    cm(a: FrameworkElement, b: number): void;
    protected da(): boolean;
    c0(): Rect;
    aj(a: TitleSettings): AxisTitlePosition;
    ai(): AxisLabelsLocation;
    ay(a: AxisLabelsLocation): boolean;
    protected b9(): void;
}
/**
 * @hidden
 */
export interface IHasCategoryAxis {
    readonly categoryAxis: CategoryAxisBase;
    getOffsetValue(): number;
    getCategoryWidth(): number;
}
/**
 * @hidden
 */
export declare let IHasCategoryAxis_$type: Type;
/**
 * @hidden
 */
export interface IHasCategoryModePreference extends IHasCategoryAxis {
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
}
/**
 * @hidden
 */
export declare let IHasCategoryModePreference_$type: Type;
/**
 * @hidden
 */
export declare class AutomaticSeriesManager extends Base {
    static $t: Type;
    private g;
    private c;
    e(a: AutomaticSeriesPurpose): boolean;
    constructor(a: SeriesViewer);
    private i;
    private n;
    private m;
    protected f: boolean;
    private j;
    private k;
    l(a: AutomaticSeriesPurpose): void;
    private h;
    private d;
    private a;
    get b(): AutomaticSeriesRequestCollection;
}
/**
 * @hidden
 */
export declare class AutomaticSeriesRequest extends Base {
    static $t: Type;
    a: AutomaticSeriesPurpose;
    d: Series;
    b: Series;
    c: Series;
    e: boolean;
    f: boolean;
}
/**
 * @hidden
 */
export declare class AutomaticSeriesRequestCollection extends ObservableCollection$1<AutomaticSeriesRequest> {
    static $t: Type;
    constructor();
}
/**
 * @hidden
 */
export declare class ChartSelection extends Base {
    static $t: Type;
    private _item;
    get item(): any;
    set item(a: any);
    a: Series;
    b: SeriesMatcher;
    equals(a: any): boolean;
    getHashCode(): number;
    f(a: SeriesViewer): void;
}
/**
 * @hidden
 */
export declare class ChartSelectedItemCollection extends ObservableCollection$1<ChartSelection> {
    static $t: Type;
    constructor();
    collectionResetting: (sender: any, e: EventArgs) => void;
    protected p(): void;
}
/**
 * @hidden
 */
export declare class SeriesMatcherHelper extends Base {
    static $t: Type;
    static a(a: SeriesViewer, b: SeriesMatcher): Series[];
    private static b;
}
/**
 * @hidden
 */
export declare class SeriesLayer extends DependencyObject implements INotifyPropertyChanged {
    static $t: Type;
    private _source;
    get source(): Series;
    set source(a: Series);
    private _target;
    get target(): Series;
    set target(a: Series);
    private z;
    constructor();
    private ak;
    au(): void;
    at(): void;
    get t(): boolean;
    private a3;
    private a4;
    private a5;
    private a2;
    private ah;
    private an;
    private ag;
    private ao;
    n: IExecutionContext;
    private u;
    private ar;
    private as;
    private y;
    az(a: Series, b: DependencyProperty): void;
    a0(a: Series, b: DependencyProperty): void;
    private r;
    private af;
    private al;
    private p;
    private aa;
    private ab;
    private v;
    private w;
    private x;
    private av;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    private ax;
    protected q: boolean;
    am(a: Series, b: Series): void;
    private ay;
    private a1;
    ap(a: Series): void;
    private aq;
    private aw;
    ai(a: Series, b: Series, c: DependencyProperty, d: any): any;
    private s;
    private ad;
    private ae;
    ac: number;
    get m(): SeriesLayerPropertyOverlayCollection;
    private l;
    private o;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class SeriesLayerCollection extends ObservableCollection$1<SeriesLayer> {
    static $t: Type;
    constructor();
    collectionResetting: (sender: any, e: EventArgs) => void;
    protected p(): void;
}
/**
 * @hidden
 */
export declare class SeriesLayerManager extends Base {
    static $t: Type;
    a: Series;
    private b;
    private i;
    private n;
    private m;
    h(a: Series, b: SeriesLayerCollection, c: NotifyCollectionChangedEventArgs): void;
    j(a: Series, b: SeriesLayerCollection, c: EventArgs): void;
    e(a: Series, b: SeriesLayerCollection, c: NotifyCollectionChangedEventArgs): void;
    f(a: Series, b: SeriesLayerCollection, c: EventArgs): void;
    c(a: Series, b: SeriesLayerCollection, c: NotifyCollectionChangedEventArgs): void;
    private g;
    private l;
    private k;
    d(a: Series, b: SeriesLayerCollection, c: EventArgs): void;
}
/**
 * @hidden
 */
export declare class SeriesLayerPropertyOverlay extends DependencyObject implements INotifyPropertyChanged {
    static $t: Type;
    o: boolean;
    k: SeriesLayerPropertyOverlay;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    private ah;
    q: boolean;
    protected n: boolean;
    private ag;
    private m;
    w: any;
    s: any;
    t(a: any, b: any, c: Series): any;
    private aj;
    private v;
    private ai;
    private u;
    r: boolean;
    p: boolean;
    get aa(): string;
    ad: string;
    y: string;
    x: any;
    valueResolving: (sender: any, e: SeriesLayerPropertyOverlayValueResolvingEventArgs) => void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class SeriesLayerPropertyOverlayCollection extends ObservableCollection$1<SeriesLayerPropertyOverlay> {
    static $t: Type;
    constructor();
    collectionResetting: (sender: any, e: EventArgs) => void;
    protected p(): void;
}
/**
 * @hidden
 */
export interface IDataChartToolbarProvider {
    container: any;
    getDesiredToolbarActions(): ToolActionInfo[];
    onToolCommandExecuting(a: SeriesViewer, b: ToolCommand): ToolCommandExecutionState;
}
/**
 * @hidden
 */
export declare let IDataChartToolbarProvider_$type: Type;
/**
 * @hidden
 */
export interface ISeriesViewerScrollbarManager {
    executionContext: IExecutionContext;
    animator: DoubleAnimator;
    owner: SeriesViewer;
    onHorizontalScrollbarModeChanged(a: SeriesViewerScrollbarMode): void;
    onVerticalScrollbarModeChanged(a: SeriesViewerScrollbarMode): void;
    updateScrollbars(a: SeriesViewer, b: Rect, c: Rect, d: Rect, e: Rect): void;
    updateBarDimensions(a: SeriesViewer, b: number, c: number, d: number, e: boolean, f: number, g: number, h: number, i: number, j: number, k: boolean, l: number, m: number): void;
    updateBarAppearance(a: SeriesViewer, b: Brush, c: Brush, d: Brush, e: Brush, f: number, g: number, h: number, i: number): void;
    onCrosshairMoved(a: Point): void;
    shouldHandleInteraction(a: Point, b: boolean): boolean;
    onScrollbarDrag(a: Point, b: boolean): void;
    onScrollbarDragComplete(a: Point, b: boolean): void;
    onScrollbarDragCancel(): void;
    updateVerticalScrollbarPosition(a: SeriesViewerVerticalScrollbarPosition): void;
    updateHorizontalScrollbarPosition(a: SeriesViewerHorizontalScrollbarPosition): void;
}
/**
 * @hidden
 */
export declare let ISeriesViewerScrollbarManager_$type: Type;
/**
 * @hidden
 */
export interface ISeriesInteractionManager {
    a$l(a: Series, b: Point, c: number, d: Axis, e: ScalerParams, f: number, g: number, h: (arg1: Point) => number): number;
    a$o(a: Series, b: IList$1<number>, c: Point, d: Axis, e: ScalerParams, f: number, g: (arg1: Point) => number, h: boolean, i: boolean): number;
    a$n(a: Series, b: number, c: IList$1<number>, d: number, e: number, f: number, g: number, h: number, i: boolean): number;
    a$q(a: Series, b: Point, c: boolean, d: Axis, e: (arg1: Point) => number, f: IList$1<number>): number;
    a$e(a: Series, b: Point, c: boolean): boolean;
    a$a(a: Series, b: CategoryAxisBase, c: List$1<number[]>, d: number, e: number, f: Point, g: boolean): number[][];
    a$f(a: Series, b: Point, c: boolean, d: PathGeometry): boolean;
    a$g(a: Series, b: Point, c: PathGeometry): boolean;
    a$p(a: Series, b: Point, c: boolean, d: Axis, e: (arg1: Point) => number, f: IList$1<number>): number;
    a$m(a: Series, b: Point, c: Axis): number;
    a$h(a: Series, b: Point, c: boolean): boolean;
    a$at(a: Series, b: Point, c: boolean, d: boolean, e: number, f: Axis, g: Axis, h: (arg1: Point, arg2: boolean, arg3: boolean) => number, i: (arg1: Point, arg2: boolean) => number, j: (arg1: Point, arg2: boolean) => number): Point;
    a$aa(a: Series, b: any, c: Point, d: boolean, e: boolean, f: boolean, g: boolean, h: boolean, i: boolean): void;
    a$x(): void;
    a$as(a: Series, b: HighlightingInfo, c: HighlightingInfo, d: HighlightingInfo, e: number, f: number, g: number, h: number, i: number, j: number, k: Brush, l: boolean): Brush;
    a$k(a: Series, b: HighlightingInfo, c: HighlightingInfo, d: HighlightingInfo, e: number): number;
    a$j(a: Series, b: HighlightingInfo, c: HighlightingInfo, d: HighlightingInfo, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: boolean): number;
    a$ad(a: Series, b: Point, c: any, d: any, e: boolean): void;
    a$aq(a: Series, b: Point): void;
    a$ag(a: Series, b: Point, c: any, d: any, e: boolean): void;
    a$ae(a: Series, b: Point, c: any, d: any, e: boolean): void;
    a$ab(a: Series, b: Point, c: any, d: any): void;
    a$af(a: Series, b: Point, c: any, d: any): void;
    a$ac(a: Series, b: Point, c: any, d: any): void;
    a$ah(a: Series, b: Point, c: any, d: any): void;
    a$ai(a: Series, b: Point, c: any, d: any): void;
    a$s(a: Series): string;
    a$t(a: Series): string;
    readonly a$b: boolean;
    readonly a$r: any;
    a$ar(a: Series, b: any): void;
    a$ap(a: Series, b: Point, c: (arg1: any) => void): void;
    a$z(a: Series): void;
    a$ao(a: Series): void;
    readonly a$d: boolean;
    readonly a$i: Dictionary$2<string, SeriesView>;
    readonly a$c: boolean;
    a$y(a: Series, b: Rect, c: Rect, d: string, e: number): void;
    a$aj(a: Series, b: SeriesViewer): void;
    a$ak(a: Series, b: string, c: SeriesViewer): void;
    a$w(a: Series, b: any, c: number): void;
    a$u(a: Series): void;
    a$am(a: Series, b: any, c: number): void;
    a$an(a: Series): void;
    a$v(a: Series, b: any, c: number): void;
    a$al(a: Series, b: any, c: number): void;
}
/**
 * @hidden
 */
export declare let ISeriesInteractionManager_$type: Type;
/**
 * @hidden
 */
export interface ISeriesViewerInteractionManager {
    f$a(a: SeriesViewer): ChartHitTestMode;
    f$aj(a: SeriesViewer): void;
    f$t(a: SeriesViewer, b: Point): void;
    f$ah(a: SeriesViewer, b: Point): void;
    f$u(a: SeriesViewer, b: Point, c: boolean): void;
    f$s(a: SeriesViewer, b: Point): void;
    f$ao(a: SeriesViewer): void;
    f$ag(a: SeriesViewer, b: Point): void;
    f$ap(a: SeriesViewer, b: Point, c: number, d: number, e: number): void;
    f$af(a: SeriesViewer, b: number): void;
    f$al(a: SeriesViewer, b: Point, c: number, d: number, e: number): void;
    f$ac(a: SeriesViewer, b: Point): void;
    f$ae(a: SeriesViewer, b: number): void;
    f$v(a: SeriesViewer, b: Point): void;
    f$ab(a: SeriesViewer, b: Point): void;
    f$ak(a: SeriesViewer, b: Point, c: number, d: number, e: number): void;
    f$q(a: SeriesViewer, b: Point, c: boolean): void;
    f$an(a: SeriesViewer): void;
    f$am(a: SeriesViewer): void;
    f$at(a: SeriesViewer): void;
    f$n(a: SeriesViewer): void;
    f$k(a: SeriesViewer): void;
    f$p(a: SeriesViewer, b: Point, c: boolean): void;
    f$o(a: SeriesViewer, b: Point, c: boolean, d: boolean): void;
    f$ar(a: SeriesViewer): void;
    f$ai(a: SeriesViewer): void;
    f$g(a: SeriesViewer, b: Key): boolean;
    f$h(a: SeriesViewer, b: Point, c: number): boolean;
    f$r(a: SeriesViewer, b: Point): void;
    f$m(a: SeriesViewer): void;
    f$l(a: SeriesViewer): void;
    readonly f$e: IHighlightingManager;
    readonly f$f: IHighlightingManager;
    readonly f$d: IHighlightingManager;
    readonly f$b: ISeriesViewerScrollbarManager;
    f$as(a: SeriesViewer, b: Point): void;
    f$j(a: Series, b: any, c: number): void;
    f$aq(a: Series, b: any, c: number): void;
    f$c(a: SeriesViewer, b: SeriesCollection, c: RenderingContext, d: Point, e: boolean, f: DataContext, g: boolean): {
        ret: Series;
        p5: DataContext;
    };
    f$i(a: SeriesViewer, b: Point): boolean;
    f$z(a: SeriesViewer, b: SeriesCollection, c: RenderingContext, d: Point, e: boolean, f: boolean): void;
    f$y(a: SeriesViewer, b: Point): void;
    f$x(a: SeriesViewer, b: EventProxy, c: Point): void;
    f$aa(a: SeriesViewer, b: EventProxy, c: Point): void;
    f$w(a: SeriesViewer, b: Point, c: boolean): void;
    f$ad(a: SeriesViewer, b: boolean): void;
}
/**
 * @hidden
 */
export declare let ISeriesViewerInteractionManager_$type: Type;
/**
 * @hidden
 */
export interface IDataChartVisualDataManager {
    exportVisualData(a: XamDataChart): any;
}
/**
 * @hidden
 */
export declare let IDataChartVisualDataManager_$type: Type;
/**
 * @hidden
 */
export interface IAxisVisualDataManager {
    exportVisualData(a: Axis): any;
}
/**
 * @hidden
 */
export declare let IAxisVisualDataManager_$type: Type;
/**
 * @hidden
 */
export interface ISeriesVisualDataManager {
    exportVisualData(a: Series, b: Rect): any;
    exportMarkerVisualData(a: MarkerSeries, b: any): void;
    getMarkerVisualData(a: Series, b: Marker, c: DataTemplate): any;
    copyVisualData(a: any, b: any): void;
    exportTrendlineData(a: Series, b: any, c: Polyline): void;
    exportStackedVisualData(a: Series, b: Rect): any;
    createFragmentVisualData(a: Series, b: Rect, c: string, d: string): any;
    addSubSeriesVisualData(a: any, b: any): void;
    addSubSeriesLayerVisualData(a: any, b: any): void;
    exportRectangleData(a: any, b: Rectangle, c: string, d: string[]): void;
    exportMarkerVisualDataFromMarker(a: Series, b: any, c: ContentControl): void;
    exportPathData(a: any, b: Path, c: string, d: string[]): void;
    exportPolylineData(a: any, b: Polyline, c: string, d: string[]): void;
    exportPolygonData(a: any, b: Polygon, c: string, d: string[]): void;
    exportSeriesPixelsData(a: any, b: number[], c: number, d: number): void;
    addPointerTooltipData(a: any, b: any, c: number, d: number, e: List$1<string>): void;
    addPointerTooltipWithDataLegend(a: any, b: any, c: number, d: number, e: any): void;
    exportPointerTooltipData(a: Polygon, b: Polyline, c: Rectangle, d: Rect): any;
    exportCalloutData(a: number, b: number, c: number, d: number, e: any, f: Rectangle, g: TextBlock, h: FontInfo, i: Line, j: string, k: string[]): void;
    exportLayerVisualData(a: Series, b: any): void;
}
/**
 * @hidden
 */
export declare let ISeriesVisualDataManager_$type: Type;
/**
 * @hidden
 */
export declare class XamDataChart extends SeriesViewer {
    static $t: Type;
    static xr: number;
    static xq: number;
    private _xsr;
    private get XSRP();
    private v9;
    get wa(): IDataChartVisualDataManager;
    static staticInit(): void;
    static x3(a: Series): number;
    constructor();
    protected pz(a: any, b: string, c: any, d: any): void;
    qh(): void;
    od(): void;
    protected n4(a: Rect, b: Rect): void;
    protected n8(): void;
    za(): void;
    private y5;
    private z5;
    private zc;
    private wf;
    private we;
    private wc;
    private wb;
    private z6;
    private z7;
    protected get_es(): boolean;
    wu: boolean;
    hj(): number;
    hk(): number;
    protected q2(): void;
    x1: number;
    x2: number;
    private xa;
    get xm(): number;
    set xm(a: number);
    private xb;
    get xn(): number;
    set xn(a: number);
    ff(): boolean;
    fg(): boolean;
    wr: boolean;
    w4: boolean;
    ws: boolean;
    wv: boolean;
    v8: GridMode;
    wo: boolean;
    wz: boolean;
    w0: boolean;
    xt: number;
    xp: number;
    xo: number;
    get wm(): boolean;
    protected get_fo(): boolean;
    get wn(): boolean;
    w2: boolean;
    wy: boolean;
    w1: boolean;
    w3: boolean;
    v3: AutoMarginsAndAngleUpdateMode;
    wt: boolean;
    wx: boolean;
    ww: boolean;
    private xc;
    private xd;
    private xu;
    private xv;
    protected get_fn(): boolean;
    protected get_fm(): boolean;
    y9(): void;
    y8(): void;
    y7(a: AxisLabelPanelBase, b: Rect, c: Rect, d: Rect): void;
    private x0;
    private xs;
    private y4;
    z4: Brush;
    z2: Brush;
    z3: Brush;
    get axes(): AxisCollection;
    private v4;
    private y1;
    private y2;
    axisRangeChanged: (sender: any, e: ChartAxisRangeChangedEventArgs) => void;
    private y3;
    private static y6;
    rb(a: SyncLink, b: SyncLink): void;
    private wi;
    getFontInfo(): FontInfo;
    zb(): void;
    getFontBrush(): Brush;
    protected m4(): void;
    ul(): Brush;
    fw(): boolean;
    protected q6(): void;
    er(): boolean;
    private wq;
    protected c7(): SeriesViewerView;
    protected pn(a: SeriesViewerView): void;
    wh: XamDataChartView;
    qi(): void;
    private wl;
    static x6: string;
    private w7;
    get xj(): number;
    set xj(a: number);
    static x8: string;
    private w9;
    get xl(): number;
    set xl(a: number);
    static x7: string;
    private w8;
    get xk(): number;
    set xk(a: number);
    static x5: string;
    private w6;
    get xi(): number;
    set xi(a: number);
    v6: ComputedPlotAreaMarginMode;
    wd: SeriesPlotAreaMarginHorizontalMode;
    wg: SeriesPlotAreaMarginVerticalMode;
    private xf;
    get xx(): number;
    set xx(a: number);
    private xh;
    get xz(): number;
    set xz(a: number);
    private xg;
    get xy(): number;
    set xy(a: number);
    private xe;
    get xw(): number;
    set xw(a: number);
    protected vj(a: Rect): Rect;
    vp(): Rect;
    x4(): any;
    yj(): string;
    pw(): void;
    qk(): void;
    w5(a: Axis): List$1<Axis>;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class LabelPanelArranger extends Base {
    static $t: Type;
    static e(a: List$1<AxisLabelPanelBase>, b: Rect): Rect;
    private static a;
    static b(a: AxisLabelPanelBase): AxisLabelsLocation;
    private static c;
    static d(a: List$1<AxisLabelPanelBase>, b: LabelPanelsArrangeState, c: Rect, d: (arg1: AxisLabelPanelBase, arg2: Rect) => void): void;
}
/**
 * @hidden
 */
export declare class ChartContentManager extends DependencyObject {
    static $t: Type;
    private l;
    private r;
    private t;
    private get u();
    private set u(value);
    constructor(a: SeriesViewer);
    k(a: ChartContentType, b: DependencyObject, c: (arg1: boolean) => void): ContentInfo;
    ad(a: ChartContentType, b: DependencyObject): void;
    private m;
    private v;
    aa(a: DomRenderer): void;
    z(): void;
    ac(a: ChartContentType, b: DependencyObject, c: ContentInfo, d: boolean): void;
    private q;
    private j;
    y(): void;
    private w;
    private _s;
    private s;
    x(a: Size): void;
    o: boolean;
    n: boolean;
    p: boolean;
    ae(a: ChartContentType, b: DependencyObject, c: ContentInfo, d: Rect): void;
    ab(a: Axis, b: ContentInfo): void;
}
/**
 * @hidden
 */
export declare class ContentInfo extends Base {
    static $t: Type;
    h: DependencyObject;
    a: (arg1: boolean) => void;
    b: boolean;
    c: boolean;
    i: Rect;
    get d(): boolean;
    g(): void;
    f(): void;
    e: boolean;
}
/**
 * @hidden
 */
export declare abstract class Series extends Control implements INotifyPropertyChanged, IProvidesViewport, ILegendSeries, ILegendSeriesInternal, ILegendOwner, ILegendTemplateProvider, IDataLegendSeries {
    static $t: Type;
    cl: SeriesView;
    private static jg;
    jw: number;
    u0: Rect;
    fw(): boolean;
    protected get_dataLegendKey(): string;
    get dataLegendKey(): string;
    k8: string;
    ln: string;
    get group(): string;
    get parentKey(): string;
    get parentTitle(): string;
    eh: boolean;
    private je;
    get jf(): DomRenderer;
    set jf(a: DomRenderer);
    provideRenderer(a: DomRenderer): void;
    mi(): string;
    constructor();
    jm(): number;
    b3: SeriesLayerManager;
    private nw;
    private nx;
    private ns;
    private nt;
    private nq;
    private nr;
    private nu;
    private pm;
    private ps;
    private pr;
    private nv;
    re(a: MarkerOutlineMode): void;
    rd(a: MarkerFillMode): void;
    rf(a: number): void;
    private static readonly tq;
    protected ny(a: any, b: PropertyChangedEventArgs): void;
    private df;
    get dg(): SRProvider;
    private a3;
    get a4(): ISeriesVisualDataManager;
    protected get g5(): Dictionary$2<string, SeriesView>;
    private a1;
    get a2(): ISeriesInteractionManager;
    get e3(): boolean;
    c2: DoubleAnimator;
    px(a: SeriesView): void;
    pu(): void;
    pv(): void;
    cj(): SeriesView;
    protected ci(): SeriesView;
    ro: Canvas;
    gt(): boolean;
    j5(a: any, b: string): any;
    li(a: string): string;
    onLegendItemOver(a: any): void;
    onLegendItemPointerUp(a: any): void;
    onLegendItemPointerDown(a: any): void;
    onLegendItemEnter(a: any): void;
    onLegendItemLeave(a: any): void;
    private gz;
    protected mh(a: string): string;
    private gy;
    protected j6(a: any, b: string, c: string): any;
    h6(a: Point): number;
    jl(a: Point): number;
    protected get_fd(): boolean;
    get fd(): boolean;
    as(): CategoryAxisBase;
    jj(a: Point): number;
    va(): Thickness;
    vc(a: SeriesPlotAreaMarginHorizontalMode, b: SeriesPlotAreaMarginVerticalMode): Thickness;
    vb(a: SeriesPlotAreaMarginHorizontalMode, b: SeriesPlotAreaMarginVerticalMode): Thickness;
    ca(): SeriesPlotAreaMarginHorizontalMode;
    cb(): SeriesPlotAreaMarginVerticalMode;
    j2(a: Point): any;
    protected j8(a: Series, b: Point): any;
    protected c8(a: Series, b: any, c: Point, d: boolean): HighlightingInfo;
    protected c9(a: Series, b: any, c: Point, d: boolean): HighlightingInfo;
    ji(): number;
    jn(): number;
    js(): number;
    get container(): ILegendOwner;
    get hasSubItems(): boolean;
    protected d3(): boolean;
    forSubItems(a: (arg1: any) => void): void;
    protected oz(a: (arg1: any) => void): void;
    o0(a: (arg1: Series) => boolean): void;
    get d2(): boolean;
    oy(a: (arg1: Series) => boolean): void;
    mg(): string;
    ue(): Brush;
    uf(): Brush;
    resolveLegendIndex(): number;
    bg(): Series;
    protected get_ed(): boolean;
    get ed(): boolean;
    protected get_ea(): boolean;
    get ea(): boolean;
    protected get_d9(): boolean;
    get d9(): boolean;
    protected get_ec(): boolean;
    get ec(): boolean;
    protected get_eb(): boolean;
    get eb(): boolean;
    protected get_ee(): boolean;
    get ee(): boolean;
    protected get_isVertical(): boolean;
    get isVertical(): boolean;
    protected get_ew(): boolean;
    get ew(): boolean;
    protected get_eg(): boolean;
    get eg(): boolean;
    protected get_ef(): boolean;
    get ef(): boolean;
    protected get_d6(): boolean;
    get d6(): boolean;
    protected get_fq(): boolean;
    get fq(): boolean;
    protected get_e5(): boolean;
    get e5(): boolean;
    protected get_e4(): boolean;
    get e4(): boolean;
    protected get_fl(): boolean;
    get fl(): boolean;
    protected get_ek(): boolean;
    get ek(): boolean;
    protected get_ei(): boolean;
    get ei(): boolean;
    protected get_fr(): boolean;
    get fr(): boolean;
    protected get_fc(): boolean;
    get fc(): boolean;
    protected get_fb(): boolean;
    get fb(): boolean;
    protected get_e9(): boolean;
    get e9(): boolean;
    protected get_e8(): boolean;
    get e8(): boolean;
    protected get_fo(): boolean;
    get fo(): boolean;
    protected get_fm(): boolean;
    get fm(): boolean;
    protected get_fj(): boolean;
    get fj(): boolean;
    protected get_fa(): boolean;
    get fa(): boolean;
    protected get_fh(): boolean;
    get fh(): boolean;
    protected get_fe(): boolean;
    get fe(): boolean;
    protected get_isStacked(): boolean;
    get isStacked(): boolean;
    protected get_er(): boolean;
    get er(): boolean;
    protected get_ff(): boolean;
    get ff(): boolean;
    protected get_ej(): boolean;
    get ej(): boolean;
    protected get_ex(): boolean;
    get ex(): boolean;
    protected get_fi(): boolean;
    get fi(): boolean;
    protected get_isValueOverlay(): boolean;
    get isValueOverlay(): boolean;
    protected get_e0(): boolean;
    get e0(): boolean;
    protected get_isSummarizationSupported(): boolean;
    get isSummarizationSupported(): boolean;
    bf(): Series;
    protected get_d4(): boolean;
    get d4(): boolean;
    protected get_eu(): boolean;
    get eu(): boolean;
    protected get_et(): boolean;
    get et(): boolean;
    protected get_es(): boolean;
    get es(): boolean;
    protected get_ev(): boolean;
    get ev(): boolean;
    protected get_em(): boolean;
    get em(): boolean;
    protected get_en(): boolean;
    get en(): boolean;
    h4(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    protected h5(a: Point, b: number, c: Axis, d: ScalerParams, e: number, f: number, g: (arg1: Point) => number): number;
    protected get_gv(): boolean;
    get gv(): boolean;
    protected io(a: IList$1<number>, b: Point, c: Axis, d: ScalerParams, e: number, f: (arg1: Point) => number, g: boolean, h: boolean): number;
    ia(a: number, b: IList$1<number>, c: number, d: number, e: number, f: number, g: number, h: boolean): number;
    jr(a: Point, b: boolean, c: Axis, d: (arg1: Point) => number, e: IList$1<number>): number;
    h9(a: boolean): number;
    ah(a: Point): Point[][];
    ai(a: Point): Point[][];
    protected ge(a: Point, b: boolean): boolean;
    aj(a: CategoryAxisBase, b: List$1<number[]>, c: number, d: number, e: Point, f: boolean): number[][];
    protected gg(a: Point, b: boolean, c: PathGeometry): boolean;
    protected gh(a: Point, b: PathGeometry): boolean;
    jp(a: Point, b: boolean, c: Axis, d: (arg1: Point) => number, e: IList$1<number>): number;
    h8(a: Point, b: Axis): number;
    jq(a: Point, b: boolean): number;
    jo(a: Point, b: boolean): number;
    il(a: Point, b: boolean, c: boolean): number;
    uu(a: Point, b: boolean, c: boolean): Point;
    u5(a: Point): Rect;
    ak(a: Point): Rect[];
    u6(a: Point): Rect;
    al(a: Point): Rect[];
    u7(a: Point): Rect;
    u8(a: Point): Rect;
    protected gi(a: Point, b: boolean): boolean;
    protected uw(a: Point, b: boolean, c: boolean, d: number, e: Axis, f: Axis, g: (arg1: Point, arg2: boolean, arg3: boolean) => number, h: (arg1: Point, arg2: boolean) => number, i: (arg1: Point, arg2: boolean) => number): Point;
    ih(a: Point, b: boolean, c: boolean): number;
    uq(a: Point, b: boolean, c: boolean): Point;
    ij(a: Point, b: boolean, c: boolean): number;
    us(a: Point, b: boolean, c: boolean): Point;
    uv(a: Point, b: boolean, c: boolean): Point;
    im(a: Point, b: boolean, c: boolean): number;
    ur(a: Point, b: boolean, c: boolean): Point;
    ii(a: Point, b: boolean, c: boolean): number;
    ut(a: Point, b: boolean, c: boolean): Point;
    ik(a: Point, b: boolean, c: boolean): number;
    jk(a: Point): number;
    ib(): number;
    static om(a: Series, b: SeriesViewer, c: boolean): void;
    h7(a: Point): number;
    j3(a: Point): any;
    dz(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    it(a: Marker): number;
    lj(): string;
    ip(a: ValueLayerValueMode, b: Axis): number;
    am(a: ValueLayerValueMode): number[];
    ux(a: ValueLayerValueMode): Point;
    uy(a: number[]): Point;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    protected raisePropertyChanged(a: string, b: any, c: any): void;
    private ke;
    private ka;
    private static gx;
    sb(a: string): DependencyProperty;
    protected get_hasMarkers(): boolean;
    get hasMarkers(): boolean;
    o3(): void;
    o4(): void;
    t8(): Brush;
    t9(): Brush;
    rs(): DataTemplate;
    h3(): number;
    uz(a: Point): Point;
    up(a: Point): Point;
    j9(a: any, b: Point): any;
    fx(a: any): boolean;
    aq(a: Axis): AxisRange;
    ar(a: Rect): AxisRange;
    ap(a: AxisRange, b: NumericAxisBase, c: Rect): AxisRange;
    protected ov(): void;
    protected dv: boolean;
    qm(a: boolean): void;
    transitionOutCompleted: (sender: any, e: TransitionOutCompletedEventArgs) => void;
    renderRequested: (sender: any, e: RenderRequestedEventArgs) => void;
    private oi;
    private bk;
    protected get bl(): SeriesHighlightedValuesDisplayMode;
    protected set bl(a: SeriesHighlightedValuesDisplayMode);
    qn(a: boolean): void;
    private b4;
    get b5(): SeriesLayerPropertyOverlayCollection;
    protected get_d7(): boolean;
    protected get d7(): boolean;
    protected fv(): boolean;
    private qa;
    private og;
    private bv;
    private static g1;
    private static g2;
    static on(): void;
    static mz(a: string): string;
    static m0(a: string): string;
    static ob(a: Dictionary$2<string, string>, b: Dictionary$2<string, string>): void;
    protected qu(a: any, b: SeriesLayerPropertyOverlayValueResolvingEventArgs): void;
    protected qs(a: any, b: SeriesLayerPropertyOverlayValueResolvingEventArgs): void;
    protected qr(a: any, b: SeriesLayerPropertyOverlayValueResolvingEventArgs): void;
    protected qt(a: any, b: SeriesLayerPropertyOverlayValueResolvingEventArgs): void;
    protected get_gd(): boolean;
    protected get gd(): boolean;
    private ok;
    protected ha(): List$1<SeriesLayerPropertyOverlay>;
    protected hb(): List$1<SeriesLayerPropertyOverlay>;
    get fg(): boolean;
    private dk;
    protected pt(): void;
    renderValid: (sender: any, e: RenderValidEventArgs) => void;
    gk: boolean;
    gn: boolean;
    protected n3(): void;
    f4: boolean;
    protected pk(): void;
    protected pw(): void;
    private qj;
    protected n8(): void;
    ck: SeriesView;
    qo(a: Rect, b: RenderSurface): void;
    ql(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    getEffectiveViewport1(a: SeriesView): Rect;
    getMainContentViewport(): Rect;
    u1(a: SeriesView): Rect;
    u4(a: Rect): Rect;
    u3(a: SeriesView): Rect;
    getEffectiveViewport(): Rect;
    qf(): void;
    protected get_d1(): boolean;
    get d1(): boolean;
    protected get_d5(): boolean;
    get d5(): boolean;
    private qg;
    qh(a: string): void;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    gw(a: Rect, b: Rect, c: SeriesView): boolean;
    n7(a: boolean, b: SeriesView): void;
    protected ds(): boolean;
    dt(a: SeriesView): boolean;
    py(a: Rect, b: Rect): void;
    protected rk(a: Rect, b: Rect): void;
    protected rj(a: Rect, b: Rect): void;
    at: ContentInfo;
    private dm;
    get gj(): boolean;
    set gj(a: boolean);
    protected ox(a: Series): void;
    protected pi(): void;
    protected hc: Stack$1<string>;
    qb(a: string): void;
    pc(): void;
    ph(): void;
    protected get_e1(): boolean;
    get e1(): boolean;
    protected get_isUsableInLegend(): boolean;
    get isUsableInLegend(): boolean;
    protected pp(): void;
    pj(): void;
    protected pz(): void;
    p0(): void;
    protected gb: boolean;
    protected gc: boolean;
    protected fu(): boolean;
    protected p1(a: boolean): void;
    private dn;
    protected get gl(): boolean;
    protected set gl(a: boolean);
    private dp;
    protected get go(): boolean;
    protected set go(a: boolean);
    protected get gm(): boolean;
    protected get gp(): boolean;
    protected v(): void;
    protected w(a: Visibility, b: Visibility): void;
    protected po(): void;
    protected pb(): void;
    protected p5(a: any, b: string, c: any, d: any): void;
    private ua;
    private ub;
    private uc;
    protected q9(): void;
    rh(a: Point): void;
    or(a: any): void;
    ou(): void;
    ot(): void;
    oq(a: any): void;
    op(a: any): void;
    oo(a: any): void;
    ol(): void;
    protected get_ez(): boolean;
    protected get ez(): boolean;
    du: boolean;
    protected of(a: Series): void;
    get ct(): SyncLink;
    set ct(a: SyncLink);
    private cs;
    get c1(): SeriesViewer;
    set c1(a: SeriesViewer);
    private c0;
    get cz(): XamDataChart;
    set cz(a: XamDataChart);
    readonly hf: (sender: any, e: NotifyCollectionChangedEventArgs) => void;
    readonly a9: (sender: any, e: PropertyUpdatedEventArgs) => void;
    readonly de: (sender: any, e: RectChangedEventArgs) => void;
    get itemsSource(): IEnumerable;
    set itemsSource(a: IEnumerable);
    static readonly sn: DependencyProperty;
    highlightedItemsSource: IEnumerable;
    dd: IFastItemsSource;
    jb: (sender: any, e: FastItemsSourceEventArgs) => void;
    protected oc(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    get legend(): IChartLegend;
    set legend(a: IChartLegend);
    static readonly st: DependencyProperty;
    get rn(): Control;
    set rn(a: Control);
    private rl;
    kb(): any;
    protected rm(): Control;
    get ax(): IChartLegend;
    set ax(a: IChartLegend);
    private aw;
    legendItemVisibility: Visibility;
    get legendItemBadgeTemplate(): DataTemplate;
    set legendItemBadgeTemplate(a: DataTemplate);
    static readonly sq: DependencyProperty;
    rp: DataTemplate;
    private rr;
    tz: Brush;
    ty: Brush;
    cr: StandardLegendItems;
    cq: StandardLegendItems;
    legendItemBadgeShape: LegendItemBadgeShape;
    a5: LegendItemBadgeMode;
    get legendItemTemplate(): DataTemplate;
    set legendItemTemplate(a: DataTemplate);
    static readonly sr: DependencyProperty;
    get rq(): DataTemplate;
    set rq(a: DataTemplate);
    static readonly r8: DependencyProperty;
    get index(): number;
    set index(a: number);
    static readonly si: DependencyProperty;
    ri(): void;
    oj(a: string): void;
    protected e2(a: string, b: string, c: Brush, d: Brush): boolean;
    protected ra(): void;
    c3: (time: number) => number;
    c4: (time: number) => number;
    c5: (time: number) => number;
    dy: boolean;
    jt: number;
    i6: number;
    dr(): boolean;
    q0(): void;
    private dl;
    private hj;
    get hu(): number;
    set hu(a: number);
    protected i0(): number;
    iz: number;
    private hn;
    protected get hz(): number;
    protected set hz(a: number);
    ja: number;
    private hk;
    protected get hw(): number;
    protected set hw(a: number);
    i7: number;
    private hl;
    protected get hx(): number;
    protected set hx(a: number);
    i8: number;
    private hm;
    protected get hy(): number;
    protected set hy(a: number);
    i9: number;
    title: any;
    ll: string;
    t2: Brush;
    tw: Brush;
    t3: Brush;
    t5: Brush;
    uh: Brush;
    t7: Brush;
    t1: Brush;
    t6: Brush;
    tx: Brush;
    t4: Brush;
    safeActualBrush: Brush;
    ud: Brush;
    t0: Brush;
    un: PenLineJoin;
    bm: SeriesHighlightedValuesDisplayMode;
    f0: boolean;
    ix: number;
    i5: number;
    hv: number;
    h1: number;
    ul: PenLineCap;
    uk: DoubleCollection;
    toolTip: any;
    private bn;
    get bo(): SeriesHighlightingMode;
    set bo(a: SeriesHighlightingMode);
    private cd;
    get cf(): SeriesSelectionMode;
    set cf(a: SeriesSelectionMode);
    private cc;
    get ce(): SeriesSelectionMode;
    set ce(a: SeriesSelectionMode);
    protected get_fy(): boolean;
    get fy(): boolean;
    os(): void;
    protected bp(): SeriesHighlightingMode;
    protected ch(): SeriesSelectionMode;
    protected cg(): SeriesSelectionMode;
    protected fk(a: SeriesHighlightingMode): boolean;
    private hh;
    get hr(): number;
    set hr(a: number);
    iu: number;
    private hi;
    get hs(): number;
    set hs(a: number);
    iv: number;
    d8: boolean;
    el: boolean;
    ey: boolean;
    f5: boolean;
    f3: boolean;
    f2: boolean;
    ep: boolean;
    protected get_eq(): boolean;
    get eq(): boolean;
    i2: number;
    uj: Color;
    gu: boolean;
    i3: number;
    i4: number;
    h0: number;
    hq: number;
    q6(): void;
    iw: number;
    ht: number;
    q8(): void;
    q7(): void;
    protected i1(): number;
    private dj;
    get eo(): boolean;
    set eo(a: boolean);
    f9: boolean;
    private cm;
    get cn(): SeriesVisibleRangeMode;
    set cn(a: SeriesVisibleRangeMode);
    co(): SeriesVisibleRangeMode;
    cp: SeriesVisibleRangeMode;
    private b6;
    get b7(): SeriesOutlineMode;
    set b7(a: SeriesOutlineMode);
    b9(): SeriesOutlineMode;
    b8: SeriesOutlineMode;
    av(a: any): DataContext;
    ju: number;
    jv: number;
    cv: TransitionInSpeedType;
    cy: TransitionOutSpeedType;
    protected cu(): TransitionInSpeedType;
    protected cx(): TransitionOutSpeedType;
    j0: any;
    qk(): void;
    protected dx: boolean;
    qq(): void;
    p3(): void;
    p2(): void;
    p4(): void;
    qi(): void;
    n4(): void;
    o6(): void;
    private static _g8;
    static g8(a: (arg1: number) => number, b: number, c: number): IEnumerable$1<number>;
    static g7(a: (arg1: number) => number, b: number): IEnumerable$1<number>;
    um: PenLineCap;
    private bh;
    bi(): SeriesComponentsForView;
    qv(a: Canvas): void;
    iq(): number;
    ir(): number;
    is(): number;
    private dq;
    protected get_gq(): boolean;
    protected set_gq(a: boolean): void;
    protected get gq(): boolean;
    protected set gq(a: boolean);
    get f1(): boolean;
    fs: boolean;
    n5(): void;
    c6(a: any, b: Point, c: boolean): HighlightingInfo;
    c7(a: any, b: Point, c: boolean): HighlightingInfo;
    pq(a: Point, b: any, c: any, d: boolean): void;
    qz(a: Point): void;
    private n0;
    private n6;
    nz(a: IChartLegend, b: IChartLegend): void;
    private n1;
    qe(a: IFastItemsSourceProvider): void;
    qd(a: IFastItemsSourceProvider): void;
    protected ay(): IChartLegend;
    protected f7(): boolean;
    protected f8(): boolean;
    fz(a: boolean): boolean;
    protected od(a: Axis): void;
    protected qc(a: Axis): void;
    bj(): SeriesComponentsFromView;
    rc(a: Canvas): void;
    qy(a: Point, b: (arg1: any) => void): void;
    protected get_gs(): boolean;
    get gs(): boolean;
    p6(a: RenderingContext, b: RenderingContext): void;
    p8(a: Rect): void;
    o2(a: NotifyCollectionChangedEventArgs): void;
    pf(a: number, b: any, c: any): void;
    pa(): void;
    pd(a: number, b: any): void;
    pe(a: number, b: any): void;
    q5(): void;
    kd: any;
    jd: (arg1: any) => any;
    gf(a: Point, b: boolean): boolean;
    protected _coercionMethods: any;
    protected get_coercionMethods(): any;
    protected set_coercionMethods(a: any): void;
    get coercionMethods(): any;
    set coercionMethods(a: any);
    private di;
    protected get_expectFunctions(): boolean;
    protected set_expectFunctions(a: boolean): void;
    get expectFunctions(): boolean;
    set expectFunctions(a: boolean);
    au(a: Point, b: boolean): DataContext;
    private br;
    get bu(): SeriesHitTestMode;
    set bu(a: SeriesHitTestMode);
    protected bt(): SeriesHitTestMode;
    private bq;
    get bs(): SeriesHitTestMode;
    set bs(a: SeriesHitTestMode);
    protected da(a: string): IFastItemColumn$1<number>;
    protected db(a: string): IFastItemColumn$1<number>;
    protected dc(a: string): IFastItemColumn$1<any>;
    protected get u9(): Rect;
    protected get_e7(): boolean;
    get e7(): boolean;
    protected get_e6(): boolean;
    get e6(): boolean;
    qx(a: boolean): void;
    qw(a: Brush, b: Brush): void;
    dh: (arg1: SeriesViewer) => void;
    protected oa(a: any, b: any): void;
    j1(): any;
    protected ow(a: any): void;
    private uo;
    o8(a: Point): void;
    protected pn(a: Point): void;
    o9(): void;
    pg(): void;
    ao(a: Axis): Axis;
    ag(): Axis[];
    id(): number;
    static ie(a: IFastItemColumn$1<number>, b: ISortingAxis): number;
    static ig(a: IList$1<number>, b: ISortingAxis): number;
    pl(): void;
    private ho;
    get h2(): number;
    set h2(a: number);
    private hp;
    get iy(): number;
    set iy(a: number);
    protected rg(): void;
    j4(a: any): any;
    get kv(): string;
    get kh(): string;
    get kk(): string;
    get kt(): string;
    get k3(): string;
    get k2(): string;
    get kx(): string;
    protected rb(): void;
    an(): ActualLegendItemBadgeShape;
    protected a6(a: LegendItemBadgeShape): LegendItemBadgeShape;
    private a7;
    private g3;
    private g9;
    protected bb(): Series;
    protected bc(): Series;
    bw: SeriesLayer;
    get b2(): SeriesLayerCollection;
    private bz;
    get b1(): SeriesLayerCollection;
    private by;
    get actualLayers(): SeriesLayerCollection;
    private bx;
    private g6;
    protected get d0(): boolean;
    be: Series;
    private g4;
    q2(a: string): void;
    q4(a: string): void;
    fp(a: string): boolean;
    private g0;
    q1(a: string): void;
    q3(a: string, b: boolean): void;
    f6(a: string): boolean;
    fn(): boolean;
    j7(): any;
    bd(a: number, b: SeriesLayer): Series;
    protected o5(a: Series): void;
    private n2;
    private oe;
    protected qp(a: Series): void;
    ft(a: DependencyProperty): boolean;
    ga(a: DependencyProperty): boolean;
    private n9;
    private jy;
    oh(a: SeriesLayer): void;
    getDataLegendBadge(): DataTemplate;
    private a0;
    getDataLegendBadgeContext(): any;
    getDataLegendBadgeShapeAndMarker(): string;
    lf(): string;
    lg(a: Series, b: DataTemplate): string;
    getDataLegendSeriesTitle(): string;
    ic(a: any, b: string): number;
    getDataLegendResolvedWorldPositionX(a: number): number;
    getDataLegendResolvedWorldPositionY(a: number): number;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    lh(): string;
    getDataLegendAxisLabelFromCursorPosition(a: number, b: number): any;
    private o7;
    private hg;
    ui(a: Brush): Brush;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare abstract class MarkerSeries extends Series {
    static $t: Type;
    vl: MarkerSeriesView;
    constructor();
    protected hb(): List$1<SeriesLayerPropertyOverlay>;
    vb(a: SeriesPlotAreaMarginHorizontalMode, b: SeriesPlotAreaMarginVerticalMode): Thickness;
    px(a: SeriesView): void;
    protected get_hasMarkers(): boolean;
    t8(): Brush;
    t9(): Brush;
    rs(): DataTemplate;
    lf(): string;
    vp: MarkerType;
    private vm;
    get vn(): MarkerType;
    set vn(a: MarkerType);
    private vo;
    os(): void;
    private vh;
    get vi(): MarkerOutlineMode;
    set vi(a: MarkerOutlineMode);
    vk(): MarkerOutlineMode;
    re(a: MarkerOutlineMode): void;
    vj: MarkerOutlineMode;
    private vd;
    get ve(): MarkerFillMode;
    set ve(a: MarkerFillMode);
    vg(): MarkerFillMode;
    rd(a: MarkerFillMode): void;
    rf(a: number): void;
    vf: MarkerFillMode;
    wc: DataTemplate;
    vu: number;
    h3(): number;
    wa: DataTemplate;
    wb: DataTemplate;
    private static v9;
    static get wd(): DataTemplate;
    get ws(): Brush;
    set ws(a: Brush);
    static readonly wh: DependencyProperty;
    wq: Brush;
    wt: Brush;
    wr: Brush;
    wu: Style;
    vt: boolean;
    vr(): boolean;
    protected po(): void;
    protected p5(a: any, b: string, c: any, d: any): void;
    static vz(a: MarkerType): string;
    static vq(a: Series, b: MarkerType): MarkerType;
    protected ra(): void;
    protected ow(a: any): void;
    protected vs(a: Point, b: boolean): boolean;
    au(a: Point, b: boolean): DataContext;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class SyncLink extends FrameworkElement implements INotifyPropertyChanged, IFastItemsSourceProvider {
    static $t: Type;
    constructor();
    ak: string;
    protected aq(a: any, b: string, c: any, d: any): void;
    releaseFastItemsSource(a: IEnumerable): IFastItemsSource;
    static aj: (arg1: IEnumerable) => IFastItemsSource;
    private static af;
    getFastItemsSource(a: IEnumerable): IFastItemsSource;
    ag(a: IEnumerable): IFastItemsSource;
    private ah;
    av: Rect;
    private aw;
    private ax;
    private ab;
    private ac;
    get ai(): IList$1<SeriesViewer>;
    private ad;
    al(a: SeriesViewer): void;
    as(a: SeriesViewer): void;
    private ao;
    private am;
    an(a: SeriesViewer, b: Point): void;
    ap(a: SeriesViewer, b: Rect): void;
    at(a: SeriesViewer, b: Rect): void;
    au(a: SeriesViewer, b: Rect, c: boolean): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    protected ar(a: string, b: any, c: any): void;
}
/**
 * @hidden
 */
export declare class SyncLinkManager extends Base {
    static $t: Type;
    private static b;
    static instance(): SyncLinkManager;
    private d;
    get e(): number;
    constructor();
    getLink(a: string): SyncLink;
    releaseLink(a: SyncLink): void;
}
/**
 * @hidden
 */
export declare class SyncManager extends Base {
    static $t: Type;
    static e(a: SeriesViewer): void;
    static c(a: SeriesViewer): void;
    static b(a: SeriesViewer, b: string, c: string): void;
    static d(a: DependencyObject, b: SyncSettings): void;
    static a(a: DependencyObject): SyncSettings;
}
/**
 * @hidden
 */
export declare class ChartCollection extends ObservableCollection$1<SeriesViewer> {
    static $t: Type;
    constructor();
    collectionResetting: (sender: any, e: EventArgs) => void;
    protected p(): void;
}
/**
 * @hidden
 */
export declare class SeriesCollection extends ObservableCollection$1<Series> {
    static $t: Type;
    constructor();
    collectionResetting: (sender: any, e: EventArgs) => void;
    protected p(): void;
}
/**
 * @hidden
 */
export declare class PlotAreaMouseEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: SeriesViewer, b: Point, c: Point);
    private _chartPosition;
    get chartPosition(): Point;
    set chartPosition(a: Point);
    private _plotAreaPosition;
    get plotAreaPosition(): Point;
    set plotAreaPosition(a: Point);
    private _isDuringManipulation;
    get isDuringManipulation(): boolean;
    set isDuringManipulation(a: boolean);
    private _viewer;
    get viewer(): SeriesViewer;
    set viewer(a: SeriesViewer);
}
/**
 * @hidden
 */
export declare class PlotAreaMouseButtonEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: SeriesViewer, b: Point, c: Point);
    private _chartPosition;
    get chartPosition(): Point;
    set chartPosition(a: Point);
    private _plotAreaPosition;
    get plotAreaPosition(): Point;
    set plotAreaPosition(a: Point);
    private _manipulationOccurred;
    get manipulationOccurred(): boolean;
    set manipulationOccurred(a: boolean);
    private _viewer;
    get viewer(): SeriesViewer;
    set viewer(a: SeriesViewer);
}
/**
 * @hidden
 */
export declare class ChartCursorEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: SeriesViewer, b: Series, c: any);
    toString(): string;
    private _item;
    get item(): any;
    set item(a: any);
    private _series;
    get series(): Series;
    set series(a: Series);
    private _seriesViewer;
    get seriesViewer(): SeriesViewer;
    set seriesViewer(a: SeriesViewer);
    get chart(): XamDataChart;
}
/**
 * @hidden
 */
export declare class SeriesViewerSelectedSeriesItemsChangedEventArgs extends EventArgs {
    static $t: Type;
    private _oldItems;
    get oldItems(): ChartSelectedItemCollection;
    set oldItems(a: ChartSelectedItemCollection);
    private _newItems;
    get newItems(): ChartSelectedItemCollection;
    set newItems(a: ChartSelectedItemCollection);
    private _currentItems;
    get currentItems(): ChartSelectedItemCollection;
    set currentItems(a: ChartSelectedItemCollection);
    constructor(a: ChartSelectedItemCollection, b: ChartSelectedItemCollection, c: ChartSelectedItemCollection);
}
/**
 * @hidden
 */
export declare class DataChartMouseButtonEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: SeriesViewer, b: Series, c: any, d: MouseButtonEventArgs);
    toString(): string;
    protected g: MouseButtonEventArgs;
    get handled(): boolean;
    set handled(a: boolean);
    getPosition(a: UIElement): Point;
    get originalSource(): any;
    private _item;
    get item(): any;
    set item(a: any);
    private _series;
    get series(): Series;
    set series(a: Series);
    private _chart;
    get chart(): SeriesViewer;
    set chart(a: SeriesViewer);
}
/**
 * @hidden
 */
export declare class ChartMouseEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: SeriesViewer, b: Series, c: any, d: MouseEventArgs);
    toString(): string;
    private f;
    getPosition(a: UIElement): Point;
    get originalSource(): any;
    private _item;
    get item(): any;
    set item(a: any);
    private _series;
    get series(): Series;
    set series(a: Series);
    private _chart;
    get chart(): SeriesViewer;
    set chart(a: SeriesViewer);
}
/**
 * @hidden
 */
export declare class AxisComponentsForView extends Base {
    static $t: Type;
    a: AxisLabelPanelBase;
}
/**
 * @hidden
 */
export declare class AxisLabelPanelBaseView extends Base {
    static $t: Type;
    protected a: AxisLabelPanelBase;
    aw: Path;
    constructor(a: AxisLabelPanelBase);
    aa(a: FrameworkElement, b: Rect, c: number, d: number, e: number, f: number): void;
    z(a: Rectangle, b: TextBlock, c: LabelPosition, d: Rect, e: number, f: number, g: number, h: number): void;
    ae(a: FrameworkElement): void;
    ah(a: any): void;
    ai(a: any, b: Size): void;
    aj(a: FrameworkElement, b: number): void;
    ar(a: Rectangle, b: TextBlock, c: LabelPosition, d: Rect, e: number, f: number, g: number, h: number, i: number): void;
    ad(a: Rectangle): void;
    x(a: TextBlock, b: number, c: number, d: number): string;
    af(): void;
    g(): IEnumerable$1<any>;
    l(a: any): number;
    n(a: any): number;
    an(): void;
    m(a: any): number;
    w(a: any): number;
    ax(a: any): Size;
    ac(): void;
    ak(): void;
    protected e: RenderingContext;
    f(): RenderingContext;
    al(a: RenderingContext): void;
    y(): void;
    protected am(): void;
    private av;
    protected ap(a: TextBlock): void;
    ao(): void;
    d(): FontInfo;
    at(): Brush;
    private c;
    ag(): void;
    private h;
    private as;
    private i;
    j(): number;
    k(): number;
    protected aq(): void;
    ab(a: Size): void;
    protected ay(): Thickness;
    v(): number;
    s(): number;
    t(): number;
    u(): number;
    au(): GeometryCollection;
    b(): PathRenderingInfo;
    r(): number;
    p(): number;
    q(): number;
    o(): number;
}
/**
 * @hidden
 */
export declare class AxisView extends Base implements ISchedulableRender {
    static $t: Type;
    protected a: Axis;
    constructor(a: Axis);
    al(): void;
    an(a: any): void;
    bd: Path;
    be: Path;
    bg: Path;
    bf: Path;
    a3(): TextBlock;
    aw(a: TextBlock): void;
    ay(a: TextBlock): void;
    ax(a: TextBlock): void;
    bi(): Rectangle;
    t(a: Rectangle): void;
    v(a: Rectangle): void;
    u(a: Rectangle): void;
    ao(): void;
    p(): boolean;
    get index(): number;
    ai(): void;
    ag(): void;
    ac(): void;
    a1(a: Visibility): void;
    at(): void;
    ab(a: AxisLabelSettings): void;
    private b;
    c(): AxisComponentsFromView;
    ae(a: GeometryCollection): void;
    a4(): GeometryCollection;
    e(): PathRenderingInfo;
    a7(): GeometryCollection;
    a5(): GeometryCollection;
    f(): PathRenderingInfo;
    a6(): GeometryCollection;
    g(): PathRenderingInfo;
    protected get d(): AxisLabelPanelBase;
    az(a: Axis, b: Rect, c: Rect): void;
    ad(): void;
    av(a: number): void;
    a0(a: List$1<any>, b: List$1<LabelPosition>): void;
    au(a: number): void;
    aa(): void;
    private h;
    s(a: number): string;
    z(): void;
    aq(): void;
    l(): boolean;
    protected o(): boolean;
    m(): boolean;
    protected r(dataItem_: any): string;
    q(dataItem_: any): any;
    protected k: RenderingContext;
    j: RenderingContext;
    ak(a: RenderingContext, b: RenderingContext): void;
    private _isDirty;
    get isDirty(): boolean;
    set isDirty(a: boolean);
    protected aj(): void;
    undirty(a: boolean): void;
    private bh;
    protected ar(a: boolean): void;
    postRender(): void;
    private bb;
    protected as(): void;
    ah(): void;
    af(a: SeriesViewer): void;
    y(a: SeriesViewer): void;
    i(): FontInfo;
    n(): boolean;
    ap(): void;
    x(): void;
    a2(): void;
    w(a: AxisLabelSettings, b: string): void;
    preRender(): void;
    isValid(): boolean;
    a8(a: TextBlock): Point;
    a9(): Point;
    bc(): Rect;
    ba(a: TextBlock): Point;
    bj(a: TextBlock): Thickness;
    am(): void;
}
/**
 * @hidden
 */
export declare class CategoryAxisBaseView extends AxisView {
    static $t: Type;
    protected bk: CategoryAxisBase;
    constructor(a: CategoryAxisBase);
    s(a: number): string;
    bl(a: List$1<any>): number;
}
/**
 * @hidden
 */
export declare class HorizontalAxisLabelPanelBaseView extends AxisLabelPanelBaseView {
    static $t: Type;
    protected az: HorizontalAxisLabelPanelBase;
    constructor(a: HorizontalAxisLabelPanelBase);
    a1(): void;
    a0(): boolean;
    a2(a: List$1<Rect>): void;
}
/**
 * @hidden
 */
export declare class NumericAxisBaseView extends AxisView {
    static $t: Type;
    protected bk: NumericAxisBase;
    constructor(a: NumericAxisBase);
    bl(): void;
    protected o(): boolean;
    m(): boolean;
    protected r(dataItem_: any): string;
    s(a: number): string;
}
/**
 * @hidden
 */
export declare class VerticalAxisLabelPanelView extends AxisLabelPanelBaseView {
    static $t: Type;
    protected az: VerticalAxisLabelPanel;
    constructor(a: VerticalAxisLabelPanel);
    a0(): void;
    d(): FontInfo;
    protected ay(): Thickness;
    at(): Brush;
    a1(a: List$1<Rect>, b: number): void;
}
/**
 * @hidden
 */
export declare class XamDataChartView extends SeriesViewerView {
    static $t: Type;
    constructor(a: XamDataChart);
    protected fn: XamDataChart;
    fr(a: any): void;
    protected ds(): void;
    d4(): void;
    fw: Brush;
    fs: Brush;
    ft: Brush;
    fv: Brush;
    fu: Brush;
    fp: number;
    fq: number;
    protected d1(): void;
    fo: FontInfo;
}
/**
 * @hidden
 */
export declare class SeriesView extends Base implements ISchedulableRender, IProvidesViewport {
    static $t: Type;
    protected e: Series;
    s: boolean;
    constructor(a: Series);
    getDefaultTooltipTemplate(): string;
    ar(): void;
    j(): IExecutionContext;
    private h;
    protected get i(): IExecutionContext;
    ah(a: number, b: Series): void;
    am(a: Series): void;
    d: DataContext;
    au(): void;
    getEffectiveViewport(): Rect;
    a1(): void;
    ak(): void;
    getMainContentViewport(): Rect;
    get w(): DomRenderer;
    private _isDirty;
    get isDirty(): boolean;
    set isDirty(a: boolean);
    protected get_index(): number;
    get index(): number;
    protected as(): void;
    undirty(a: boolean): void;
    private bz;
    aw(): void;
    private bp;
    bt(): Brush;
    bq(a: Brush): Brush;
    v: number;
    private u;
    protected a6(a: boolean): void;
    private bu;
    protected bf(a: any, b: number, c: boolean): void;
    protected bi(a: any, b: number, c: boolean): void;
    protected aa(a: number, b: boolean): any;
    protected ab(a: number): any;
    protected ac(a: number): any;
    protected bg(a: any, b: number): void;
    protected bj(a: any, b: number): void;
    protected bh(a: any, b: number): void;
    protected bk(a: any, b: number): void;
    protected bc(a: boolean): void;
    protected bd(): void;
    protected be(): void;
    private bo;
    protected bs(a: number): Brush;
    protected br(): Brush;
    protected a8(a: RenderingContext, b: boolean): void;
    protected a7(a: RenderingContext, b: boolean): void;
    az(): void;
    ao(): void;
    ap(): void;
    private f;
    g(): SeriesComponentsFromView;
    bb(a: Canvas): void;
    t(): boolean;
    ay(): void;
    ax(): void;
    a9(): void;
    ai(): void;
    ba(): void;
    aj(): void;
    c(a: any): DataContext;
    protected k: RenderingContext;
    protected l: RenderingContext;
    at(a: RenderingContext, b: RenderingContext): void;
    private bv;
    get bx(): Rect;
    set bx(a: Rect);
    bw: Rect;
    protected get_by(): Rect;
    get by(): Rect;
    private m;
    get q(): boolean;
    set q(a: boolean);
    al(a: SeriesViewer): void;
    a: CanvasRenderScheduler;
    ag(a: SeriesViewer): void;
    postRender(): void;
    protected a2(): void;
    b(a: number): DataContext;
    a4(a: RenderSurface): void;
    an(a: any): void;
    bl(): void;
    av(): void;
    a0(): void;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    o(): boolean;
    protected r: boolean;
    bm(): void;
    a5(): void;
    protected af(): void;
    aq(): void;
    preRender(): void;
    isValid(): boolean;
    n: boolean;
    p: boolean;
    a3(a: RenderSurface): void;
    ad: string;
    bn(type_: StandardLegendItems): DataTemplate;
}
/**
 * @hidden
 */
export declare abstract class MarkerSeriesView extends SeriesView {
    static $t: Type;
    protected b4: MarkerSeries;
    private b8;
    private ca;
    private b9;
    constructor(a: MarkerSeries);
    au(): void;
    cj(): void;
    ct(): Size;
    cq(a: boolean): void;
    protected b7: List$1<Marker>;
    b3(): Marker;
    abstract ci(a: (arg1: Marker) => void): void;
    cm(a: Marker): void;
    co(a: Marker): void;
    cn(a: Marker): void;
    b5(): boolean;
    ch(): void;
    cb(): void;
    cs(a: Marker): Rect;
    ce(a: string): void;
    cf(): void;
    cc(): void;
    cg(): void;
    cd(): void;
    cp(): void;
    b6: boolean;
    protected bj(a: any, b: number): void;
    private b0;
    protected bk(a: any, b: number): void;
    b(a: number): DataContext;
    private cr;
    protected a7(a: RenderingContext, b: boolean): void;
    ck(a: HashPool$2<any, Marker>): void;
    cl(a: Pool$1<Marker>): void;
    b1(a: Point): Marker;
    private b2;
}
/**
 * @hidden
 */
export declare class ChartAxisRangeChangedEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: SeriesViewer, b: Axis, c: number, d: number, e: number, f: number);
    private _chart;
    get chart(): SeriesViewer;
    set chart(a: SeriesViewer);
    private _axis;
    get axis(): Axis;
    set axis(a: Axis);
    private _oldMinimumValue;
    get oldMinimumValue(): number;
    set oldMinimumValue(a: number);
    private _minimumValue;
    get minimumValue(): number;
    set minimumValue(a: number);
    private _oldMaximumValue;
    get oldMaximumValue(): number;
    set oldMaximumValue(a: number);
    private _maximumValue;
    get maximumValue(): number;
    set maximumValue(a: number);
}
