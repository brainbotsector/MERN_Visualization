import { XYChart } from "./XYChart";
import { IEnumerable, Type } from "igniteui-react-core";
import { DomainType } from "./DomainType";
import { CategoryChartType } from "./CategoryChartType";
import { CategorySeriesMarkerCollisionAvoidance } from "./CategorySeriesMarkerCollisionAvoidance";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { AutoMarginsAndAngleUpdateMode } from "./AutoMarginsAndAngleUpdateMode";
import { AxisRangeBufferMode } from "./AxisRangeBufferMode";
import { BrushCollection } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { Series } from "./Series";
import { XamDataChart } from "./XamDataChart";
import { Axis } from "./Axis";
import { MarkerType } from "./MarkerType";
import { DataSeries } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode } from "./ComputedPlotAreaMarginMode";
/**
 * @hidden
 */
export declare class CategoryChart extends XYChart {
    static $t: Type;
    protected ti(): void;
    protected tk(a: Series, b: number): void;
    protected t8(a: string, b: any, c: any): void;
    private ag7;
    get aha(): number;
    set aha(a: number);
    private ag8;
    get ahb(): number;
    set ahb(a: number);
    private afa;
    get afc(): (time: number) => number;
    set afc(a: (time: number) => number);
    private afb;
    get afd(): (time: number) => number;
    set afd(a: (time: number) => number);
    ahh(): string;
    protected td(a: XamDataChart): void;
    protected tj(a: Series, b: number): void;
    private ae0;
    private ae4;
    protected sw(): void;
    protected acy(a: Axis): void;
    protected acw(a: Axis): void;
    protected get_b5(): DomainType;
    get b5(): DomainType;
    private aeu;
    get aev(): CategoryChartType;
    set aev(a: CategoryChartType);
    private aew;
    get aex(): CategorySeriesMarkerCollisionAvoidance;
    set aex(a: CategorySeriesMarkerCollisionAvoidance);
    private afg;
    get afr(): boolean;
    set afr(a: boolean);
    private afh;
    get afs(): boolean;
    set afs(a: boolean);
    private aey;
    get aez(): CategoryTransitionInMode;
    set aez(a: CategoryTransitionInMode);
    private ae8;
    get ae9(): TransitionInSpeedType;
    set ae9(a: TransitionInSpeedType);
    private af4;
    get agr(): number;
    set agr(a: number);
    private af7;
    get agu(): number;
    set agu(a: number);
    private af3;
    get agq(): number;
    set agq(a: number);
    private af6;
    get agt(): number;
    set agt(a: number);
    private af5;
    get ags(): number;
    set ags(a: number);
    private af8;
    get agv(): number;
    set agv(a: number);
    private age;
    get ag3(): number;
    set ag3(a: number);
    private aeq;
    get aer(): AutoMarginsAndAngleUpdateMode;
    set aer(a: AutoMarginsAndAngleUpdateMode);
    private afi;
    ain(): void;
    get aft(): boolean;
    set aft(a: boolean);
    protected static readonly ahq: string;
    private afj;
    get afu(): boolean;
    set afu(a: boolean);
    private af1;
    get agi(): number;
    set agi(a: number);
    private af2;
    get agj(): number;
    set agj(a: number);
    private afn;
    get afy(): boolean;
    set afy(a: boolean);
    private static readonly ahx;
    private afk;
    get afv(): boolean;
    set afv(a: boolean);
    private static readonly aib;
    private afm;
    get afx(): boolean;
    set afx(a: boolean);
    private aes;
    get aet(): AxisRangeBufferMode;
    set aet(a: AxisRangeBufferMode);
    private afo;
    get afz(): boolean;
    set afz(a: boolean);
    private ag9;
    get ahc(): number;
    set ahc(a: number);
    private agg;
    get ag5(): number;
    set ag5(a: number);
    private agf;
    get ag4(): number;
    set ag4(a: number);
    private agh;
    get ag6(): number;
    set ag6(a: number);
    get agp(): number;
    get ago(): number;
    agl(): number;
    agn(): number;
    agk(): number;
    agm(): number;
    get ag2(): number;
    get ag1(): number;
    private aem;
    get aeo(): BrushCollection;
    set aeo(a: BrushCollection);
    private aen;
    get aep(): BrushCollection;
    set aep(a: BrushCollection);
    private afl;
    get afw(): boolean;
    set afw(a: boolean);
    private af9;
    get agw(): number;
    set agw(a: number);
    private aga;
    get agx(): number;
    set agx(a: number);
    private agb;
    get agy(): number;
    set agy(a: number);
    private agc;
    get agz(): number;
    set agz(a: number);
    private agd;
    get ag0(): number;
    set ag0(a: number);
    private afe;
    get afp(): boolean;
    set afp(a: boolean);
    private aff;
    get afq(): boolean;
    set afq(a: boolean);
    constructor();
    protected get_hi(): List$1<DataSeriesType>;
    protected get hi(): List$1<DataSeriesType>;
    private af0;
    protected hm(): IEnumerable;
    protected cv(a: Series): MarkerType;
    protected cx(a: Series): MarkerType;
    protected get_g5(): boolean;
    private ail;
    private aim;
    protected ut(): void;
    private _xAxis;
    private get xAxis();
    private set xAxis(value);
    private _yAxis;
    private get yAxis();
    private set yAxis(value);
    private ae3;
    private ae2;
    protected bg(a: DataSeries): DataSeriesType;
    protected c6(a: DataSeries, b: DataSeriesType): Series;
    protected ur(a: DataSeries): void;
    protected uu(): void;
    protected get_hh(): List$1<IDataSeriesAdapterRule>;
    protected get hh(): List$1<IDataSeriesAdapterRule>;
    protected ss(a: Series, b: number): void;
    private aij;
    private aik;
    protected xp(): Axis;
    protected xq(): Axis;
    private ae6;
    private ae7;
    protected he(a: string, b: boolean): List$1<Series>;
    protected bb(): ComputedPlotAreaMarginMode;
    protected uz(a: Series, b: Series, c: DataSeries): void;
    protected gr(): boolean;
    protected get_gx(): boolean;
    protected t5(a: string, b: any, c: any): void;
}
