import { Base, Type, Point } from "igniteui-react-core";
import { IBucketizer } from "./IBucketizer";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { MarkerSeries } from "./MarkerSeries";
import { IHasCategoryModePreference } from "./IHasCategoryModePreference";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { RadialFrame } from "./RadialFrame";
import { HighlightingInfo } from "igniteui-react-core";
import { RadialSeriesRenderManager } from "./RadialSeriesRenderManager";
import { CategoryMode } from "./CategoryMode";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { AssigningRadialStyleEventArgs } from "./AssigningRadialStyleEventArgs";
import { AssigningRadialMarkerStyleEventArgs } from "./AssigningRadialMarkerStyleEventArgs";
import { RadialAxes } from "./RadialAxes";
import { Pool$1 } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class RadialBucketCalculator extends Base implements IBucketizer {
    static $t: Type;
    protected a: RadialBaseView;
    constructor(a: RadialBaseView);
    c: number;
    d: number;
    b: number;
    getBucket(a: number): number[];
    getBucketWithoutUnknowns(a: number): number[];
    getErrorBucket(a: number, b: IFastItemColumn$1<number>): number;
    getBucketInfo(a: number, b: number, c: number, d: number): {
        p0: number;
        p1: number;
        p2: number;
        p3: number;
    };
    e(a: number): void;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare abstract class RadialBase extends MarkerSeries implements IHasCategoryModePreference {
    static $t: Type;
    px(a: SeriesView): void;
    w2: RadialBaseView;
    constructor();
    private x0;
    get categoryAxis(): CategoryAxisBase;
    as(): CategoryAxisBase;
    wv(a: number, b: number): any[];
    protected w7: RadialSeriesRenderManager;
    dz(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    private xv;
    w8: SeriesRenderer$2<RadialFrame, RadialBaseView>;
    protected get_fe(): boolean;
    xk: boolean;
    xj: boolean;
    protected xf: boolean;
    protected xe: boolean;
    protected get_ez(): boolean;
    private xc;
    private xd;
    protected w9(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected xp(): boolean;
    protected hb(): List$1<SeriesLayerPropertyOverlay>;
    protected xa(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected xb(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    c6(a: any, b: Point, c: boolean): HighlightingInfo;
    c7(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningRadialStyle: (sender: any, args: AssigningRadialStyleEventArgs) => void;
    assigningRadialMarkerStyle: (sender: any, args: AssigningRadialMarkerStyleEventArgs) => void;
    protected xo(): boolean;
    protected xn(): boolean;
    protected x3(a: AssigningRadialStyleEventArgs): void;
    protected x2(a: AssigningRadialMarkerStyleEventArgs): void;
    xr(a: SeriesView): number;
    xs(a: SeriesView): number;
    wy: CategoryAngleAxis;
    w0: NumericRadiusAxis;
    ag(): Axis[];
    xi: boolean;
    protected rk(a: Rect, b: Rect): void;
    protected rj(a: Rect, b: Rect): void;
    abstract preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    protected p5(a: any, b: string, c: any, d: any): void;
    protected xm(): boolean;
    protected xl(): boolean;
    xh(a: any): boolean;
    xg(a: any): boolean;
    j2(a: Point): any;
    xq(a: Point): number;
    h6(a: Point): number;
    jj(a: Point): number;
    fx(a: any): boolean;
    w5: RadialFrame;
    w6: RadialFrame;
    w3: RadialFrame;
    w4(): RadialFrame;
    abstract getOffsetValue(): number;
    abstract getCategoryWidth(): number;
    abstract x1(a: RadialFrame, b: RadialBaseView): void;
    abstract x4(a: RadialFrame, b: RadialBaseView): void;
    w1: RadialAxes;
    o6(): void;
    gw(a: Rect, b: Rect, c: SeriesView): boolean;
    qn(a: boolean): void;
    xt(): number;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class RadialBaseView extends MarkerSeriesView {
    static $t: Type;
    cv: RadialBucketCalculator;
    cu: RadialBase;
    constructor(a: RadialBase);
    cw: Pool$1<Marker>;
    ci(a: (arg1: Marker) => void): void;
    cx: number;
    cy: Point;
}
