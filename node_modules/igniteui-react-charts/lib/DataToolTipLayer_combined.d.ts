import { AnnotationLayer } from "./AnnotationLayer";
import { Axis } from "./Axis";
import { DataToolTipLayerGroupingMode } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { Point, Type } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { DataTooltipGroupedPositionX } from "igniteui-react-core";
import { DataTooltipGroupedPositionY } from "igniteui-react-core";
import { DataAbbreviationMode } from "igniteui-react-core";
import { DataLegendValueMode } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { DataLegendHeaderDateMode } from "igniteui-react-core";
import { DataLegendHeaderTimeMode } from "igniteui-react-core";
import { DataLegendSummaryType } from "igniteui-react-core";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { DataLegendUnitsMode } from "igniteui-react-core";
import { DataLegendLabelMode } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { IDataLegend } from "igniteui-react-core";
import { Frame } from "./Frame";
import { Pool$1 } from "igniteui-react-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { PointerTooltip } from "./PointerTooltip";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class DataToolTipLayer extends AnnotationLayer {
    static $t: Type;
    protected bb(): Series;
    protected get_ec(): boolean;
    constructor();
    protected ci(): SeriesView;
    px(a: SeriesView): void;
    protected y5: DataToolTipLayerView;
    protected get_en(): boolean;
    yl: Axis;
    z2: boolean;
    y3: DataToolTipLayerGroupingMode;
    private y1;
    get y2(): DataToolTipLayerGroupingMode;
    set y2(a: DataToolTipLayerGroupingMode);
    private y4;
    protected p5(a: any, b: string, c: any, d: any): void;
    private z6;
    private z7;
    private adt;
    adx(a: string, b: any): void;
    private adu;
    protected w3(a: Axis, b: boolean): void;
    protected w4(a: Series, b: boolean): void;
    protected w6(a: Frame, b: SeriesView): void;
    private z8;
    private yk;
    private y6;
    o3(): void;
    o4(): void;
    get af2(): Rect;
    get af1(): Rect;
    get af0(): Rect;
    get af4(): Rect;
    private af3;
    private zy;
    private zv;
    private zw;
    private zx;
    private aa1;
    private aaz;
    private aa0;
    private aba;
    private aa8;
    private aa9;
    private aa4;
    private aa2;
    private aa3;
    private aak;
    private aam;
    private aal;
    private aat;
    private aav;
    private aau;
    private aaq;
    private aas;
    private aar;
    private aag;
    private aan;
    private aao;
    private aap;
    private aah;
    private aai;
    private aaj;
    private aay;
    private aax;
    private aaw;
    private aa7;
    private aa6;
    private aa5;
    private aaf;
    private afz;
    private aae;
    private aad;
    private yf;
    private ye;
    private zz;
    private z0;
    private ads;
    private zs;
    private adw;
    private adv;
    private abd;
    protected w9(a: Frame, b: SeriesView): void;
    protected fu(): boolean;
    aab: number;
    aac: number;
    z9: number;
    aaa: number;
    yv: DataTooltipGroupedPositionX;
    private yt;
    get yu(): DataTooltipGroupedPositionX;
    set yu(a: DataTooltipGroupedPositionX);
    private yw;
    yz: DataTooltipGroupedPositionY;
    private yx;
    get yy(): DataTooltipGroupedPositionY;
    set yy(a: DataTooltipGroupedPositionY);
    private y0;
    z1: boolean;
    yi: string[];
    yd: string[];
    yh: string[];
    yc: string[];
    ym: DataAbbreviationMode;
    abb: number;
    abc: number;
    ys: DataLegendValueMode;
    adb: string;
    z3: boolean;
    adh: string;
    yj: any[];
    agf: Thickness;
    z4: boolean;
    adq: string;
    z5: boolean;
    agg: Thickness;
    afy: Brush;
    private zh;
    get zr(): FontInfo;
    set zr(a: FontInfo);
    abz: string;
    yg: any[];
    abv: string;
    yn: DataLegendHeaderDateMode;
    yo: DataLegendHeaderTimeMode;
    ab4: string;
    afq: Brush;
    af9: Thickness;
    af8: Thickness;
    zu: boolean;
    private y9;
    get zj(): FontInfo;
    set zj(a: FontInfo);
    zt: boolean;
    afp: Brush;
    af7: Thickness;
    af6: Thickness;
    private y8;
    get zi(): FontInfo;
    set zi(a: FontInfo);
    aft: Brush;
    private zc;
    get zm(): FontInfo;
    set zm(a: FontInfo);
    yq: DataLegendSummaryType;
    acn: string;
    agc: Thickness;
    agb: Thickness;
    afv: Brush;
    private ze;
    get zo(): FontInfo;
    set zo(a: FontInfo);
    aci: string;
    afs: Brush;
    private zb;
    get zl(): FontInfo;
    set zl(a: FontInfo);
    act: string;
    afu: Brush;
    private zd;
    get zn(): FontInfo;
    set zn(a: FontInfo);
    af5: Thickness;
    y7: LegendItemBadgeShape;
    yr: DataLegendUnitsMode;
    ac4: string;
    afx: Brush;
    age: Thickness;
    private zg;
    get zq(): FontInfo;
    set zq(a: FontInfo);
    agd: Thickness;
    afw: Brush;
    private zf;
    get zp(): FontInfo;
    set zp(a: FontInfo);
    yp: DataLegendLabelMode;
    afr: Brush;
    aga: Thickness;
    private za;
    get zk(): FontInfo;
    set zk(a: FontInfo);
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class DataToolTipLayerView extends AnnotationLayerView {
    static $t: Type;
    constructor(a: DataToolTipLayer);
    b9: Pool$1<any>;
    ak(): void;
    protected cc: List$1<PointerTooltip>;
    private cd;
    private cf;
    private ch;
    private cg;
    protected b7: DataToolTipLayer;
    private ca;
    au(): void;
    private _htmlTest;
    protected get htmlTest(): any;
    protected set htmlTest(a: any);
    cb(a: any, b: Series): boolean;
    cq(a: any): Size;
    cp(): Rect;
    co(): Rect;
    cn(): Rect;
    cm(a: Point): Point;
    ck(a: any, b: number, c: number, d: number, e: number): void;
    cr(): Size;
    ci(a: any): void;
    cl(): void;
    protected a8(a: RenderingContext, b: boolean): void;
    an(a: any): void;
    b8(a: any): IDataLegend;
    cj(a: boolean): void;
}
