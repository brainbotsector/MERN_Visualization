import { ScatterTriangulationSeries } from "./ScatterTriangulationSeries";
import { ColorScale } from "./ColorScale";
import { Type, Point } from "igniteui-react-core";
import { Series } from "./Series";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { SeriesView } from "./SeriesView";
import { WriteableBitmap } from "igniteui-react-core";
import { TriangleRasterizer } from "./TriangleRasterizer";
import { ScalerParams } from "./ScalerParams";
import { ObservableColorCollection } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class ScatterAreaSeries extends ScatterTriangulationSeries {
    static $t: Type;
    protected bb(): Series;
    protected get_ef(): boolean;
    constructor();
    private w8;
    get xa(): ColorScale;
    set xa(a: ColorScale);
    private xr;
    j5(a: any, b: string): any;
    li(a: string): string;
    xm: string;
    private xd;
    private get xe();
    private set xe(value);
    protected get_gq(): boolean;
    protected set_gq(a: boolean): void;
    protected p5(a: any, b: string, c: any, d: any): void;
    qn(a: boolean): void;
    ql(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected xs(a: SeriesView): void;
    private xp;
    j2(a: Point): any;
    protected w6: number[];
    protected w7: number[];
    xc(a: SeriesView, b: ScalerParams, c: ScalerParams): TriangleRasterizer;
    protected xf(): ObservableColorCollection;
    w9: ColorScale;
    xt(): void;
    protected ra(): void;
    n7(a: boolean, b: SeriesView): void;
    protected ci(): SeriesView;
    px(a: SeriesView): void;
    xb: ScatterAreaSeriesView;
    xq(a: any): void;
    xi: string;
    xk: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterAreaSeriesView extends SeriesView {
    static $t: Type;
    private b4;
    private b0;
    get b3(): number[];
    set b3(a: number[]);
    constructor(a: ScatterAreaSeries);
    cd(a: number, b: number): void;
    b9(a: any): void;
    private b8;
    private b7;
    private b6;
    b1(): number[];
    b2(a: boolean): number[];
    private cc;
    b5(a: Rect, b: ColorScale, c: IFastItemColumn$1<number>): TriangleRasterizer;
    cb(a: TriangleRasterizer): void;
    ca(): void;
    protected a8(a: RenderingContext, b: boolean): void;
    ce(a: WriteableBitmap): void;
    an(a: any): void;
    getDefaultTooltipTemplate(): string;
}
