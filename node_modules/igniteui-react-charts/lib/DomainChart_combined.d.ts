import { Base, INotifyPropertyChanged, Type, IEnumerable, PropertyChangedEventArgs } from "igniteui-react-core";
import { IDataLegendTarget } from "igniteui-react-core";
import { IToolbarTarget } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { IDomainChartWidget } from "./IDomainChartWidget";
import { XamDataChart } from "./XamDataChart";
import { DataSeriesAdapterImplementation } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { MarkerType } from "./MarkerType";
import { IAnnotationLayerProxy } from "./IAnnotationLayerProxy";
import { Color } from "igniteui-react-core";
import { ToolCommandStateChanged } from "igniteui-react-core";
import { ToolCommand } from "igniteui-react-core";
import { DataToolTipLayerGroupingMode } from "igniteui-react-core";
import { DataTooltipGroupedPositionX } from "igniteui-react-core";
import { DataTooltipGroupedPositionY } from "igniteui-react-core";
import { DataAbbreviationMode } from "igniteui-react-core";
import { DataLegendValueMode } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { DataLegendHeaderDateMode } from "igniteui-react-core";
import { DataLegendHeaderTimeMode } from "igniteui-react-core";
import { DataLegendSummaryType } from "igniteui-react-core";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { DataLegendUnitsMode } from "igniteui-react-core";
import { DataLegendLabelMode } from "igniteui-react-core";
import { DomainType } from "./DomainType";
import { ChartSortDescriptionCollection } from "./ChartSortDescriptionCollection";
import { FilterExpressionCollection } from "igniteui-react-core";
import { ChartSummaryDescriptionCollection } from "./ChartSummaryDescriptionCollection";
import { SeriesSelectionMode } from "./SeriesSelectionMode";
import { SeriesSelectionBehavior } from "./SeriesSelectionBehavior";
import { ChartSelectedItemCollection } from "./ChartSelectedItemCollection";
import { FilterStringErrorsParsingEventArgs } from "./FilterStringErrorsParsingEventArgs";
import { BrushCollection } from "igniteui-react-core";
import { IChartLegend } from "igniteui-react-core";
import { SeriesHighlightedValuesDisplayMode } from "./SeriesHighlightedValuesDisplayMode";
import { Rect } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { UnknownValuePlotting } from "igniteui-react-core";
import { SeriesOutlineMode } from "./SeriesOutlineMode";
import { MarkerOutlineMode } from "./MarkerOutlineMode";
import { MarkerFillMode } from "./MarkerFillMode";
import { MarkerTypeCollection } from "./MarkerTypeCollection";
import { MarkerAutomaticBehavior } from "./MarkerAutomaticBehavior";
import { TrendLineType } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode } from "./ComputedPlotAreaMarginMode";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { SeriesHighlightingMode } from "./SeriesHighlightingMode";
import { SeriesHighlightingBehavior } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode } from "./LegendHighlightingMode";
import { LegendItemBadgeMode } from "igniteui-react-core";
import { ToolTipType } from "./ToolTipType";
import { CrosshairsDisplayMode } from "./CrosshairsDisplayMode";
import { CalloutPlacementPositionsCollection } from "./CalloutPlacementPositionsCollection";
import { ValueModeCollection } from "./ValueModeCollection";
import { SeriesViewerScrollbarMode } from "./SeriesViewerScrollbarMode";
import { SeriesViewerHorizontalScrollbarPosition } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition } from "./SeriesViewerVerticalScrollbarPosition";
import { Series } from "./Series";
import { IDataLegend } from "igniteui-react-core";
import { ICommandStateChangedListener } from "igniteui-react-core";
import { DataSeries } from "igniteui-react-core";
import { Axis } from "./Axis";
import { ObservableColorCollection } from "igniteui-react-core";
import { DataSeriesMarker } from "igniteui-react-core";
import { IDataLegendSeries } from "igniteui-react-core";
import { ToolActionInfo } from "igniteui-react-core";
import { ToolCommandExecutionState } from "igniteui-react-core";
import { ICommandAvailabilityListener } from "igniteui-react-core";
import { ChartSeriesEventArgs } from "./ChartSeriesEventArgs";
import { DomainChartSeriesPointerEventArgs } from "./DomainChartSeriesPointerEventArgs";
import { CalloutStyleUpdatingEventArgs } from "./CalloutStyleUpdatingEventArgs";
import { CalloutRenderStyleUpdatingEventArgs } from "./CalloutRenderStyleUpdatingEventArgs";
import { SeriesViewerSelectedSeriesItemsChangedEventArgs } from "./SeriesViewerSelectedSeriesItemsChangedEventArgs";
/**
 * @hidden
 */
export declare abstract class DomainChart extends Base implements INotifyPropertyChanged, IDataLegendTarget, IToolbarTarget {
    static $t: Type;
    protected kz: any;
    provideContainer(a: any): void;
    destroy(): void;
    private th;
    protected ti(): void;
    protected te(a: XamDataChart): void;
    protected tb(): void;
    protected tk(a: Series, b: number): void;
    protected t8(a: string, b: any, c: any): void;
    private kx;
    get tooltipTemplate(): any;
    set tooltipTemplate(a: any);
    private hc;
    get tooltipTemplates(): List$1<any>;
    set tooltipTemplates(a: List$1<any>);
    private h4;
    get jh(): number;
    set jh(a: number);
    private kw;
    private get toolTip();
    private set toolTip(value);
    private ii;
    get ju(): number;
    set ju(a: number);
    private ij;
    get jv(): number;
    set jv(a: number);
    private ik;
    get jw(): number;
    set jw(a: number);
    private ih;
    get jt(): number;
    set jt(a: number);
    private ic;
    get jp(): number;
    set jp(a: number);
    private ie;
    get jr(): number;
    set jr(a: number);
    private id;
    get jq(): number;
    set jq(a: number);
    private ib;
    get jo(): number;
    set jo(a: number);
    private vu;
    get wp(): Brush;
    set wp(a: Brush);
    private vv;
    get wq(): Brush;
    set wq(a: Brush);
    private h1;
    protected get_je(): number;
    protected set_je(a: number): void;
    get je(): number;
    set je(a: number);
    private il;
    get jx(): number;
    set jx(a: number);
    private ia;
    get jn(): number;
    set jn(a: number);
    private ho;
    get i1(): number;
    set i1(a: number);
    private kk;
    get ks(): number;
    set ks(a: number);
    private em;
    get en(): (time: number) => number;
    set en(a: (time: number) => number);
    protected tf(a: XamDataChart): void;
    protected tl(a: Series, b: number): void;
    protected tc(): void;
    private tm;
    kb: (arg1: HTMLElement) => any[];
    private u0;
    private k1;
    private g1;
    private kc;
    protected t9(a: string, b: any, c: any): void;
    private ce;
    get cf(): IDomainChartWidget;
    set cf(a: IDomainChartWidget);
    private lv;
    get rf(): string;
    set rf(a: string);
    private lx;
    get rq(): string;
    set rq(a: string);
    private ea;
    get dataChart(): XamDataChart;
    set dataChart(a: XamDataChart);
    bh: DataSeriesAdapterImplementation;
    private fr;
    private fq;
    get isDetached(): boolean;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    constructor();
    protected tg(): void;
    protected abstract get hi(): List$1<DataSeriesType>;
    protected abstract get hh(): List$1<IDataSeriesAdapterRule>;
    protected hg: List$1<MarkerType>;
    protected gw(a: DataSeriesType): boolean;
    notifyResized(): void;
    tv(): void;
    s1(): void;
    s9(): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected ug(a: string): void;
    protected abstract s2(a: (arg1: Axis) => void, b: boolean): void;
    protected s3(a: (arg1: Series) => void): void;
    protected s4(a: (arg1: Series, arg2: number) => void): void;
    protected s7(a: (arg1: Series) => void): void;
    protected s8(a: (arg1: Series, arg2: number) => void): void;
    protected s5(a: (arg1: Series) => void): void;
    protected s6(a: (arg1: Series, arg2: number) => void): void;
    uq(): void;
    protected tx(a: (arg1: XamDataChart) => void): void;
    protected ty(a: (arg1: XamDataChart) => void, b: boolean): void;
    protected tz(a: (arg1: XamDataChart) => void, b: boolean, c: string): void;
    protected gy(a: DataSeries): boolean;
    protected gp(): boolean;
    private static readonly k9;
    private kj;
    protected pe(a: DataSeries): string;
    private static k8;
    protected pf(a: DataSeries, b: DataSeriesType): string;
    protected abstract bg(a: DataSeries): DataSeriesType;
    protected abstract c6(a: DataSeries, b: DataSeriesType): Series;
    pd(): string;
    private gu;
    protected ut(): void;
    protected c8(seriesType_: DataSeriesType): Series;
    private c0;
    private c2;
    private c4;
    private c5;
    private c1;
    private c3;
    private c7;
    private b7;
    protected get b8(): IAnnotationLayerProxy;
    private get gl();
    private gn;
    private u1;
    protected gq(): boolean;
    protected gr(): boolean;
    protected get_go(): boolean;
    protected get go(): boolean;
    protected he(a: string, b: boolean): List$1<Series>;
    protected sv(a: Series, b: boolean): void;
    protected uz(a: Series, b: Series, c: DataSeries): void;
    protected abstract us(a: DataSeries): void;
    protected abstract ur(a: DataSeries): void;
    protected uv(): void;
    private uw;
    protected ux(a: Series): void;
    protected abstract uu(): void;
    private t0;
    protected sz(): void;
    protected wh(a: number): Brush;
    protected wk(a: number): Brush;
    protected wi(a: number): Brush;
    protected wj(a: number): Brush;
    protected wt(a: number): Color;
    protected e8(a: Color): ObservableColorCollection;
    protected ac(a: Color): BrushCollection;
    protected hb: List$1<Color>;
    protected get hd(): List$1<Color>;
    protected get_g5(): boolean;
    protected get g5(): boolean;
    k0(): any;
    to(a: string, b: string): void;
    tp(a: string, b: string, c: Series): void;
    cu(a: DataSeriesMarker): MarkerType;
    private cb;
    private ft;
    attachDataLegend(a: IDataLegend): void;
    protected su(a: IDataLegend): void;
    detachDataLegend(a: IDataLegend): void;
    protected sy(a: IDataLegend): void;
    getDataLegendSeries(): IDataLegendSeries[];
    protected p(): IDataLegendSeries[];
    u2(a: number): void;
    u3(a: number): void;
    uy(): void;
    protected get_gx(): boolean;
    get gx(): boolean;
    private cc;
    get cd(): IDomainChartToolbarProvider;
    private t6;
    getDesiredToolbarActions(): ToolActionInfo[];
    onToolCommandExecuting(a: ToolCommand): ToolCommandExecutionState;
    private _commandCompleted;
    get commandCompleted(): (arg1: ToolCommand) => void;
    set commandCompleted(a: (arg1: ToolCommand) => void);
    private _invalidateActions;
    get invalidateActions(): () => void;
    set invalidateActions(a: () => void);
    private tn;
    addCommandAvailabilityListener(a: ICommandAvailabilityListener): void;
    removeCommandAvailabilityListener(a: ICommandAvailabilityListener): void;
    private g9;
    addCommandStateChangedListener(a: ICommandStateChangedListener): void;
    removeCommandStateChangedListener(a: ICommandStateChangedListener): void;
    tu(source_: any, a: number, b: any, c: any): void;
    tq(source_: any): void;
    tr(source_: any, a: number, b: any): void;
    ts(source_: any, a: number, b: any): void;
    private by;
    get bz(): DataToolTipLayerGroupingMode;
    set bz(a: DataToolTipLayerGroupingMode);
    private hs;
    get i5(): number;
    set i5(a: number);
    private ht;
    get i6(): number;
    set i6(a: number);
    private hq;
    get i3(): number;
    set i3(a: number);
    private hr;
    get i4(): number;
    set i4(a: number);
    private bu;
    get bv(): DataTooltipGroupedPositionX;
    set bv(a: DataTooltipGroupedPositionX);
    private bw;
    get bx(): DataTooltipGroupedPositionY;
    set bx(a: DataTooltipGroupedPositionY);
    private fk;
    get gg(): boolean;
    set gg(a: boolean);
    static readonly nx: string;
    get m(): string[];
    set m(a: string[]);
    private e;
    get j(): string[];
    set j(a: string[]);
    private b;
    get l(): string[];
    set l(a: string[]);
    private d;
    get i(): string[];
    set i(a: string[]);
    private a;
    get bf(): DataAbbreviationMode;
    set bf(a: DataAbbreviationMode);
    private be;
    get ko(): number;
    set ko(a: number);
    private kf;
    get kp(): number;
    set kp(a: number);
    private kg;
    get bt(): DataLegendValueMode;
    set bt(a: DataLegendValueMode);
    private bs;
    get op(): string;
    set op(a: string);
    private ll;
    get gh(): boolean;
    set gh(a: boolean);
    private fl;
    get ov(): string;
    set ov(a: string);
    private lm;
    get n(): any[];
    set n(a: any[]);
    private f;
    get xj(): Thickness;
    set xj(a: Thickness);
    private w7;
    get gi(): boolean;
    set gi(a: boolean);
    private fm;
    get o4(): string;
    set o4(a: string);
    private ln;
    get gj(): boolean;
    set gj(a: boolean);
    private fn;
    get xk(): Thickness;
    set xk(a: Thickness);
    private w8;
    get wd(): Brush;
    set wd(a: Brush);
    private vn;
    private ex;
    get e7(): FontInfo;
    set e7(a: FontInfo);
    get nf(): string;
    set nf(a: string);
    private lf;
    get k(): any[];
    set k(a: any[]);
    private c;
    get nb(): string;
    set nb(a: string);
    private le;
    get bj(): DataLegendHeaderDateMode;
    set bj(a: DataLegendHeaderDateMode);
    private bi;
    get bl(): DataLegendHeaderTimeMode;
    set bl(a: DataLegendHeaderTimeMode);
    private bk;
    get nk(): string;
    set nk(a: string);
    private lg;
    get v5(): Brush;
    set v5(a: Brush);
    private vf;
    get xd(): Thickness;
    set xd(a: Thickness);
    private w1;
    get xc(): Thickness;
    set xc(a: Thickness);
    private w0;
    get gf(): boolean;
    set gf(a: boolean);
    private fj;
    private ep;
    get ez(): FontInfo;
    set ez(a: FontInfo);
    get v4(): Brush;
    set v4(a: Brush);
    private ve;
    get xb(): Thickness;
    set xb(a: Thickness);
    private wz;
    get xa(): Thickness;
    set xa(a: Thickness);
    private wy;
    get ge(): boolean;
    set ge(a: boolean);
    private fi;
    private eo;
    get ey(): FontInfo;
    set ey(a: FontInfo);
    get v8(): Brush;
    set v8(a: Brush);
    private vi;
    private es;
    get e2(): FontInfo;
    set e2(a: FontInfo);
    get bp(): DataLegendSummaryType;
    set bp(a: DataLegendSummaryType);
    private bo;
    get n3(): string;
    set n3(a: string);
    private li;
    get xg(): Thickness;
    set xg(a: Thickness);
    private w4;
    get xf(): Thickness;
    set xf(a: Thickness);
    private w3;
    get wa(): Brush;
    set wa(a: Brush);
    private vk;
    private eu;
    get e4(): FontInfo;
    set e4(a: FontInfo);
    get ny(): string;
    set ny(a: string);
    private lh;
    get v7(): Brush;
    set v7(a: Brush);
    private vh;
    private er;
    get e1(): FontInfo;
    set e1(a: FontInfo);
    get n9(): string;
    set n9(a: string);
    private lj;
    get v9(): Brush;
    set v9(a: Brush);
    private vj;
    private et;
    get e3(): FontInfo;
    set e3(a: FontInfo);
    get w9(): Thickness;
    set w9(a: Thickness);
    private wx;
    get cm(): LegendItemBadgeShape;
    set cm(a: LegendItemBadgeShape);
    private ck;
    get br(): DataLegendUnitsMode;
    set br(a: DataLegendUnitsMode);
    private bq;
    get oj(): string;
    set oj(a: string);
    private lk;
    get wc(): Brush;
    set wc(a: Brush);
    private vm;
    get xi(): Thickness;
    set xi(a: Thickness);
    private w6;
    private ew;
    get e6(): FontInfo;
    set e6(a: FontInfo);
    get xh(): Thickness;
    set xh(a: Thickness);
    private w5;
    get wb(): Brush;
    set wb(a: Brush);
    private vl;
    private ev;
    get e5(): FontInfo;
    set e5(a: FontInfo);
    get bn(): DataLegendLabelMode;
    set bn(a: DataLegendLabelMode);
    private bm;
    get v6(): Brush;
    set v6(a: Brush);
    private vg;
    get xe(): Thickness;
    set xe(a: Thickness);
    private w2;
    private eq;
    get e0(): FontInfo;
    set e0(a: FontInfo);
    seriesAdded: (sender: any, args: ChartSeriesEventArgs) => void;
    ui(a: Series): void;
    seriesRemoved: (sender: any, args: ChartSeriesEventArgs) => void;
    uo(a: Series): void;
    seriesPointerEnter: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    uk(a: Series, b: any): void;
    seriesPointerLeave: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    ul(a: Series, b: any): void;
    seriesPointerMove: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    um(a: Series, b: any): void;
    seriesPointerDown: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    uj(a: Series, b: any): void;
    seriesPointerUp: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    un(a: Series, b: any): void;
    calloutStyleUpdating: (sender: any, args: CalloutStyleUpdatingEventArgs) => void;
    ue(a: any, b: CalloutStyleUpdatingEventArgs): void;
    calloutRenderStyleUpdating: (sender: any, args: CalloutRenderStyleUpdatingEventArgs) => void;
    ud(a: any, b: CalloutRenderStyleUpdatingEventArgs): void;
    selectedSeriesItemsChanged: (sender: any, e: SeriesViewerSelectedSeriesItemsChangedEventArgs) => void;
    uh(a: any, b: SeriesViewerSelectedSeriesItemsChangedEventArgs): void;
    focusedSeriesItemsChanged: (sender: any, e: SeriesViewerSelectedSeriesItemsChangedEventArgs) => void;
    uf(a: any, b: SeriesViewerSelectedSeriesItemsChangedEventArgs): void;
    private hf;
    ub(a: () => void): void;
    private e9;
    uc(a: () => void, b: boolean): {
        p1?: boolean;
    };
    protected get_gz(): boolean;
    protected get gz(): boolean;
    protected td(a: XamDataChart): void;
    protected ag(a: BrushCollection): BrushCollection;
    protected wn(a: Brush): Brush;
    protected tj(a: Series, b: number): void;
    protected abstract sw(): void;
    protected get f8(): boolean;
    private fc;
    protected s0(): void;
    protected ta(): void;
    protected up(a: XamDataChart): void;
    protected st(a: Series, b: number): void;
    protected abstract ss(a: Series, b: number): void;
    protected cw(a: Series, b: number): MarkerType;
    protected cv(a: Series): MarkerType;
    protected cx(a: Series): MarkerType;
    protected k4(): any;
    protected get_gs(): boolean;
    protected get gs(): boolean;
    protected hm(): IEnumerable;
    protected t5(a: string, b: any, c: any): void;
    private g8;
    private ha;
    private t1;
    private sr;
    private sq;
    private t3;
    private t7;
    abstract get b5(): DomainType;
    private ay;
    private au;
    private at;
    private ec;
    private ed;
    private a6;
    private ek;
    private el;
    private f2;
    private f0;
    private f3;
    private f1;
    private fz;
    private ax;
    private aw;
    private av;
    private ef;
    private ee;
    private a5;
    get a4(): ChartSortDescriptionCollection;
    get a0(): ChartSortDescriptionCollection;
    get az(): ChartSortDescriptionCollection;
    get eg(): FilterExpressionCollection;
    get eh(): FilterExpressionCollection;
    get a8(): ChartSummaryDescriptionCollection;
    private dp;
    get dr(): SeriesSelectionMode;
    set dr(a: SeriesSelectionMode);
    private dn;
    get dq(): SeriesSelectionMode;
    set dq(a: SeriesSelectionMode);
    private vt;
    get wo(): Brush;
    set wo(a: Brush);
    private vq;
    get wg(): Brush;
    set wg(a: Brush);
    private dl;
    get dm(): SeriesSelectionBehavior;
    set dm(a: SeriesSelectionBehavior);
    private ao;
    get selectedSeriesItems(): ChartSelectedItemCollection;
    private an;
    get focusedSeriesItems(): ChartSelectedItemCollection;
    get a3(): ChartSortDescriptionCollection;
    get a2(): ChartSortDescriptionCollection;
    get a1(): ChartSortDescriptionCollection;
    get ei(): FilterExpressionCollection;
    get ej(): FilterExpressionCollection;
    get a7(): ChartSummaryDescriptionCollection;
    private ls;
    get p4(): string;
    set p4(a: string);
    private lo;
    get pg(): string;
    set pg(a: string);
    private lq;
    get p0(): string;
    set p0(a: string);
    private lp;
    get py(): string;
    set py(a: string);
    private lr;
    get p2(): string;
    set p2(a: string);
    filterStringErrorsParsing: (sender: any, args: FilterStringErrorsParsingEventArgs) => void;
    private lt;
    get p6(): string;
    set p6(a: string);
    private kv;
    get itemsSource(): any;
    set itemsSource(a: any);
    private ku;
    get actualItemsSource(): any;
    set actualItemsSource(a: any);
    private h;
    get q(): string[];
    set q(a: string[]);
    private g;
    get o(): string[];
    set o(a: string[]);
    private t;
    get ab(): BrushCollection;
    set ab(a: BrushCollection);
    private w;
    get af(): BrushCollection;
    set af(a: BrushCollection);
    private r;
    get z(): BrushCollection;
    set z(a: BrushCollection);
    private s;
    get aa(): BrushCollection;
    set aa(a: BrushCollection);
    private b9;
    get legend(): IChartLegend;
    set legend(a: IChartLegend);
    private fs;
    protected get_gt(): boolean;
    protected set_gt(a: boolean): void;
    get gt(): boolean;
    set gt(a: boolean);
    private fv;
    protected get_g0(): boolean;
    protected set_g0(a: boolean): void;
    get g0(): boolean;
    set g0(a: boolean);
    private fx;
    protected get_g3(): boolean;
    protected set_g3(a: boolean): void;
    get g3(): boolean;
    set g3(a: boolean);
    private f4;
    protected get_g6(): boolean;
    protected set_g6(a: boolean): void;
    get g6(): boolean;
    set g6(a: boolean);
    private c9;
    protected get_da(): SeriesHighlightedValuesDisplayMode;
    protected set_da(a: SeriesHighlightedValuesDisplayMode): void;
    get da(): SeriesHighlightedValuesDisplayMode;
    set da(a: SeriesHighlightedValuesDisplayMode);
    private fu;
    protected get_gv(): boolean;
    protected set_gv(a: boolean): void;
    get gv(): boolean;
    set gv(a: boolean);
    private wu;
    get ww(): Rect;
    set ww(a: Rect);
    get wv(): Rect;
    private lw;
    get rj(): string;
    set rj(a: string);
    private lu;
    get q8(): string;
    set q8(a: string);
    private u5;
    get u7(): HorizontalAlignment;
    set u7(a: HorizontalAlignment);
    private u4;
    get u6(): HorizontalAlignment;
    set u6(a: HorizontalAlignment);
    private d6;
    get d7(): UnknownValuePlotting;
    set d7(a: UnknownValuePlotting);
    private h9;
    protected get_jm(): number;
    protected set_jm(a: number): void;
    get jm(): number;
    set jm(a: number);
    private ig;
    get js(): number;
    set js(a: number);
    private df;
    get dg(): SeriesOutlineMode;
    set dg(a: SeriesOutlineMode);
    private cs;
    get ct(): MarkerOutlineMode;
    set ct(a: MarkerOutlineMode);
    private cq;
    get cr(): MarkerFillMode;
    set cr(a: MarkerFillMode);
    private h2;
    get jf(): number;
    set jf(a: number);
    private h3;
    get jg(): number;
    set jg(a: number);
    private cy;
    get cz(): MarkerTypeCollection;
    set cz(a: MarkerTypeCollection);
    private co;
    get cp(): MarkerAutomaticBehavior;
    set cp(a: MarkerAutomaticBehavior);
    private u;
    get ad(): BrushCollection;
    set ad(a: BrushCollection);
    private v;
    get ae(): BrushCollection;
    set ae(a: BrushCollection);
    private ki;
    get kr(): number;
    set kr(a: number);
    private hn;
    get i0(): number;
    set i0(a: number);
    private fb;
    get f7(): boolean;
    set f7(a: boolean);
    private x;
    get ah(): BrushCollection;
    set ah(a: BrushCollection);
    private d4;
    get d5(): TrendLineType;
    set d5(a: TrendLineType);
    private im;
    get jy(): number;
    set jy(a: number);
    private fa;
    get f6(): boolean;
    set f6(a: boolean);
    private h6;
    get jj(): number;
    set jj(a: number);
    private h8;
    get jl(): number;
    set jl(a: number);
    private h7;
    get jk(): number;
    set jk(a: number);
    private h5;
    get ji(): number;
    set ji(a: number);
    protected t4(): void;
    private a9;
    get ba(): ComputedPlotAreaMarginMode;
    set ba(a: ComputedPlotAreaMarginMode);
    protected bb(): ComputedPlotAreaMarginMode;
    private dh;
    get di(): SeriesPlotAreaMarginHorizontalMode;
    set di(a: SeriesPlotAreaMarginHorizontalMode);
    private dj;
    get dk(): SeriesPlotAreaMarginVerticalMode;
    set dk(a: SeriesPlotAreaMarginVerticalMode);
    private dd;
    get de(): SeriesHighlightingMode;
    set de(a: SeriesHighlightingMode);
    private db;
    get dc(): SeriesHighlightingBehavior;
    set dc(a: SeriesHighlightingBehavior);
    private cg;
    get ch(): LegendHighlightingMode;
    set ch(a: LegendHighlightingMode);
    private cl;
    get cn(): LegendItemBadgeShape;
    set cn(a: LegendItemBadgeShape);
    private ci;
    get cj(): LegendItemBadgeMode;
    set cj(a: LegendItemBadgeMode);
    private kl;
    get kt(): number;
    set kt(a: number);
    private d2;
    get d3(): ToolTipType;
    set d3(a: ToolTipType);
    private bc;
    get bd(): CrosshairsDisplayMode;
    set bd(a: CrosshairsDisplayMode);
    private fh;
    get gd(): boolean;
    set gd(a: boolean);
    private vd;
    get v3(): Brush;
    set v3(a: Brush);
    private hp;
    get i2(): number;
    set i2(a: number);
    private vc;
    get v2(): Brush;
    set v2(a: Brush);
    private fg;
    get gc(): boolean;
    set gc(a: boolean);
    private u8;
    get vy(): Brush;
    set vy(a: Brush);
    private va;
    get v0(): Brush;
    set v0(a: Brush);
    private u9;
    get vz(): Brush;
    set vz(a: Brush);
    private vb;
    get v1(): Brush;
    set v1(a: Brush);
    private kd;
    get km(): number;
    set km(a: number);
    private ke;
    get kn(): number;
    set kn(a: number);
    private fw;
    get g2(): boolean;
    set g2(a: boolean);
    private fy;
    get g4(): boolean;
    set g4(a: boolean);
    private fo;
    get gk(): boolean;
    set gk(a: boolean);
    private vo;
    get we(): Brush;
    set we(a: Brush);
    private vp;
    get wf(): Brush;
    set wf(a: Brush);
    private kh;
    get kq(): number;
    set kq(a: number);
    private fd;
    get f9(): boolean;
    set f9(a: boolean);
    private ff;
    get gb(): boolean;
    set gb(a: boolean);
    private fe;
    get ga(): boolean;
    set ga(a: boolean);
    private hk;
    get calloutsItemsSource(): IEnumerable;
    set calloutsItemsSource(a: IEnumerable);
    private aj;
    get ak(): CalloutPlacementPositionsCollection;
    set ak(a: CalloutPlacementPositionsCollection);
    private lc;
    get mf(): string;
    set mf(a: string);
    private ld;
    get mh(): string;
    set mh(a: string);
    private lb;
    get mb(): string;
    set mb(a: string);
    private la;
    get l8(): string;
    set l8(a: string);
    private d8;
    get d9(): ValueModeCollection;
    set d9(a: ValueModeCollection);
    private y;
    get ai(): BrushCollection;
    set ai(a: BrushCollection);
    private io;
    get jz(): number;
    set jz(a: number);
    get dw(): SeriesViewerScrollbarMode;
    set dw(a: SeriesViewerScrollbarMode);
    private du;
    get dx(): SeriesViewerScrollbarMode;
    set dx(a: SeriesViewerScrollbarMode);
    private dv;
    get dt(): SeriesViewerHorizontalScrollbarPosition;
    set dt(a: SeriesViewerHorizontalScrollbarPosition);
    private ds;
    get d1(): SeriesViewerVerticalScrollbarPosition;
    set d1(a: SeriesViewerVerticalScrollbarPosition);
    private d0;
    get wl(): Brush;
    set wl(a: Brush);
    private vr;
    get wm(): Brush;
    set wm(a: Brush);
    private vs;
    get jb(): number;
    set jb(a: number);
    private hy;
    get ja(): number;
    set ja(a: number);
    private hx;
    get i7(): number;
    set i7(a: number);
    private hu;
    get i8(): number;
    set i8(a: number);
    private hv;
    get i9(): number;
    set i9(a: number);
    private hw;
    get jd(): number;
    set jd(a: number);
    private h0;
    get jc(): number;
    set jc(a: number);
    private hz;
    get gm(): boolean;
    set gm(a: boolean);
    private fp;
    static readonly pt: string;
    get wr(): Brush;
    set wr(a: Brush);
    private vw;
    get ws(): Brush;
    set ws(a: Brush);
    private vx;
    get j3(): number;
    set j3(a: number);
    private is;
    get j2(): number;
    set j2(a: number);
    private ir;
    get j0(): number;
    set j0(a: number);
    private ip;
    get j6(): number;
    set j6(a: number);
    private iv;
    get j1(): number;
    set j1(a: number);
    private iq;
    get j5(): number;
    set j5(a: number);
    private iu;
    get j4(): number;
    set j4(a: number);
    private it;
    get g7(): boolean;
    set g7(a: boolean);
    private f5;
    static readonly sf: string;
    get j8(): number;
    set j8(a: number);
    private ix;
    get j7(): number;
    set j7(a: number);
    private iw;
    get ka(): number;
    set ka(a: number);
    private iz;
    get j9(): number;
    set j9(a: number);
    private iy;
}
/**
 * @hidden
 */
export interface IDomainChartToolbarProvider {
    container: any;
    commandChanged: (arg1: ToolCommandStateChanged) => void;
    getDesiredToolbarActions(a: DomainChart, b: ToolActionInfo[]): ToolActionInfo[];
    onToolCommandExecuting(a: DomainChart, b: ToolCommand): ToolCommandExecutionState;
    onTargetPropertyChanged(a: DomainChart, b: string, c: any, d: any): void;
}
/**
 * @hidden
 */
export declare let IDomainChartToolbarProvider_$type: Type;
