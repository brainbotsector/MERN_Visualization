import { AnchoredCategorySeries } from "./AnchoredCategorySeries";
import { NumericXAxis } from "./NumericXAxis";
import { CategoryYAxis } from "./CategoryYAxis";
import { IVerticalAnchoredCategorySeriesInteractionManager } from "./IVerticalAnchoredCategorySeriesInteractionManager";
import { Type, Point } from "igniteui-react-core";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { Axis } from "./Axis";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { NumericAxisBase } from "./NumericAxisBase";
import { ScalerParams } from "./ScalerParams";
import { AxisRange } from "./AxisRange";
import { Rect } from "igniteui-react-core";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
/**
 * @hidden
 */
export declare abstract class VerticalAnchoredCategorySeries extends AnchoredCategorySeries {
    static $t: Type;
    xAxis: NumericXAxis;
    yAxis: CategoryYAxis;
    ca(): SeriesPlotAreaMarginHorizontalMode;
    cb(): SeriesPlotAreaMarginVerticalMode;
    n4(): void;
    private aac;
    get aad(): IVerticalAnchoredCategorySeriesInteractionManager;
    protected get_isVertical(): boolean;
    w1(): CategoryAxisBase;
    xh(): NumericAxisBase;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    jo(a: Point, b: boolean): number;
    jq(a: Point, b: boolean): number;
    h4(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    ar(a: Rect): AxisRange;
    protected bt(): SeriesHitTestMode;
    u7(a: Point): Rect;
    private aal;
    gf(a: Point, b: boolean): boolean;
    il(a: Point, b: boolean, c: boolean): number;
    uu(a: Point, b: boolean, c: boolean): Point;
    fetchXAxis(): Axis;
    fetchYAxis(): Axis;
    zp(a: Axis): void;
    zq(a: Axis): void;
    xx(): boolean;
    wv(a: number, b: number): any[];
    h6(a: Point): number;
    x1(a: Point): number;
    jj(a: Point): number;
    j2(a: Point): any;
    protected p5(a: any, b: string, c: any, d: any): void;
    aag(a: any): boolean;
    aaf(a: any): boolean;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
