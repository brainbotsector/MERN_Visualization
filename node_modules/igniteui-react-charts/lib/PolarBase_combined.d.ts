import { MarkerSeries } from "./MarkerSeries";
import { Point, Type } from "igniteui-react-core";
import { PolarAxisInfoCache } from "./PolarAxisInfoCache";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { PolarFrame } from "./PolarFrame";
import { DependencyProperty } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { NumericAngleAxis } from "./NumericAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { ScatterItemSearchMode } from "./ScatterItemSearchMode";
import { HighlightingInfo } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Axis } from "./Axis";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { PolarAxes } from "./PolarAxes";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { OwnedPoint } from "./OwnedPoint";
import { HashPool$2 } from "igniteui-react-core";
import { MarkerManagerBase } from "./MarkerManagerBase";
import { PolarTrendLineManager } from "./PolarTrendLineManager";
import { AssigningPolarStyleEventArgs } from "./AssigningPolarStyleEventArgs";
import { AssigningPolarMarkerStyleEventArgs } from "./AssigningPolarMarkerStyleEventArgs";
import { AssigningSeriesStyleEventArgsBase } from "./AssigningSeriesStyleEventArgsBase";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { RenderSurface } from "./RenderSurface";
import { IDictionary$2 } from "igniteui-react-core";
import { AssigningSeriesShapeStyleEventArgsBase } from "./AssigningSeriesShapeStyleEventArgsBase";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class PolarBase extends MarkerSeries {
    static $t: Type;
    protected ci(): SeriesView;
    px(a: SeriesView): void;
    w6: PolarBaseView;
    private w7;
    n4(): void;
    protected get_fa(): boolean;
    dz(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    constructor();
    private zf;
    private zh;
    private wy;
    w5: PolarAxisInfoCache;
    private aan;
    private aam;
    xj: SeriesRenderer$2<PolarFrame, PolarBaseView>;
    ys: string;
    za: string;
    yx: string;
    yv: string;
    protected fv(): boolean;
    protected x7(): boolean;
    protected hb(): List$1<SeriesLayerPropertyOverlay>;
    private zj;
    private zi;
    protected get xs(): IFastItemColumn$1<number>;
    protected set xs(a: IFastItemColumn$1<number>);
    private xq;
    protected get xt(): IFastItemColumn$1<number>;
    protected set xt(a: IFastItemColumn$1<number>);
    private xr;
    w2: NumericAngleAxis;
    w3: NumericRadiusAxis;
    x8: boolean;
    yi: number;
    xk: TrendLineType;
    aah: Brush;
    get aag(): Brush;
    set aag(a: Brush);
    static readonly zr: DependencyProperty;
    yg: number;
    aaj: PenLineCap;
    aai: DoubleCollection;
    yj: number;
    yk: number;
    xy: boolean;
    xb: PolarFrame;
    xd: PolarFrame;
    w9: PolarFrame;
    xa(): PolarFrame;
    w4: PolarAxes;
    o6(): void;
    protected oc(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected rj(a: Rect, b: Rect): void;
    protected rk(a: Rect, b: Rect): void;
    gw(a: Rect, b: Rect, c: SeriesView): boolean;
    qn(a: boolean): void;
    private aal;
    aq(a: Axis): AxisRange;
    fx(a: any): boolean;
    j2(a: Point): any;
    jj(a: Point): number;
    h6(a: Point): number;
    protected yc(a: Point): number;
    protected yb(a: Point): number;
    private xz;
    private x9;
    private yf;
    protected ye(a: Point): number;
    protected yd(a: Point): number;
    uu(a: Point, b: boolean, c: boolean): Point;
    ag(): Axis[];
    j5(a: any, b: string): any;
    li(a: string): string;
    protected p5(a: any, b: string, c: any, d: any): void;
    private xf;
    get xg(): ScatterItemSearchMode;
    set xg(a: ScatterItemSearchMode);
    protected xh(): ScatterItemSearchMode;
    protected get_x2(): boolean;
    protected get x2(): boolean;
    protected x4(): boolean;
    protected x3(): boolean;
    xi: ScatterItemSearchMode;
    yh: number;
    xx(a: any): boolean;
    xw(a: any): boolean;
    n7(a: boolean, b: SeriesView): void;
    private wz;
    ze(a: PolarFrame, b: number, c: Rect, d: Rect): void;
    zm(a: PolarFrame, b: PolarBaseView): void;
    x1: boolean;
    x0: boolean;
    protected xv: boolean;
    protected xu: boolean;
    protected get_ez(): boolean;
    private xo;
    private xp;
    protected xm(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected xn(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected xl(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    c6(a: any, b: Point, c: boolean): HighlightingInfo;
    c7(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningPolarStyle: (sender: any, args: AssigningPolarStyleEventArgs) => void;
    assigningPolarMarkerStyle: (sender: any, args: AssigningPolarMarkerStyleEventArgs) => void;
    protected x6(): boolean;
    protected x5(): boolean;
    zq(a: PolarFrame, b: PolarBaseView): void;
    ww(a: number, b: number): any[];
    protected wx(a: number, b: number): any[];
    protected xe: PolarSeriesRenderManager;
    zg(a: PolarBaseView, b: PolarFrame): void;
    protected zl(a: number, b: number, c: boolean): void;
    protected zk(a: number, b: number, c: boolean): void;
    protected zo(a: AssigningPolarStyleEventArgs): void;
    protected zn(a: AssigningPolarMarkerStyleEventArgs): void;
    private zd;
    protected ra(): void;
    xc: PolarFrame;
    qo(a: Rect, b: RenderSurface): void;
    private w8;
    ql(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    zp(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    wv(a: HashPool$2<any, Marker>, b: Rect, c: Rect): Point[];
    ya(a: HashPool$2<any, Marker>): List$1<number>;
    aak(a: number): Point;
    protected ow(a: any): void;
    y6: string;
    yo: string;
    y8: string;
    yq: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class PolarSeriesRenderManager extends SeriesRenderManager {
    static $t: Type;
    protected c(): AssigningSeriesStyleEventArgsBase;
    protected a(): AssigningSeriesShapeStyleEventArgsBase;
    aw: AssigningPolarMarkerStyleEventArgs;
    ax: AssigningPolarStyleEventArgs;
    ay(a: PolarBase, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    az(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    a0(a: AssigningSeriesStyleEventArgsBase, b: number, c: number, d: boolean): void;
}
/**
 * @hidden
 */
export declare class PolarBaseView extends MarkerSeriesView {
    static $t: Type;
    protected cx: PolarBase;
    cw: MarkerManagerBase;
    constructor(a: PolarBase);
    cy: PolarTrendLineManager;
    au(): void;
    c2(a: (arg1: Marker) => void): void;
    protected cv(): MarkerManagerBase;
    protected c3(a: IDictionary$2<any, OwnedPoint>): void;
    protected cu(): Point[];
    protected c0(): List$1<number>;
    c1(a: Rect, b: Rect, c: Rect, d: Rect): void;
    c4(): void;
    cz: HashPool$2<any, Marker>;
    ci(a: (arg1: Marker) => void): void;
    protected a7(a: RenderingContext, b: boolean): void;
    protected c5(): Rect;
    getDefaultTooltipTemplate(): string;
}
