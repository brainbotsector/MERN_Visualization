import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { IUnknownValuePlotting } from "igniteui-react-core";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { UnknownValuePlotting } from "igniteui-react-core";
import { Series } from "./Series";
import { SeriesView } from "./SeriesView";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { SeriesVisibleRangeMode } from "./SeriesVisibleRangeMode";
import { Type, Point } from "igniteui-react-core";
import { CategoryMode } from "./CategoryMode";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategoryFrame } from "./CategoryFrame";
import { CategorySeriesView } from "./CategorySeriesView";
import { List$1 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { PointCollection } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { Clipper } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class AreaSeries extends HorizontalAnchoredCategorySeries implements IUnknownValuePlotting {
    static $t: Type;
    protected bb(): Series;
    protected ci(): SeriesView;
    protected xc(): CategoryTransitionInMode;
    co(): SeriesVisibleRangeMode;
    px(a: SeriesView): void;
    aau: AreaSeriesView;
    protected get_eg(): boolean;
    protected get_ef(): boolean;
    constructor();
    aav: CategoryLineRasterizer;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    gf(a: Point, b: boolean): boolean;
    n7(a: boolean, b: SeriesView): void;
    yl(a: CategoryFrame, b: CategorySeriesView): void;
    unknownValuePlotting: UnknownValuePlotting;
    protected p5(a: any, b: string, c: any, d: any): void;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AreaSeriesView extends AnchoredCategorySeriesView {
    static $t: Type;
    protected dd: AreaSeries;
    constructor(a: AreaSeries);
    au(): void;
    get dq(): Path;
    get dr(): Path;
    get ds(): Path;
    get dt(): Path;
    private dl;
    private dn;
    private dm;
    private dp;
    de(): void;
    df(a: number, b: List$1<number[]>, c: boolean, d: number, e: number, f: (arg1: PointCollection, arg2: PointCollection, arg3: PointCollection, arg4: PointCollection, arg5: boolean) => void, g: UnknownValuePlotting): void;
    dg(a: number, b: List$1<number[]>, c: boolean, d: number, e: number, f: (arg1: PointCollection, arg2: PointCollection, arg3: PointCollection, arg4: PointCollection, arg5: boolean) => void, g: UnknownValuePlotting, h: Clipper): void;
    private dh;
    private dj;
    private di;
    private dk;
    protected be(): void;
    protected a8(a: RenderingContext, b: boolean): void;
    an(a: any): void;
    protected af(): void;
}
