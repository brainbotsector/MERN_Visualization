import { MarkerSeries } from "./MarkerSeries";
import { ISupportsErrorBars } from "./ISupportsErrorBars";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { ScatterAxisInfoCache } from "./ScatterAxisInfoCache";
import { NumericXAxis } from "./NumericXAxis";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { CollisionAvoidanceType } from "./CollisionAvoidanceType";
import { Axis } from "./Axis";
import { ScatterItemSearchMode } from "./ScatterItemSearchMode";
import { ScatterErrorBarSettings } from "./ScatterErrorBarSettings";
import { HighlightingInfo } from "igniteui-react-core";
import { ScatterFrame } from "./ScatterFrame";
import { SeriesView } from "./SeriesView";
import { Point, Type } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { Clipper } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { AxisRange } from "./AxisRange";
import { HashPool$2 } from "igniteui-react-core";
import { MarkerManagerBase } from "./MarkerManagerBase";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
import { Thickness } from "igniteui-react-core";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { Size } from "igniteui-react-core";
import { AssigningScatterStyleEventArgs } from "./AssigningScatterStyleEventArgs";
import { AssigningScatterMarkerStyleEventArgs } from "./AssigningScatterMarkerStyleEventArgs";
import { AssigningSeriesStyleEventArgsBase } from "./AssigningSeriesStyleEventArgsBase";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { ErrorBarsHelper } from "./ErrorBarsHelper";
import { IErrorBarCalculator } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { IDictionary$2 } from "igniteui-react-core";
import { ValueLayerValueMode } from "./ValueLayerValueMode";
import { AssigningSeriesShapeStyleEventArgsBase } from "./AssigningSeriesShapeStyleEventArgsBase";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class ScatterBase extends MarkerSeries implements ISupportsErrorBars, ITrendLineSeries {
    static $t: Type;
    protected ci(): SeriesView;
    n4(): void;
    px(a: SeriesView): void;
    w6: ScatterBaseView;
    protected get_fh(): boolean;
    ag(): Axis[];
    j5(a: any, b: string): any;
    li(a: string): string;
    dz(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    protected bt(): SeriesHitTestMode;
    u7(a: Point): Rect;
    gf(a: Point, b: boolean): boolean;
    constructor();
    w5: ScatterAxisInfoCache;
    xAxis: NumericXAxis;
    yAxis: NumericYAxis;
    y1: string;
    get xq(): IFastItemColumn$1<number>;
    set xq(a: IFastItemColumn$1<number>);
    private xo;
    y9: string;
    get xr(): IFastItemColumn$1<number>;
    set xr(a: IFastItemColumn$1<number>);
    private xp;
    yl: string;
    yn: string;
    protected fv(): boolean;
    protected x5(): boolean;
    protected hb(): List$1<SeriesLayerPropertyOverlay>;
    private zf;
    private zg;
    yx: string;
    y5: string;
    yz: string;
    y7: string;
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    get aap(): Brush;
    set aap(a: Brush);
    static readonly z0: DependencyProperty;
    trendLineThickness: number;
    aar: PenLineCap;
    aaq: DoubleCollection;
    trendLinePeriod: number;
    w2: CollisionAvoidanceType;
    get GetErrorBarsXAxis(): Axis;
    get GetErrorBarsYAxis(): Axis;
    yi: number;
    yh: number;
    xh: ScatterItemSearchMode;
    yg: number;
    o6(): void;
    w7: ScatterErrorBarSettings;
    protected p5(a: any, b: string, c: any, d: any): void;
    protected x2(): boolean;
    protected x1(): boolean;
    xw(a: any): boolean;
    xv(a: any): boolean;
    private zy;
    private aas;
    private aat;
    private zb;
    protected x0(a: string, b: FastItemsSourceEventAction): boolean;
    protected oc(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    zp(a: ScatterFrame): void;
    zq(a: ScatterFrame, b: Clipper): void;
    aq(a: Axis): AxisRange;
    j2(a: Point): any;
    private xe;
    get xf(): ScatterItemSearchMode;
    set xf(a: ScatterItemSearchMode);
    protected xg(): ScatterItemSearchMode;
    jj(a: Point): number;
    h6(a: Point): number;
    protected yc(a: Point): number;
    private wv;
    private ww;
    protected yb(a: Point): number;
    private ze;
    protected get_xz(): boolean;
    protected get xz(): boolean;
    private yf;
    protected ye(a: Point): number;
    protected yd(a: Point): number;
    uu(a: Point, b: boolean, c: boolean): Point;
    fx(a: any): boolean;
    protected rj(a: Rect, b: Rect): void;
    protected rk(a: Rect, b: Rect): void;
    xb: ScatterFrame;
    xd: ScatterFrame;
    w9: ScatterFrame;
    xa(): ScatterFrame;
    zc(a: ScatterBaseView, b: ScatterFrame, c: number, d: Rect, e: Rect): void;
    zm(a: ScatterFrame, b: ScatterBaseView): void;
    n7(a: boolean, b: SeriesView): void;
    xy: boolean;
    xx: boolean;
    protected xu: boolean;
    protected xt: boolean;
    protected get_ez(): boolean;
    private xm;
    private xn;
    protected xk(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected xl(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    vb(a: SeriesPlotAreaMarginHorizontalMode, b: SeriesPlotAreaMarginVerticalMode): Thickness;
    protected xj(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    c6(a: any, b: Point, c: boolean): HighlightingInfo;
    c7(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningScatterStyle: (sender: any, args: AssigningScatterStyleEventArgs) => void;
    assigningScatterMarkerStyle: (sender: any, args: AssigningScatterMarkerStyleEventArgs) => void;
    protected x4(): boolean;
    protected x3(): boolean;
    zx(a: ScatterFrame, b: ScatterBaseView): void;
    wy(a: number, b: number): any[];
    protected wz(a: number, b: number): any[];
    protected xi: ScatterSeriesRenderManager;
    zd(a: ScatterBaseView, b: ScatterFrame): void;
    protected zi(a: number, b: number, c: boolean): void;
    protected zh(a: number, b: number, c: boolean): void;
    protected zs(a: AssigningScatterStyleEventArgs): void;
    protected zr(a: AssigningScatterMarkerStyleEventArgs): void;
    zk(a: ScatterFrame, b: ScatterBaseView): void;
    zn(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: number, e: number, f: boolean): {
        p3?: number;
        p4?: number;
    };
    zl(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: number, e: number, f: boolean): {
        p3?: number;
        p4?: number;
    };
    zj(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: any, e: number, f: number, g: boolean): {
        p4?: number;
        p5?: number;
    };
    zo(a: ErrorBarsHelper, b: IErrorBarCalculator, c: number, d: number, e: number, f: boolean): {
        p2?: number;
        p3?: number;
        p4?: number;
    };
    zu(a: ScatterFrame, b: ScatterBaseView): void;
    private zv;
    private zw;
    gw(a: Rect, b: Rect, c: SeriesView): boolean;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    qn(a: boolean): void;
    protected ra(): void;
    xc: ScatterFrame;
    qo(a: Rect, b: RenderSurface): void;
    private w8;
    ql(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    zt(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    wx(a: ScatterBaseView, b: HashPool$2<any, Marker>, c: Point[], d: Rect, e: Rect): Point[];
    x6(a: HashPool$2<any, Marker>, b: List$1<number>): List$1<number>;
    protected ow(a: any): void;
    id(): number;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    private xs;
    private x7;
    private x8;
    x9: number;
    ya: number;
    private zz;
    ip(a: ValueLayerValueMode, b: Axis): number;
    am(a: ValueLayerValueMode): number[];
    uy(a: number[]): Point;
    ux(a: ValueLayerValueMode): Point;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterSeriesRenderManager extends SeriesRenderManager {
    static $t: Type;
    protected c(): AssigningSeriesStyleEventArgsBase;
    protected a(): AssigningSeriesShapeStyleEventArgsBase;
    aw: AssigningScatterMarkerStyleEventArgs;
    ax: AssigningScatterStyleEventArgs;
    ay(a: ScatterBase, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    az(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    a0(a: AssigningSeriesStyleEventArgsBase, b: number, c: number, d: boolean): void;
}
/**
 * @hidden
 */
export declare class ScatterBaseView extends MarkerSeriesView {
    static $t: Type;
    cy: MarkerManagerBase;
    protected cw: Point[];
    protected cz: ScatterBase;
    protected c4: List$1<number>;
    constructor(a: ScatterBase);
    private df;
    private dg;
    c0: ScatterTrendLineManager;
    au(): void;
    private de;
    dh(a: Marker): Size;
    protected cx(): MarkerManagerBase;
    protected dc(a: IDictionary$2<any, OwnedPoint>): void;
    c3(): List$1<Marker>;
    cv(): Point[];
    protected cu(): Point[];
    protected c2(): List$1<number>;
    c5(): void;
    da(a: PathGeometry): void;
    c6(): void;
    db(a: PathGeometry): void;
    dd(): void;
    c1: HashPool$2<any, Marker>;
    ci(a: (arg1: Marker) => void): void;
    c8(a: (arg1: Marker) => void): void;
    c9(): void;
    protected a7(a: RenderingContext, b: boolean): void;
    c7(a: boolean): void;
    getDefaultTooltipTemplate(): string;
}
