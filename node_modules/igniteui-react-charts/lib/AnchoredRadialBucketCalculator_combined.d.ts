import { RadialBucketCalculator } from "./RadialBucketCalculator";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Type, Point } from "igniteui-react-core";
import { RadialBase } from "./RadialBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { DependencyProperty } from "igniteui-react-core";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { Axis } from "./Axis";
import { RadialFrame } from "./RadialFrame";
import { SeriesView } from "./SeriesView";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { AxisRange } from "./AxisRange";
import { RadialBaseView } from "./RadialBaseView";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { Clipper } from "igniteui-react-core";
import { RadialTrendLineManager } from "./RadialTrendLineManager";
import { PointCollection } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class AnchoredRadialBucketCalculator extends RadialBucketCalculator {
    static $t: Type;
    private f;
    constructor(a: AnchoredRadialSeriesView);
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare abstract class AnchoredRadialSeries extends RadialBase {
    static $t: Type;
    protected ci(): SeriesView;
    n4(): void;
    j5(a: any, b: string): any;
    li(a: string): string;
    px(a: SeriesView): void;
    yc: AnchoredRadialSeriesView;
    constructor();
    yd: CategoryLineRasterizer;
    jq(a: Point, b: boolean): number;
    jo(a: Point, b: boolean): number;
    h4(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    il(a: Point, b: boolean, c: boolean): number;
    uu(a: Point, b: boolean, c: boolean): Point;
    y0: string;
    yt: string;
    protected fv(): boolean;
    protected hb(): List$1<SeriesLayerPropertyOverlay>;
    private y4;
    get yi(): IFastItemColumn$1<number>;
    set yi(a: IFastItemColumn$1<number>);
    private yh;
    yw: string;
    yy: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    yg: TrendLineType;
    zl: Brush;
    get zk(): Brush;
    set zk(a: Brush);
    static readonly y8: DependencyProperty;
    yq: number;
    zn: PenLineCap;
    zm: DoubleCollection;
    yr: number;
    ys: number;
    aq(a: Axis): AxisRange;
    protected p5(a: any, b: string, c: any, d: any): void;
    protected oc(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    gw(a: Rect, b: Rect, c: SeriesView): boolean;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    protected get_yl(): boolean;
    protected get yl(): boolean;
    protected get_d6(): boolean;
    protected get_fq(): boolean;
    protected yn(a: CategoryAngleAxis, b: Rect, c: Rect, d: Rect): number;
    x1(a: RadialFrame, b: RadialBaseView): void;
    private yo;
    private yp;
    private ym;
    yb(a: List$1<number[]>, b: number, c: SeriesView): Clipper;
    protected zo: Point;
    y7(a: PointCollection, b: PointCollection, c: PointCollection, d: PointCollection, e: boolean): void;
    private yk;
    private yj;
    n7(a: boolean, b: SeriesView): void;
    x4(a: RadialFrame, b: RadialBaseView): void;
    protected ya(a: number, b: number, c: Axis): any[];
    protected y5(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    protected y6(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    y3(a: RadialBaseView, b: RadialFrame): void;
    private y2;
    protected ra(): void;
    j9(a: any, b: Point): any;
    fx(a: any): boolean;
    yf: RadialFrame;
    qo(a: Rect, b: RenderSurface): void;
    private ye;
    ql(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected ow(a: any): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AnchoredRadialSeriesView extends RadialBaseView {
    static $t: Type;
    cz: AnchoredRadialSeries;
    constructor(a: AnchoredRadialSeries);
    c0: RadialTrendLineManager;
    c1(a: Rect, b: Rect, c: Rect, d: Rect): void;
    c2(): void;
    protected a7(a: RenderingContext, b: boolean): void;
    getDefaultTooltipTemplate(): string;
}
