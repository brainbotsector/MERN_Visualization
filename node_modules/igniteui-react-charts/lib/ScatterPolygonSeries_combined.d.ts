import { ShapeSeriesBase } from "./ShapeSeriesBase";
import { ShapeAxisInfoCache } from "./ShapeAxisInfoCache";
import { StyleSelector } from "./StyleSelector";
import { Style } from "igniteui-react-core";
import { MarkerType } from "./MarkerType";
import { DataTemplate } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { CollisionAvoidanceType } from "./CollisionAvoidanceType";
import { MarkerOutlineMode } from "./MarkerOutlineMode";
import { MarkerFillMode } from "./MarkerFillMode";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { Type, Point } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { OwnedPoint } from "./OwnedPoint";
import { ShapeSeriesViewBase } from "./ShapeSeriesViewBase";
import { Marker } from "./Marker";
import { DataContext } from "igniteui-react-core";
import { IDictionary$2 } from "igniteui-react-core";
import { HashPool$2 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { FrameworkElement } from "igniteui-react-core";
import { NumericMarkerManager } from "./NumericMarkerManager";
import { Size } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { PointCollection } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class ScatterPolygonSeries extends ShapeSeriesBase {
    static $t: Type;
    protected bb(): Series;
    protected get_fb(): boolean;
    protected get_e6(): boolean;
    constructor();
    protected wl(): boolean;
    protected xn(a: SeriesView): void;
    y1(a: ScatterPolygonSeriesView): void;
    private yk;
    protected ci(): SeriesView;
    px(a: SeriesView): void;
    yh: ScatterPolygonSeriesView;
    yi: ShapeAxisInfoCache;
    private static zo;
    private yf;
    private yg;
    protected get_hasMarkers(): boolean;
    t8(): Brush;
    t9(): Brush;
    rs(): DataTemplate;
    lf(): string;
    yj: StyleSelector;
    zq: Style;
    ye: MarkerType;
    y5: DataTemplate;
    ym: number;
    h3(): number;
    y3: DataTemplate;
    y4: DataTemplate;
    zm: Brush;
    zk: Brush;
    zn: Brush;
    zl: Brush;
    zp: Style;
    x5: CollisionAvoidanceType;
    private ya;
    get yb(): MarkerOutlineMode;
    set yb(a: MarkerOutlineMode);
    yd(): MarkerOutlineMode;
    re(a: MarkerOutlineMode): void;
    yc: MarkerOutlineMode;
    private x6;
    get x7(): MarkerFillMode;
    set x7(a: MarkerFillMode);
    x9(): MarkerFillMode;
    rd(a: MarkerFillMode): void;
    rf(a: number): void;
    x8: MarkerFillMode;
    protected ra(): void;
    protected po(): void;
    protected p5(a: any, b: string, c: any, d: any): void;
    au(a: Point, b: boolean): DataContext;
    y2(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    dz(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    x4(a: ScatterPolygonSeriesView, b: HashPool$2<any, Marker>, c: Point[], d: Rect, e: Rect): Point[];
    yl(a: HashPool$2<any, Marker>, b: List$1<number>): List$1<number>;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterPolygonSeriesView extends ShapeSeriesViewBase {
    static $t: Type;
    constructor(a: ScatterPolygonSeries);
    au(): void;
    get dg(): NumericMarkerManager;
    dk: boolean;
    protected d2(a: IDictionary$2<any, OwnedPoint>): void;
    protected da(): Point[];
    protected dl(): List$1<number>;
    private db;
    private dm;
    private dh;
    private df;
    protected c5(a: number, b: List$1<PointCollection>): PathGeometry;
    cm(a: FrameworkElement, b: any, c: boolean): void;
    protected ck(a: FrameworkElement, b: PathGeometry): void;
    private dj;
    di: HashPool$2<any, Marker>;
    dw(a: (arg1: Marker) => void): void;
    dy(a: HashPool$2<any, Marker>): void;
    de(): Marker;
    protected dn: List$1<Marker>;
    b4(a: Point): Marker;
    private dd;
    d0(a: Marker): void;
    dz(a: Marker): void;
    d1(a: Marker): void;
    d3(a: boolean): void;
    protected bj(a: any, b: number): void;
    private dc;
    protected bk(a: any, b: number): void;
    protected a7(a: RenderingContext, b: boolean): void;
    dv(): void;
    ds(): void;
    dt(): void;
    dq(): void;
    du(): void;
    dr(): void;
    dp(a: string): void;
    dx(): void;
    private d4;
    d5(a: Marker): Size;
    an(a: any): void;
    getDefaultTooltipTemplate(): string;
}
