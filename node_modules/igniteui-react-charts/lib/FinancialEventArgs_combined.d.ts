import { EventArgs, IList$1, Base, Type, IEnumerable$1, Point } from "igniteui-react-core";
import { IBucketizer } from "./IBucketizer";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { IHasCategoryAxis } from "./IHasCategoryAxis";
import { IHasCategoryModePreference } from "./IHasCategoryModePreference";
import { Brush } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { NumericYAxis } from "./NumericYAxis";
import { HighlightingInfo } from "igniteui-react-core";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { CategoryTransitionSourceFramePreparer } from "./CategoryTransitionSourceFramePreparer";
import { CategoryFrame } from "./CategoryFrame";
import { CategoryMode } from "./CategoryMode";
import { List$1 } from "igniteui-react-core";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { Dictionary$2 } from "igniteui-react-core";
import { CategorySeriesRenderManager } from "./CategorySeriesRenderManager";
import { AssigningCategoryStyleEventArgs } from "./AssigningCategoryStyleEventArgs";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { TransitionOutSpeedType } from "./TransitionOutSpeedType";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { CalculatedColumn } from "./CalculatedColumn";
import { ColumnSupportingCalculation } from "./ColumnSupportingCalculation";
import { RenderSurface } from "./RenderSurface";
import { SupportingCalculation$1 } from "./SupportingCalculation$1";
/**
 * @hidden
 */
export declare class FinancialEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: number, b: number, c: FinancialCalculationDataSource, d: FinancialCalculationSupportingCalculations, e: FinancialSeries);
    private _position;
    get position(): number;
    set position(a: number);
    private _count;
    get count(): number;
    set count(a: number);
    private _dataSource;
    get dataSource(): FinancialCalculationDataSource;
    set dataSource(a: FinancialCalculationDataSource);
    private _supportingCalculations;
    get supportingCalculations(): FinancialCalculationSupportingCalculations;
    set supportingCalculations(a: FinancialCalculationSupportingCalculations);
    private _basedOn;
    get basedOn(): IList$1<string>;
    set basedOn(a: IList$1<string>);
}
/**
 * @hidden
 */
export declare class FinancialBucketCalculator extends Base implements IBucketizer {
    static $t: Type;
    protected a: FinancialSeriesView;
    constructor(a: FinancialSeriesView);
    getBucket(a: number): number[];
    getBucketWithoutUnknowns(a: number): number[];
    getErrorBucket(a: number, b: IFastItemColumn$1<number>): number;
    c: number;
    d: number;
    b: number;
    getBucketInfo(a: number, b: number, c: number, d: number): {
        p0: number;
        p1: number;
        p2: number;
        p3: number;
    };
    e(a: number): void;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare abstract class FinancialSeries extends Series implements IHasCategoryAxis, IHasCategoryModePreference {
    static $t: Type;
    protected hb(): List$1<SeriesLayerPropertyOverlay>;
    private yo;
    private ym;
    private yn;
    private yl;
    private yp;
    j7(): any;
    px(a: SeriesView): void;
    v2: FinancialSeriesView;
    protected get_er(): boolean;
    ag(): Axis[];
    j5(a: any, b: string): any;
    li(a: string): string;
    protected xl(): number;
    private xj;
    ah(a: Point): Point[][];
    ai(a: Point): Point[][];
    constructor();
    zb: Brush;
    ue(): Brush;
    uf(): Brush;
    n4(): void;
    protected get_d6(): boolean;
    protected get_fq(): boolean;
    vl: CategoryAxisBase;
    v4: NumericYAxis;
    yb: string;
    get wh(): IFastItemColumn$1<number>;
    set wh(a: IFastItemColumn$1<number>);
    private wc;
    x2: string;
    get wf(): IFastItemColumn$1<number>;
    set wf(a: IFastItemColumn$1<number>);
    private wa;
    x7: string;
    get wg(): IFastItemColumn$1<number>;
    set wg(a: IFastItemColumn$1<number>);
    private wb;
    xp: string;
    get we(): IFastItemColumn$1<number>;
    set we(a: IFastItemColumn$1<number>);
    private v9;
    yf: string;
    get wj(): IFastItemColumn$1<number>;
    set wj(a: IFastItemColumn$1<number>);
    private wd;
    xy: string;
    xu: string;
    xw: string;
    xs: string;
    x0: string;
    protected fv(): boolean;
    wr: boolean;
    protected wm: boolean;
    assigningCategoryStyle: (sender: any, args: AssigningCategoryStyleEventArgs) => void;
    wt(): boolean;
    protected ys(a: AssigningCategoryStyleEventArgs): void;
    protected vu: CategorySeriesRenderManager;
    protected yq(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean, g: number): void;
    xb(a: Point): number;
    jq(a: Point, b: boolean): number;
    jo(a: Point, b: boolean): number;
    h4(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    uu(a: Point, b: boolean, c: boolean): Point;
    il(a: Point, b: boolean, c: boolean): number;
    ih(a: Point, b: boolean, c: boolean): number;
    ij(a: Point, b: boolean, c: boolean): number;
    xd(a: Point, b: boolean, c: boolean): number;
    xe(a: Point, b: boolean, c: boolean): number;
    xf(a: Point, b: boolean, c: boolean): number;
    uq(a: Point, b: boolean, c: boolean): Point;
    us(a: Point, b: boolean, c: boolean): Point;
    zd(a: Point, b: boolean, c: boolean): Point;
    zc(a: Point, b: boolean, c: boolean): Point;
    ze(a: Point, b: boolean, c: boolean): Point;
    o6(): void;
    protected rk(a: Rect, b: Rect): void;
    protected rj(a: Rect, b: Rect): void;
    protected ww: Dictionary$2<IFastItemColumn$1<number>, string>;
    protected wx: Dictionary$2<string, string>;
    private wi;
    private yk;
    private wl;
    protected p5(a: any, b: string, c: any, d: any): void;
    wo(a: any): boolean;
    wn(a: any): boolean;
    protected ve(a: number, b: number, c: Axis): any[];
    protected xi(a: SeriesView): number;
    protected xk(a: SeriesView): number;
    vd(a: number, b: number): any[];
    private v8;
    protected get_ez(): boolean;
    n5(): void;
    c6(a: any, b: Point, c: boolean): HighlightingInfo;
    xm(a: Point): number;
    protected v7(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected v6(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected wp(): boolean;
    h6(a: Point): number;
    jj(a: Point): number;
    protected get_fd(): boolean;
    as(): CategoryAxisBase;
    jl(a: Point): number;
    j2(a: Point): any;
    vp: CategoryFrame;
    vr: CategoryFrame;
    vn: CategoryFrame;
    vo(): CategoryFrame;
    protected xc(a: Rect, b: Rect, c: Rect): number;
    vw: CategoryTransitionInMode;
    ws: boolean;
    protected f7(): boolean;
    protected vv(): CategoryTransitionInMode;
    protected cu(): TransitionInSpeedType;
    protected cx(): TransitionOutSpeedType;
    yt(a: CategoryFrame, b: FinancialSeriesView): void;
    yr(a: CategoryFrame, b: FinancialSeriesView): void;
    gw(a: Rect, b: Rect, c: SeriesView): boolean;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    vx: CategoryTransitionSourceFramePreparer;
    xg(a: FinancialSeriesView): number;
    protected n8(): void;
    qn(a: boolean): void;
    protected f8(): boolean;
    typical: (sender: any, e: FinancialEventArgs) => void;
    typicalBasedOn: (sender: any, e: FinancialEventArgs) => void;
    protected wu(a: IList$1<string>): boolean;
    get wv(): boolean;
    protected wq(): boolean;
    protected yj(a: FinancialEventArgs): void;
    protected get w3(): IEnumerable$1<number>;
    private _w0;
    private w0;
    protected get w2(): IEnumerable$1<number>;
    private _wz;
    private wz;
    protected get w1(): IEnumerable$1<number>;
    private _wy;
    private wy;
    w5(a: IList$1<number>): IList$1<number>;
    private wk;
    protected w4(): IList$1<string>;
    private w9;
    getOpenColumnAsArray(): number[];
    private w7;
    getHighColumnAsArray(): number[];
    private w8;
    getLowColumnAsArray(): number[];
    private w6;
    getCloseColumnAsArray(): number[];
    private xa;
    getVolumeColumnAsArray(): number[];
    protected oc(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected vy(a: number, b: number): FinancialCalculationDataSource;
    xh(a: number): number;
    protected vz(a: FinancialCalculationDataSource): FinancialCalculationSupportingCalculations;
    get categoryAxis(): CategoryAxisBase;
    private vq;
    qo(a: Rect, b: RenderSurface): void;
    private vm;
    ql(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    ao(a: Axis): Axis;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    private vs;
    get vt(): CategoryMode;
    set vt(a: CategoryMode);
    protected get_e7(): boolean;
    qw(a: Brush, b: Brush): void;
    private yu;
    private v3;
    private v5;
    j4(a: any): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class FinancialCalculationSupportingCalculations extends Base {
    static $t: Type;
    a: ColumnSupportingCalculation;
    c: ColumnSupportingCalculation;
    d: ColumnSupportingCalculation;
    b: ColumnSupportingCalculation;
    h: DataSourceSupportingCalculation;
    f: DataSourceSupportingCalculation;
    g: DataSourceSupportingCalculation;
    e: DataSourceSupportingCalculation;
    k: (arg1: (arg1: number) => number, arg2: number, arg3: number) => IEnumerable$1<number>;
    j: (arg1: (arg1: number) => number, arg2: number) => IEnumerable$1<number>;
    i: (arg1: number) => number;
}
/**
 * @hidden
 */
export declare class DataSourceSupportingCalculation extends SupportingCalculation$1<(dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>> {
    static $t: Type;
    constructor(a: number, b: (dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>);
    constructor(a: number, b: (dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>, c: IList$1<string>);
    constructor(a: number, ..._rest: any[]);
}
/**
 * @hidden
 */
export declare class FinancialCalculationDataSource extends Base {
    static $t: Type;
    private _openColumn;
    get openColumn(): IList$1<number>;
    set openColumn(a: IList$1<number>);
    private _closeColumn;
    get closeColumn(): IList$1<number>;
    set closeColumn(a: IList$1<number>);
    private _highColumn;
    get highColumn(): IList$1<number>;
    set highColumn(a: IList$1<number>);
    private _lowColumn;
    get lowColumn(): IList$1<number>;
    set lowColumn(a: IList$1<number>);
    private _volumeColumn;
    get volumeColumn(): IList$1<number>;
    set volumeColumn(a: IList$1<number>);
    private _indicatorColumn;
    get indicatorColumn(): IList$1<number>;
    set indicatorColumn(a: IList$1<number>);
    private _typicalColumn;
    get typicalColumn(): CalculatedColumn;
    set typicalColumn(a: CalculatedColumn);
    private _trueRange;
    get trueRange(): CalculatedColumn;
    set trueRange(a: CalculatedColumn);
    private _trueLow;
    get trueLow(): CalculatedColumn;
    set trueLow(a: CalculatedColumn);
    private _period;
    get period(): number;
    set period(a: number);
    private _shortPeriod;
    get shortPeriod(): number;
    set shortPeriod(a: number);
    private _longPeriod;
    get longPeriod(): number;
    set longPeriod(a: number);
    private _count;
    get count(): number;
    set count(a: number);
    private _calculateFrom;
    get calculateFrom(): number;
    set calculateFrom(a: number);
    private _calculateCount;
    get calculateCount(): number;
    set calculateCount(a: number);
    private _multiplier;
    get multiplier(): number;
    set multiplier(a: number);
    private _minimumValue;
    get minimumValue(): number;
    set minimumValue(a: number);
    private _maximumValue;
    get maximumValue(): number;
    set maximumValue(a: number);
    private _specifiesRange;
    get specifiesRange(): boolean;
    set specifiesRange(a: boolean);
    private _series;
    get series(): FinancialSeries;
    set series(a: FinancialSeries);
}
/**
 * @hidden
 */
export declare abstract class FinancialSeriesView extends SeriesView {
    static $t: Type;
    b2: FinancialSeries;
    b0: FinancialBucketCalculator;
    b4: number;
    b3(a: CategoryFrame): boolean;
    b5(a: CategoryFrame): void;
    constructor(a: FinancialSeries);
    protected abstract b1(): FinancialBucketCalculator;
    au(): void;
    getDefaultTooltipTemplate(): string;
    protected af(): void;
}
