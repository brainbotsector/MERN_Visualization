import { Series } from "./Series";
import { DependencyProperty } from "igniteui-react-core";
import { DependencyObject } from "igniteui-react-core";
import { HighlightingInfo } from "igniteui-react-core";
import { ShapeItemSearchMode } from "./ShapeItemSearchMode";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Point, Type } from "igniteui-react-core";
import { NumericXAxis } from "./NumericXAxis";
import { NumericYAxis } from "./NumericYAxis";
import { List$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { StyleShapeEventArgs } from "./StyleShapeEventArgs";
import { Axis } from "./Axis";
import { FrameworkElement } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { Marker } from "./Marker";
import { Tuple$2 } from "igniteui-react-core";
import { ShapeHitRegion } from "./ShapeHitRegion";
import { AssigningShapeStyleEventArgs } from "./AssigningShapeStyleEventArgs";
import { AssigningShapeMarkerStyleEventArgs } from "./AssigningShapeMarkerStyleEventArgs";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { FlattenedShape } from "./FlattenedShape";
import { SeriesView } from "./SeriesView";
import { RenderSurface } from "./RenderSurface";
import { Dictionary$2 } from "igniteui-react-core";
import { AssigningSeriesShapeStyleEventArgsBase } from "./AssigningSeriesShapeStyleEventArgsBase";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { Shape } from "igniteui-react-core";
import { AssigningSeriesStyleEventArgsBase } from "./AssigningSeriesStyleEventArgsBase";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { Style } from "igniteui-react-core";
import { StyleSelector } from "./StyleSelector";
import { Path } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { PointCollection } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class ShapeSeriesBase extends Series {
    static $t: Type;
    constructor();
    n4(): void;
    ag(): Axis[];
    j5(a: any, b: string): any;
    li(a: string): string;
    we: boolean;
    wd: boolean;
    protected v6: boolean;
    protected v5: boolean;
    protected get_ez(): boolean;
    private v1;
    private v2;
    protected get_d1(): boolean;
    protected vz(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected v0(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    private vs;
    get vt(): ShapeItemSearchMode;
    set vt(a: ShapeItemSearchMode);
    protected vu(): ShapeItemSearchMode;
    vv: ShapeItemSearchMode;
    ww: number;
    wv: number;
    h6(a: Point): number;
    private vh;
    private vi;
    protected xe(a: Point): Tuple$2<number, Point>;
    private xd;
    protected get_v7(): boolean;
    protected get v7(): boolean;
    private xc;
    protected wr(a: Point): number;
    uu(a: Point, b: boolean, c: boolean): Point;
    j2(a: Point): any;
    protected vy(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    c6(a: any, b: Point, c: boolean): HighlightingInfo;
    c7(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningShapeStyle: (sender: any, args: AssigningShapeStyleEventArgs) => void;
    assigningShapeMarkerStyle: (sender: any, args: AssigningShapeMarkerStyleEventArgs) => void;
    protected wk(): boolean;
    protected wj(): boolean;
    protected vw: ShapeSeriesRenderManager;
    w8: string;
    get wz(): string;
    set wz(a: string);
    static readonly xr: DependencyProperty;
    protected fv(): boolean;
    protected hb(): List$1<SeriesLayerPropertyOverlay>;
    private xg;
    private v3;
    get v4(): IFastItemColumn$1<any>;
    set v4(a: IFastItemColumn$1<any>);
    vp: NumericXAxis;
    vr: NumericYAxis;
    private wb;
    private static wf;
    private convertToListList;
    protected dc(a: string): IFastItemColumn$1<any>;
    protected p5(a: any, b: string, c: any, d: any): void;
    protected wi(): boolean;
    protected wh(): boolean;
    v9(a: any): boolean;
    v8(a: any): boolean;
    private vo;
    private vq;
    private wq;
    wm: List$1<Rect>;
    private xo;
    private x2;
    private wo;
    private ve;
    private vg;
    private vf;
    private vd;
    protected get_wc(): boolean;
    protected get wc(): boolean;
    protected wl(): boolean;
    qn(a: boolean): void;
    ql(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected xn(a: SeriesView): void;
    protected xj(a: FrameworkElement, b: boolean, c: number, d: number, e: boolean, f: boolean): void;
    protected xi(a: number, b: number, c: boolean): void;
    protected xl(a: AssigningShapeStyleEventArgs): void;
    protected xk(a: AssigningShapeMarkerStyleEventArgs): void;
    vj(a: number, b: number): any[];
    protected vk(a: number, b: number): any[];
    private static xm;
    o6(): void;
    protected rk(a: Rect, b: Rect): void;
    protected rj(a: Rect, b: Rect): void;
    protected oc(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    gw(a: Rect, b: Rect, c: SeriesView): boolean;
    protected get_wg(): boolean;
    protected get wg(): boolean;
    px(a: SeriesView): void;
    private vx;
    private wp;
    private vn;
    private xf;
    x1: Rect;
    private xq;
    n7(a: boolean, b: SeriesView): void;
    private xh;
    private xp;
    au(a: Point, b: boolean): DataContext;
    wx(a: number): any;
    protected get_gq(): boolean;
    protected set_gq(a: boolean): void;
    ws: number;
    wt: number;
    aq(a: Axis): AxisRange;
    protected get_fi(): boolean;
    protected get_e6(): boolean;
    get wa(): boolean;
    x3(a: any, b: DependencyObject, c: Style): Style;
    styleShape: (sender: any, e: StyleShapeEventArgs) => void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ShapeSeriesRenderManager extends SeriesRenderManager {
    static $t: Type;
    protected c(): AssigningSeriesStyleEventArgsBase;
    protected a(): AssigningSeriesShapeStyleEventArgsBase;
    aw: AssigningShapeMarkerStyleEventArgs;
    ax: AssigningShapeStyleEventArgs;
    a1(a: Shape, b: number, c: boolean): void;
    ay(a: ShapeSeriesBase, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    az(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    a0(a: AssigningSeriesStyleEventArgsBase, b: number, c: number, d: boolean): void;
}
/**
 * @hidden
 */
export declare abstract class ShapeSeriesViewBase extends SeriesView {
    static $t: Type;
    constructor(a: ShapeSeriesBase);
    cc: Dictionary$2<number, FlattenedShape>;
    b4(a: Point): Marker;
    get ce(): List$1<ShapeHitRegion>;
    protected b8(): Pool$1<FrameworkElement>;
    cb(a: Rect): boolean;
    static cf(a: List$1<FlattenedShape>): List$1<PointCollection>;
    get ca(): boolean;
    protected b6: ShapeSeriesBase;
    private cd;
    ci(a: number, b: any, c: Rect, d: List$1<FlattenedShape>): void;
    protected c4(a: number, b: any): FrameworkElement;
    protected abstract ck(a: FrameworkElement, b: PathGeometry): void;
    static cl(a: ShapeSeriesViewBase, b: Path, c: any): void;
    cp(a: (arg1: FrameworkElement) => void): void;
    cm(a: FrameworkElement, b: any, c: boolean): void;
    protected co(a: FrameworkElement, b: boolean): void;
    private cj;
    private cx;
    protected abstract c5(a: number, b: List$1<PointCollection>): PathGeometry;
    cu(): void;
    ct(): void;
    private ch;
    cw(a: number, b: number): void;
    cn(): void;
    protected cg: List$1<Path>;
    c1(): FrameworkElement;
    cq(a: FrameworkElement): void;
    cr(a: FrameworkElement): void;
    cs(a: FrameworkElement): void;
    protected b9: Pool$1<FrameworkElement>;
    c6(a: number, b: List$1<PointCollection>, c: boolean): PathGeometry;
    protected ac(a: number): any;
    private c7;
    protected ab(a: number): any;
    protected a8(a: RenderingContext, b: boolean): void;
    private b7;
    private c8;
    get c9(): Style;
    cz(a: StyleSelector): void;
    cy(a: Style): void;
    c2(a: Point, b: boolean): FrameworkElement;
    c3(a: Point, b: boolean, c: boolean): FrameworkElement;
    b5(a: Point, b: boolean, c: boolean): ShapeHitRegion;
    private b1;
    private b3;
    private b2;
    private b0;
    cv(a: number[], b: number[], c: number[], d: number[]): void;
    c0(): void;
    an(a: any): void;
}
