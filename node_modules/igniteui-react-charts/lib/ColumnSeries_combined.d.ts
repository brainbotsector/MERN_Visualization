import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { ConsolidatedItemsPosition } from "./ConsolidatedItemsPosition";
import { Series } from "./Series";
import { SeriesView } from "./SeriesView";
import { SeriesVisibleRangeMode } from "./SeriesVisibleRangeMode";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { Type, Point } from "igniteui-react-core";
import { CategoryMode } from "./CategoryMode";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { Rect } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { Pool$1 } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { CategorySeriesView } from "./CategorySeriesView";
import { List$1 } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class ColumnSeries extends HorizontalAnchoredCategorySeries {
    static $t: Type;
    protected bb(): Series;
    protected get_ek(): boolean;
    protected get_e6(): boolean;
    protected i0(): number;
    protected ci(): SeriesView;
    aau: ColumnSeriesView;
    px(a: SeriesView): void;
    co(): SeriesVisibleRangeMode;
    protected xc(): CategoryTransitionInMode;
    constructor();
    aay: number;
    aaz: number;
    protected get_d1(): boolean;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    private aa0;
    u5(a: Point): Rect;
    gf(a: Point, b: boolean): boolean;
    n7(a: boolean, b: SeriesView): void;
    ib(): number;
    yl(a: CategoryFrame, b: CategorySeriesView): void;
    private aav;
    get aaw(): ConsolidatedItemsPosition;
    set aaw(a: ConsolidatedItemsPosition);
    private aax;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ColumnSeriesView extends AnchoredCategorySeriesView {
    static $t: Type;
    au(): void;
    protected dd: ColumnSeries;
    constructor(a: ColumnSeries);
    dl(): Rectangle;
    protected df: List$1<Rectangle>;
    dg(a: Rectangle): void;
    di(a: Rectangle): void;
    dh(a: Rectangle): void;
    dj(a: Rectangle, b: number, c: number): void;
    protected ac(a: number): any;
    private dk;
    protected ab(a: number): any;
    protected a8(a: RenderingContext, b: boolean): void;
    de: Pool$1<Rectangle>;
    an(a: any): void;
}
