import { AxisLabelPanelBase } from "./AxisLabelPanelBase";
import { Point, Type, IList$1 } from "igniteui-react-core";
import { AxisLabelPanelBaseView } from "./AxisLabelPanelBaseView";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { List$1 } from "igniteui-react-core";
import { AxisAngleLabelMode } from "./AxisAngleLabelMode";
import { AxisLabelsLocation } from "./AxisLabelsLocation";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { IAngleScaler } from "./IAngleScaler";
import { CategoryAxisRenderer } from "./CategoryAxisRenderer";
import { DependencyProperty } from "igniteui-react-core";
import { AxisOrientation } from "./AxisOrientation";
import { AxisView } from "./AxisView";
import { PolarAxisRenderingManager } from "./PolarAxisRenderingManager";
import { ScalerParams } from "./ScalerParams";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { Geometry } from "igniteui-react-core";
import { NumericAxisBase } from "./NumericAxisBase";
import { NumericAxisRenderer } from "./NumericAxisRenderer";
import { NumericAxisRenderingParameters } from "./NumericAxisRenderingParameters";
import { GeometryGroup } from "igniteui-react-core";
import { CategoryAxisBaseView } from "./CategoryAxisBaseView";
import { NumericAxisBaseView } from "./NumericAxisBaseView";
/**
 * @hidden
 */
export declare class AngleAxisLabelPanel extends AxisLabelPanelBase {
    static $t: Type;
    ae(): AxisLabelPanelBaseView;
    ch(a: AxisLabelPanelBaseView): void;
    c9: AngleAxisLabelPanelView;
    constructor();
    da: boolean;
    di: (arg1: number, arg2: number, arg3: number) => Point;
    at(a: number, b: Rect): boolean;
    df: number;
    dc: number;
    de: number;
    dd: number;
    db: number;
    a5(): List$1<Rect>;
    private dk;
    private dj;
    private dh;
    private dg;
    ai(): AxisLabelsLocation;
    ay(a: AxisLabelsLocation): boolean;
}
/**
 * @hidden
 */
export declare class CategoryAngleAxis extends CategoryAxisBase implements IAngleScaler {
    static $t: Type;
    a4(): AxisView;
    hs(a: AxisView): void;
    mj: CategoryAngleAxisView;
    protected get_b9(): boolean;
    private mo;
    constructor();
    av(): AxisLabelPanelBase;
    ml: CategoryAxisRenderer;
    private mp;
    private m3;
    private mt;
    private mk;
    private nl;
    private nk;
    mx(): number;
    private mi;
    getMinMaxAngle(a: Rect, b: number, c: number): {
        p1: number;
        p2: number;
    };
    ac(): void;
    private mm;
    get mn(): NumericRadiusAxis;
    set mn(a: NumericRadiusAxis);
    ak(): Axis;
    m4: number;
    private mu;
    mg: AxisAngleLabelMode;
    mh(): AxisAngleLabelMode;
    getCategorySize(a: Rect, b: Rect, c: Rect): number;
    k4(a: Rect, b: Rect, c: Rect): number;
    getGroupCenter(a: number, b: Rect, c: Rect, d: Rect): number;
    m0(a: number): number;
    protected h9(a: boolean): void;
    mz(a: Rect, b: Rect): number;
    my(a: Rect, b: Rect): number;
    getScaledAngle(a: number): number;
    getUnscaledAngle(a: number): number;
    ej(a: number, b: ScalerParams): number;
    em(a: number, b: ScalerParams): number;
    protected hw(a: any, b: string, c: any, d: any): void;
    private nd;
    nf(a: NumericRadiusAxis): void;
    static readonly ng: DependencyProperty;
    get m1(): number;
    set m1(a: number);
    private mr;
    get mv(): number;
    set mv(a: number);
    ev(): number;
    static readonly ni: DependencyProperty;
    get m2(): number;
    set m2(a: number);
    private ms;
    get mw(): number;
    set mw(a: number);
    protected mq(): boolean;
    protected get_a2(): AxisOrientation;
    get a2(): AxisOrientation;
    c3(): boolean;
    private m5;
    get m6(): number;
    set m6(a: number);
    j5(a: number, b: Rect, c: Rect, d?: any, e?: any): Geometry;
    get isVertical(): boolean;
    j$d(a: number, b: ScalerParams): number;
    j$c(a: number, b: ScalerParams): number;
    j$e(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$g(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    get j$b(): boolean;
    j$a(): number[];
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class NumericAngleAxis extends NumericAxisBase implements IAngleScaler {
    static $t: Type;
    a4(): AxisView;
    hs(a: AxisView): void;
    nj: NumericAngleAxisView;
    nm: PolarAxisRenderingManager;
    protected get_b9(): boolean;
    constructor();
    av(): AxisLabelPanelBase;
    nq(): number;
    private ns;
    private nn;
    private no;
    ky(): NumericAxisRenderer;
    private n1;
    ej(a: number, b: ScalerParams): number;
    getScaledAngle1(a: number, b: boolean, c: boolean): number;
    getScaledAngle(a: number): number;
    em(a: number, b: ScalerParams): number;
    getUnscaledAngle(a: number): number;
    nt: number;
    private np;
    nh: AxisAngleLabelMode;
    ni(): AxisAngleLabelMode;
    protected hw(a: any, b: string, c: any, d: any): void;
    private nw;
    k2(): NumericAxisRenderingParameters;
    k1(a: Rect, b: Rect, c: Rect, d: Rect): NumericAxisRenderingParameters;
    getMinMaxAngle(a: Rect, b: number, c: number): {
        p1: number;
        p2: number;
    };
    protected h9(a: boolean): void;
    private nk;
    get nl(): NumericRadiusAxis;
    set nl(a: NumericRadiusAxis);
    ak(): Axis;
    ny(a: NumericRadiusAxis): void;
    protected ip(a: Rect, b: Rect): void;
    protected get_a2(): AxisOrientation;
    get a2(): AxisOrientation;
    j5(a: number, b: Rect, c: Rect, d?: any, e?: any): Geometry;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class NumericRadiusAxis extends NumericAxisBase {
    static $t: Type;
    a4(): AxisView;
    hs(a: AxisView): void;
    nj: NumericRadiusAxisView;
    protected get_cm(): boolean;
    ei(): number;
    private ns;
    private nr;
    private nk;
    constructor();
    av(): AxisLabelPanelBase;
    nl: boolean;
    private np;
    private nm;
    ky(): NumericAxisRenderer;
    ej(a: number, b: ScalerParams): number;
    nv(a: number, b: boolean, c: boolean, d: number, e: number): number;
    nu(a: number): number;
    nw(a: number): number;
    em(a: number, b: ScalerParams): number;
    ny: number;
    no: number;
    nx: number;
    nn: number;
    protected hw(a: any, b: string, c: any, d: any): void;
    protected nq: number;
    n3(a: Axis): void;
    private nh;
    get ni(): Axis;
    set ni(a: Axis);
    ak(): Axis;
    k2(): NumericAxisRenderingParameters;
    k1(a: Rect, b: Rect, c: Rect, d: Rect): NumericAxisRenderingParameters;
    private n4;
    private nz;
    nt(): number;
    m2(a: AxisRangeChangedEventArgs): void;
    protected h9(a: boolean): void;
    protected ip(a: Rect, b: Rect): void;
    n2(a: GeometryGroup, b: Rect, c: Rect, d: Rect, e: Rect): void;
    protected get_a2(): AxisOrientation;
    get a2(): AxisOrientation;
    j5(a: number, b: Rect, c: Rect, d?: any, e?: any): Geometry;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AngleAxisLabelPanelView extends AxisLabelPanelBaseView {
    static $t: Type;
    protected az: AngleAxisLabelPanel;
    constructor(a: AngleAxisLabelPanel);
    an(): void;
    a1(a: List$1<Rect>, b: List$1<boolean>): void;
    a0(a: List$1<Rect>, b: List$1<boolean>): void;
    o(): number;
    p(): number;
    q(): number;
    r(): number;
}
/**
 * @hidden
 */
export declare class CategoryAngleAxisView extends CategoryAxisBaseView {
    static $t: Type;
    protected bm: CategoryAngleAxis;
    constructor(a: CategoryAngleAxis);
    al(): void;
}
/**
 * @hidden
 */
export declare class NumericAngleAxisView extends NumericAxisBaseView {
    static $t: Type;
    protected bm: NumericAngleAxis;
    constructor(a: NumericAngleAxis);
    al(): void;
}
/**
 * @hidden
 */
export declare class NumericRadiusAxisView extends NumericAxisBaseView {
    static $t: Type;
    protected bm: NumericRadiusAxis;
    constructor(a: NumericRadiusAxis);
    al(): void;
}
