import { Brush } from "igniteui-react-core";
import { XYChart } from "./XYChart";
import { DomWrapper } from "igniteui-react-core";
import { EventArgs, IList, Type } from "igniteui-react-core";
import { IZoomSlider } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { DomainType } from "./DomainType";
import { FinancialChartVolumeType } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode } from "./FinancialChartYAxisMode";
import { FinancialChartType } from "./FinancialChartType";
import { HorizontalAlignment } from "igniteui-react-core";
import { FinancialIndicatorTypeCollection } from "./FinancialIndicatorTypeCollection";
import { FinancialOverlayTypeCollection } from "./FinancialOverlayTypeCollection";
import { FinancialChartZoomSliderType } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-react-core";
import { IndicatorDisplayTypeCollection } from "./IndicatorDisplayTypeCollection";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { CustomIndicatorNameCollection } from "./CustomIndicatorNameCollection";
import { IChartLegend } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { Series } from "./Series";
import { Axis } from "./Axis";
import { DataSeries } from "igniteui-react-core";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { MarkerType } from "./MarkerType";
import { IZoomableCategoryAxis } from "./IZoomableCategoryAxis";
import { TitleSettings } from "./TitleSettings";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType } from "igniteui-react-core";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorVisualData } from "./FinancialChartRangeSelectorVisualData";
/**
 * @hidden
 */
export declare class FinancialChart extends XYChart {
    static $t: Type;
    protected t9(a: string, b: any, c: any): void;
    private am0;
    private amz;
    private amw;
    private am9;
    private age;
    provideGrid(a: DomWrapper): void;
    onDocumentClick(a: Event): void;
    private ajc;
    private aja;
    private ai7;
    private ai9;
    private ajb;
    private ai8;
    getContext(): FinancialChartContext;
    provideContainer(a: any): void;
    private ank;
    private any;
    private amg;
    private anw;
    setGridRows(): void;
    protected ti(): void;
    private ang;
    private anh;
    private anq;
    private amf;
    private am6;
    protected tf(a: XamDataChart): void;
    private an1;
    private an4;
    private an2;
    private an3;
    aio(): number;
    tr(source_: any, a: number, b: any): void;
    ts(source_: any, a: number, b: any): void;
    tq(source_: any): void;
    tu(source_: any, a: number, b: any, c: any): void;
    protected tl(a: Series, b: number): void;
    private afk;
    private get afl();
    private set afl(value);
    private aju;
    get aj1(): any;
    set aj1(a: any);
    private ajv;
    get aj2(): any;
    set aj2(a: any);
    private ajr;
    get ajy(): any;
    set ajy(a: any);
    private ajw;
    get aj3(): any;
    set aj3(a: any);
    private ajx;
    get aj4(): any;
    set aj4(a: any);
    private ajs;
    get ajz(): any;
    set ajz(a: any);
    private ajt;
    get aj0(): any;
    set aj0(a: any);
    private ag2;
    get ag3(): IZoomSlider;
    set ag3(a: IZoomSlider);
    protected get_je(): number;
    protected set_je(a: number): void;
    protected get_gt(): boolean;
    protected set_gt(a: boolean): void;
    private aic;
    get ait(): number;
    set ait(a: number);
    constructor();
    protected xp(): Axis;
    protected xq(): Axis;
    onAttachedToUI(): void;
    onDetachedFromUI(): void;
    protected bg(a: DataSeries): DataSeriesType;
    protected get_hi(): List$1<DataSeriesType>;
    protected get hi(): List$1<DataSeriesType>;
    protected get_hh(): List$1<IDataSeriesAdapterRule>;
    protected get hh(): List$1<IDataSeriesAdapterRule>;
    private ae7;
    private agl;
    private ae6;
    protected sw(): void;
    protected ss(a: Series, b: number): void;
    protected cv(a: Series): MarkerType;
    protected ur(a: DataSeries): void;
    protected uu(): void;
    private afp;
    private afo;
    private afy;
    private afr;
    private akd;
    private ae8;
    private agm;
    private ags;
    private agt;
    private agr;
    private agu;
    private get ahb();
    private af8;
    private get af9();
    private get ahe();
    private af6;
    private get af7();
    private get ahc();
    private aga;
    private get agb();
    private get ahd();
    private agf;
    private get agg();
    protected c6(a: DataSeries, b: DataSeriesType): Series;
    protected ut(): void;
    protected ac1(a: (arg1: Axis) => void, b: string): void;
    protected ac6(a: (arg1: Axis) => void, b: boolean): void;
    protected am8(a: (arg1: IZoomableCategoryAxis) => void): void;
    protected ac4(a: (arg1: TitleSettings) => void): void;
    protected ac9(a: (arg1: TitleSettings) => void): void;
    protected ac7(a: (arg1: AxisLabelSettings) => void): void;
    protected ac2(a: (arg1: AxisLabelSettings) => void): void;
    protected te(a: XamDataChart): void;
    private static ajp;
    private aj5;
    private ak8;
    private amq;
    private amc;
    private amd;
    private ami;
    private aml;
    private amj;
    private amk;
    private amm;
    private ajj;
    protected s4(a: (arg1: Series, arg2: number) => void): void;
    private agy;
    private get volumeChart();
    private set volumeChart(value);
    private anb;
    private ahf;
    private ahj;
    private ahg;
    private ahi;
    private ana;
    private agv;
    private agx;
    private ans;
    k0(): any;
    aka(): string;
    private agw;
    private anr;
    private aho;
    private anp;
    protected tb(): void;
    protected get_gz(): boolean;
    protected get ahu(): boolean;
    private anx;
    private anc;
    protected tz(a: (arg1: XamDataChart) => void, b: boolean, c: string): void;
    private amo;
    private anl;
    private get aht();
    private amp;
    private ahk;
    private anf;
    private amt;
    private amy;
    private amx;
    private amr;
    private ams;
    private am2;
    private am5;
    private am3;
    private ame;
    private anj;
    private anv;
    private amu;
    private ant;
    private ahn;
    private am1;
    private amn;
    private ann;
    private anm;
    private ane;
    private amv;
    private ahv;
    private anu;
    private amh;
    private ano;
    protected uz(a: Series, b: Series, c: DataSeries): void;
    private akc;
    protected acw(a: Axis): void;
    protected acy(a: Axis): void;
    private am4;
    protected tj(a: Series, b: number): void;
    protected tk(a: Series, b: number): void;
    protected t5(a: string, b: any, c: any): void;
    protected get_b5(): DomainType;
    get b5(): DomainType;
    private aha;
    get ahs(): boolean;
    set ahs(a: boolean);
    private aji;
    get ajq(): number;
    set ajq(a: number);
    private aij;
    get ai2(): number;
    set ai2(a: number);
    private ail;
    get ai4(): number;
    set ai4(a: number);
    private aik;
    get ai3(): number;
    set ai3(a: number);
    private aim;
    get ai5(): number;
    set ai5(a: number);
    get ai1(): number;
    get ai0(): number;
    private afq;
    get afs(): FinancialChartVolumeType;
    set afs(a: FinancialChartVolumeType);
    private aft;
    get afu(): FinancialChartXAxisMode;
    set afu(a: FinancialChartXAxisMode);
    private aie;
    get aiv(): number;
    set aiv(a: number);
    private aih;
    get aiy(): number;
    set aiy(a: number);
    private aif;
    get aiw(): number;
    set aiw(a: number);
    private aig;
    get aix(): number;
    set aix(a: number);
    private aii;
    get aiz(): number;
    set aiz(a: number);
    private afv;
    get afw(): FinancialChartYAxisMode;
    set afw(a: FinancialChartYAxisMode);
    private ag5;
    get ahl(): boolean;
    set ahl(a: boolean);
    private afm;
    get afn(): FinancialChartType;
    set afn(a: FinancialChartType);
    protected get_adf(): HorizontalAlignment;
    protected set_adf(a: HorizontalAlignment): void;
    private ag6;
    get ahm(): boolean;
    set ahm(a: boolean);
    private af0;
    get af1(): FinancialIndicatorTypeCollection;
    set af1(a: FinancialIndicatorTypeCollection);
    private af2;
    get af3(): FinancialOverlayTypeCollection;
    set af3(a: FinancialOverlayTypeCollection);
    private ahx;
    private get indicatorCharts();
    private set indicatorCharts(value);
    private ag8;
    get ahq(): boolean;
    set ahq(a: boolean);
    protected get_jm(): number;
    protected set_jm(a: number): void;
    private static readonly all;
    private ag7;
    get ahp(): boolean;
    set ahp(a: boolean);
    private static readonly alw;
    private ag9;
    get ahr(): boolean;
    set ahr(a: boolean);
    private agz;
    get zoomSliderChart(): XamDataChart;
    set zoomSliderChart(a: XamDataChart);
    private agk;
    private get zoomSliderAxis();
    private set zoomSliderAxis(value);
    private ae5;
    private get zoomSliderXAxis();
    private set zoomSliderXAxis(value);
    private afx;
    get afz(): FinancialChartZoomSliderType;
    set afz(a: FinancialChartZoomSliderType);
    private aeo;
    get aew(): BrushCollection;
    set aew(a: BrushCollection);
    private aep;
    get aex(): BrushCollection;
    set aex(a: BrushCollection);
    private aeq;
    get aey(): BrushCollection;
    set aey(a: BrushCollection);
    private aer;
    get aez(): BrushCollection;
    set aez(a: BrushCollection);
    private aet;
    get ae1(): BrushCollection;
    set ae1(a: BrushCollection);
    private aes;
    get ae0(): BrushCollection;
    set ae0(a: BrushCollection);
    private aen;
    get aev(): BrushCollection;
    set aev(a: BrushCollection);
    private aem;
    get aeu(): BrushCollection;
    set aeu(a: BrushCollection);
    private aid;
    get aiu(): number;
    set aiu(a: number);
    private aib;
    get ais(): number;
    set ais(a: number);
    private aia;
    get air(): number;
    set air(a: number);
    private ah9;
    get aiq(): number;
    set aiq(a: number);
    private agc;
    get agd(): IndicatorDisplayTypeCollection;
    set agd(a: IndicatorDisplayTypeCollection);
    private aje;
    get ajl(): number;
    set ajl(a: number);
    private ah8;
    get aip(): number;
    set aip(a: number);
    private ajh;
    get ajo(): number;
    set ajo(a: number);
    private ajf;
    get ajm(): number;
    set ajm(a: number);
    private ajd;
    get ajk(): number;
    set ajk(a: number);
    private ajg;
    get ajn(): number;
    set ajn(a: number);
    private afh;
    get afj(): FinancialChartRangeSelectorOptionCollection;
    set afj(a: FinancialChartRangeSelectorOptionCollection);
    afi: FinancialChartRangeSelectorOptionCollection;
    private afd;
    get customIndicatorNames(): CustomIndicatorNameCollection;
    set customIndicatorNames(a: CustomIndicatorNameCollection);
    applyCustomIndicators: (sender: any, e: FinancialChartCustomIndicatorArgs) => void;
    protected get_g0(): boolean;
    protected set_g0(a: boolean): void;
    private anz;
    get an0(): Brush;
    set an0(a: Brush);
    private ain;
    get ai6(): number;
    set ai6(a: number);
    private ag4;
    get ahh(): boolean;
    set ahh(a: boolean);
    private af4;
    get af5(): IChartLegend;
    set af5(a: IChartLegend);
    private ae4;
    private get xAxis();
    private set xAxis(value);
    private agj;
    private get yAxis();
    private set yAxis(value);
    private agi;
    private get volumeAxis();
    private set volumeAxis(value);
    private ae3;
    private get volumeXAxis();
    private set volumeXAxis(value);
    private agh;
    private get indicatorAxis();
    private set indicatorAxis(value);
    private ae2;
    private get indicatorXAxis();
    private set indicatorXAxis(value);
    private ahw;
    private get ahz();
    private set ahz(value);
    private ahy;
    private get ah1();
    private set ah1(value);
    private ah5;
    get ah7(): Date;
    set ah7(a: Date);
    private ah4;
    get ah6(): Date;
    set ah6(a: Date);
    private ah2;
    get xAxisBreaks(): ObservableCollection$1<any>;
}
/**
 * @hidden
 */
export declare class FinancialChartToolbar extends TemplatedHtmlControl {
    static $t: Type;
    bg(a: DomWrapper): void;
    bl(a: Event): void;
    private o;
    constructor(a: FinancialChart, b: any);
    private r;
    get s(): FinancialChartRangeSelector;
    set s(a: FinancialChartRangeSelector);
    private z;
    get aa(): FinancialChartTypePicker;
    set aa(a: FinancialChartTypePicker);
    private p;
    get q(): FinancialChartIndicatorMenu;
    set q(a: FinancialChartIndicatorMenu);
    private bm;
    private bh;
    private bi;
    private bj;
    w: FinancialChartToolbarViewModel;
    v(): FinancialChartToolbarContext;
    l(a: any): void;
    private bk;
    private aq;
    get au(): Date;
    set au(a: Date);
    private ap;
    get at(): Date;
    set at(a: Date);
    private ao;
    get as(): Date;
    set as(a: Date);
    private an;
    get ar(): Date;
    set ar(a: Date);
    rangeChanged: (sender: any, e: EventArgs) => void;
    chartTypeChanged: (sender: any, e: EventArgs) => void;
    trendLineTypeChanged: (sender: any, e: EventArgs) => void;
    volumeTypeChanged: (sender: any, e: EventArgs) => void;
    indicatorTypesChanged: (sender: any, e: EventArgs) => void;
    overlayTypesChanged: (sender: any, e: EventArgs) => void;
    bn(): void;
    private x;
    get y(): FinancialChartType;
    set y(a: FinancialChartType);
    private ah;
    get ai(): TrendLineType;
    set ai(a: TrendLineType);
    private ab;
    get ac(): FinancialChartVolumeType;
    set ac(a: FinancialChartVolumeType);
    private ad;
    get ae(): FinancialIndicatorTypeCollection;
    set ae(a: FinancialIndicatorTypeCollection);
    private af;
    get ag(): FinancialOverlayTypeCollection;
    set ag(a: FinancialOverlayTypeCollection);
    static am(a: IList, b: IList): boolean;
    aj(): FinancialChartToolbarVisualData;
    private t;
    get u(): FinancialChartRangeSelectorOptionCollection;
    set u(a: FinancialChartRangeSelectorOptionCollection);
    private ak;
    get al(): boolean;
    set al(a: boolean);
}
/**
 * @hidden
 */
export declare class FinancialChartRangeSelector extends TemplatedHtmlControl {
    static $t: Type;
    private static x;
    q: FinancialChartRangeSelectorViewModel;
    get v(): Date;
    set v(a: Date);
    get u(): Date;
    set u(a: Date);
    get t(): Date;
    set t(a: Date);
    get s(): Date;
    set s(a: Date);
    ab(): void;
    constructor(a: any);
    l(a: any): void;
    private z;
    rangeChanged: (sender: any, e: EventArgs) => void;
    r(): FinancialChartRangeSelectorVisualData;
    get o(): FinancialChartRangeSelectorOptionCollection;
    set o(a: FinancialChartRangeSelectorOptionCollection);
    private aa;
    private p;
}
