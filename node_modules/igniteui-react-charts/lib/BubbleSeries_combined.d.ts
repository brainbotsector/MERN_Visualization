import { ScatterBase } from "./ScatterBase";
import { IScaleLegendSeries } from "igniteui-react-core";
import { ISupportsSizeScale } from "./ISupportsSizeScale";
import { ISupportsFillScale } from "./ISupportsFillScale";
import { Rect } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { UIElement } from "igniteui-react-core";
import { Type } from "igniteui-react-core";
import { ActualRange } from "./ActualRange";
import { Series } from "./Series";
import { SizeScale } from "./SizeScale";
import { BrushScale } from "./BrushScale";
import { SeriesView } from "./SeriesView";
import { MarkerFillMode } from "./MarkerFillMode";
import { ScatterFrame } from "./ScatterFrame";
import { IChartLegend } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { ScatterBaseView } from "./ScatterBaseView";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { Marker } from "./Marker";
import { BrushSelectionMode } from "./BrushSelectionMode";
import { MarkerManagerBase } from "./MarkerManagerBase";
/**
 * @hidden
 */
export declare class BubbleSeries extends ScatterBase implements IScaleLegendSeries, ISupportsSizeScale, ISupportsFillScale {
    static $t: Type;
    protected bb(): Series;
    protected get_d4(): boolean;
    protected ci(): SeriesView;
    px(a: SeriesView): void;
    aax: BubbleSeriesView;
    protected i1(): number;
    vg(): MarkerFillMode;
    constructor();
    private acn;
    private acm;
    isAttachedTo(a: IChartLegend): boolean;
    protected d3(): boolean;
    protected oz(a: (arg1: any) => void): void;
    get aa4(): IFastItemColumn$1<number>;
    aba: List$1<UIElement>;
    private acl;
    get legendReady(): boolean;
    get minScaleText(): string;
    get maxScaleText(): string;
    forScaleColors(a: (arg1: Brush, arg2: number) => void): boolean;
    abz: string;
    j5(a: any, b: string): any;
    li(a: string): string;
    get aa6(): IFastItemColumn$1<number>;
    set aa6(a: IFastItemColumn$1<number>);
    private aa2;
    aaz: SizeScale;
    abp: string;
    private aa1;
    get aa5(): IFastItemColumn$1<any>;
    set aa5(a: IFastItemColumn$1<any>);
    abk: string;
    aaw: BrushScale;
    private aa0;
    get aa3(): IFastItemColumn$1<number>;
    set aa3(a: IFastItemColumn$1<number>);
    aa7: boolean;
    aa8: boolean;
    abe: number;
    abd: number;
    aa9: boolean;
    zc(a: ScatterBaseView, b: ScatterFrame, c: number, d: Rect, e: Rect): void;
    zm(a: ScatterFrame, b: ScatterBaseView): void;
    private ab4;
    static abb(a: number, b: number, c: number, d: number, e: number): number;
    static abc(a: number, b: number, c: number, d: number, logBase_: number, e: number): number;
    gw(a: Rect, b: Rect, c: SeriesView): boolean;
    protected x0(a: string, b: FastItemsSourceEventAction): boolean;
    private ab3;
    protected oc(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    o9(): void;
    pg(): void;
    protected p5(a: any, b: string, c: any, d: any): void;
    updateSizeScaleGlobals(): void;
    updateFillScaleGlobals(): void;
    aav(a: SizeScale): ActualRange;
    aau(): ActualRange;
    aay: SizeScale;
    ab6(a: List$1<Marker>, b: List$1<number>, c: Rect, d: boolean): void;
    ab5(a: List$1<Marker>): void;
    abv: string;
    abg: string;
    abx: string;
    abi: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    get actualMarkerBrush(): Brush;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class CustomPaletteBrushScale extends BrushScale {
    static $t: Type;
    constructor();
    brushSelectionMode: BrushSelectionMode;
    getBrush1(a: number, b: number): Brush;
    protected get_isReady(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class BubbleSeriesView extends ScatterBaseView {
    static $t: Type;
    protected di: BubbleSeries;
    constructor(a: BubbleSeries);
    au(): void;
    protected cx(): MarkerManagerBase;
    dk(): void;
    dl(): void;
    dj(): void;
    getDefaultTooltipTemplate(): string;
}
