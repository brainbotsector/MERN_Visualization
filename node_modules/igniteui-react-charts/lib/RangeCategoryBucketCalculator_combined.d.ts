import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { Type } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { CategorySeries } from "./CategorySeries";
import { IIsCategoryBased } from "./IIsCategoryBased";
import { IHasHighLowValueCategory } from "./IHasHighLowValueCategory";
import { RangeCategoryFramePreparer } from "./RangeCategoryFramePreparer";
import { CategoryMode } from "./CategoryMode";
import { ICategoryScaler } from "./ICategoryScaler";
import { IScaler } from "./IScaler";
import { IBucketizer } from "./IBucketizer";
import { CategorySeriesView } from "./CategorySeriesView";
import { CategoryFrame } from "./CategoryFrame";
import { SeriesView } from "./SeriesView";
import { List$1 } from "igniteui-react-core";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { Polyline } from "igniteui-react-core";
import { Polygon } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { IDetectsCollisions } from "./IDetectsCollisions";
import { RenderSurface } from "./RenderSurface";
/**
 * @hidden
 */
export declare class RangeCategoryBucketCalculator extends CategoryBucketCalculator {
    static $t: Type;
    j: RangeCategorySeriesView;
    constructor(a: RangeCategorySeriesView);
    getBucketWithoutUnknowns(a: number): number[];
    getBucket(a: number): number[];
    private l;
    private k;
    private i;
    private h;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare abstract class RangeCategorySeries extends CategorySeries implements IIsCategoryBased, IHasHighLowValueCategory {
    static $t: Type;
    protected ci(): SeriesView;
    getHostReferenceValue(): number;
    px(a: SeriesView): void;
    yu: RangeCategorySeriesView;
    constructor();
    private _RangeFramePreparer;
    get RangeFramePreparer(): RangeCategoryFramePreparer;
    set RangeFramePreparer(a: RangeCategoryFramePreparer);
    y7: string;
    protected fv(): boolean;
    protected hb(): List$1<SeriesLayerPropertyOverlay>;
    private za;
    private y9;
    j5(a: any, b: string): any;
    li(a: string): string;
    get lowColumn(): IFastItemColumn$1<number>;
    set lowColumn(a: IFastItemColumn$1<number>);
    private yw;
    y4: string;
    get highColumn(): IFastItemColumn$1<number>;
    set highColumn(a: IFastItemColumn$1<number>);
    private yv;
    y2: string;
    y0: string;
    protected xc(): CategoryTransitionInMode;
    yl(a: CategoryFrame, b: CategorySeriesView): void;
    protected zb(a: Polyline, b: Polygon, c: Polyline, d: number, e: List$1<number[]>, f: boolean): void;
    ar(a: Rect): AxisRange;
    fx(a: any): boolean;
    protected p5(a: any, b: string, c: any, d: any): void;
    aq(a: Axis): AxisRange;
    protected oc(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    gw(a: Rect, b: Rect, c: SeriesView): boolean;
    yi(a: CategoryFrame, b: CategorySeriesView): void;
    get currentCategoryMode(): CategoryMode;
    get scaler(): ICategoryScaler;
    get yScaler(): IScaler;
    get bucketizer(): IBucketizer;
    get currentMode2Index(): number;
    provideCollisionDetector(): IDetectsCollisions;
    get mayContainUnknowns(): boolean;
    qo(a: Rect, b: RenderSurface): void;
    private ys;
    ql(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    id(): number;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class RangeCategorySeriesView extends CategorySeriesView {
    static $t: Type;
    c3: RangeCategorySeries;
    constructor(a: RangeCategorySeries);
    c4(a: Polyline, b: Polygon, c: Polyline, d: number, e: List$1<number[]>, f: boolean): void;
    cv(): CategoryBucketCalculator;
}
