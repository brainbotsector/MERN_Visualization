/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { MarkerSeries } from "./MarkerSeries";
import { ISupportsErrorBars_$type } from "./ISupportsErrorBars";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { ScatterAxisInfoCache } from "./ScatterAxisInfoCache";
import { NumericXAxis } from "./NumericXAxis";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { Series } from "./Series";
import { TrendLineType_$type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { ScatterItemSearchMode_$type } from "./ScatterItemSearchMode";
import { ScatterErrorBarSettings } from "./ScatterErrorBarSettings";
import { HighlightingInfo } from "igniteui-react-core";
import { ScatterFrame } from "./ScatterFrame";
import { Base, runOn, delegateCombine, enumGetBox, Number_$type, typeCast, fromEnum, Point_$type, markType, markDep, PointUtil } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { Clipper } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { Dictionary$2 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { GeometryUtil } from "igniteui-react-core";
import { HashPool$2 } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { TrendResolutionParams } from "./TrendResolutionParams";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
import { Thickness } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { AssigningScatterStyleEventArgs } from "./AssigningScatterStyleEventArgs";
import { AssigningScatterMarkerStyleEventArgs } from "./AssigningScatterMarkerStyleEventArgs";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { ErrorBarsHelper } from "./ErrorBarsHelper";
import { PathGeometry } from "igniteui-react-core";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core";
import { boxArray$1, arrayShallowClone } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { DataTemplateMeasureInfo } from "igniteui-react-core";
import { NumericMarkerManager } from "./NumericMarkerManager";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
var ScatterBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ScatterBase, _super);
    function ScatterBase() {
        var _this = _super.call(this) || this;
        _this.w5 = null;
        _this.xo = null;
        _this.xp = null;
        _this.aas = null;
        _this.aat = null;
        _this.xe = 1;
        _this.wv = null;
        _this.ww = null;
        _this.xb = null;
        _this.xd = null;
        _this.w9 = null;
        _this.xu = false;
        _this.xt = false;
        _this.xm = null;
        _this.xn = null;
        _this.assigningScatterStyle = null;
        _this.assigningScatterMarkerStyle = null;
        _this.xi = null;
        _this.xc = null;
        _this.w8 = null;
        _this.xs = true;
        _this.x7 = 0;
        _this.x8 = 0;
        _this.x9 = 0;
        _this.ya = 0;
        _this.xf = _this.xg();
        _this.xi = new ScatterSeriesRenderManager();
        _this.xc = new ScatterFrame();
        _this.aat = Rect.empty;
        _this.aas = Rect.empty;
        return _this;
    }
    ScatterBase.prototype.ci = function () {
        return new ScatterBaseView(this);
    };
    ScatterBase.prototype.n4 = function () {
        _super.prototype.n4.call(this);
        this.xAxis = null;
        this.yAxis = null;
    };
    ScatterBase.prototype.px = function (a) {
        _super.prototype.px.call(this, a);
        this.w6 = a;
    };
    ScatterBase.prototype.get_fh = function () {
        return true;
    };
    ScatterBase.prototype.ag = function () {
        return [this.xAxis, this.yAxis];
    };
    ScatterBase.prototype.j5 = function (a, b) {
        var c = this.mh(b);
        if (c == ScatterBase.$$p[12]) {
            return this.j6(a, b, this.y1);
        }
        if (c == ScatterBase.$$p[16]) {
            return this.j6(a, b, this.y9);
        }
        if (c == ScatterBase.$$p[1]) {
            return this.j6(a, b, this.yl);
        }
        if (c == ScatterBase.$$p[2]) {
            return this.j6(a, b, this.yn);
        }
        return null;
    };
    ScatterBase.prototype.li = function (a) {
        var b = this.mh(a);
        if (b == ScatterBase.$$p[12]) {
            return this.y1;
        }
        if (b == ScatterBase.$$p[16]) {
            return this.y9;
        }
        if (b == ScatterBase.$$p[1]) {
            return this.yl;
        }
        if (b == ScatterBase.$$p[2]) {
            return this.yn;
        }
        return _super.prototype.li.call(this, a);
    };
    ScatterBase.prototype.dz = function (a, b, c, d) {
        var _this = this;
        if (!this.hasMarkers) {
            return false;
        }
        var e = this.xAxis;
        var f = new ScalerParams(1, this.c1.vh, this.u9, e.ch);
        f.c = this.getEffectiveViewport1(this.cl);
        var g = this.yAxis;
        var h = new ScalerParams(1, this.c1.vh, this.u9, g.ch);
        h.c = this.getEffectiveViewport1(this.cl);
        a.clear();
        this.vl.ci(function (i) {
            if (i._visibility == 0) {
                var j = new SeriesPointOfInterest();
                var k = i.n;
                var l = i.o;
                if (k < _this.u9.left || k > _this.u9.right || l < _this.u9.top || l > _this.u9.bottom) {
                    return;
                }
                j.b = e.em(k, f);
                j.c = g.em(l, h);
                j.a = i.content;
                a.add(j);
            }
        });
        return true;
    };
    ScatterBase.prototype.bt = function () {
        if (this.bu == 0) {
            if (this.yh <= 2000) {
                return 1;
            }
            else {
                return _super.prototype.bt.call(this);
            }
        }
        else {
            return _super.prototype.bt.call(this);
        }
    };
    ScatterBase.prototype.u7 = function (a) {
        if (!this.hasMarkers || !this.vr()) {
            return Rect.empty;
        }
        var b = this.vl.b1(this.up(a));
        if (b != null) {
            return this.vl.cs(b);
        }
        return Rect.empty;
    };
    ScatterBase.prototype.gf = function (a, b) {
        if (this.vs(a, b)) {
            return true;
        }
        return false;
    };
    Object.defineProperty(ScatterBase.prototype, "xq", {
        get: function () {
            return this.xo;
        },
        set: function (a) {
            if (this.xo != a) {
                var b = this.xq;
                this.xo = a;
                this.raisePropertyChanged("XColumn", b, this.xq);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScatterBase.prototype, "xr", {
        get: function () {
            return this.xp;
        },
        set: function (a) {
            if (this.xp != a) {
                var b = this.xr;
                this.xp = a;
                this.raisePropertyChanged("YColumn", b, this.xr);
            }
        },
        enumerable: false,
        configurable: true
    });
    ScatterBase.prototype.fv = function () {
        return this.highlightedItemsSource != null || (this.yl != null && this.yn != null);
    };
    ScatterBase.prototype.x5 = function () {
        return false;
    };
    ScatterBase.prototype.hb = function () {
        var a = _super.prototype.hb.call(this);
        {
            var b = ((function () {
                var $ret = new SeriesLayerPropertyOverlay();
                $ret.ad = "YMemberPath";
                $ret.p = true;
                $ret.y = "HighlightedYMemberPath";
                $ret.q = true;
                return $ret;
            })());
            b.valueResolving = delegateCombine(b.valueResolving, runOn(this, this.zg));
            a.add(b);
        }
        {
            var c = ((function () {
                var $ret = new SeriesLayerPropertyOverlay();
                $ret.ad = "XMemberPath";
                $ret.p = true;
                $ret.y = "HighlightedXMemberPath";
                $ret.q = true;
                return $ret;
            })());
            c.valueResolving = delegateCombine(c.valueResolving, runOn(this, this.zf));
            a.add(c);
        }
        if (this.x5()) {
            var d = ((function () {
                var $ret = new SeriesLayerPropertyOverlay();
                $ret.r = true;
                $ret.ad = "DashArray";
                $ret.p = true;
                $ret.x = ((function () {
                    var $ret = new DoubleCollection();
                    $ret.add(5);
                    $ret.add(5);
                    return $ret;
                })());
                $ret.q = true;
                return $ret;
            })());
            a.add(d);
        }
        if (!this.x5()) {
            var e = ((function () {
                var $ret = new SeriesLayerPropertyOverlay();
                $ret.r = true;
                $ret.ad = "Brush";
                $ret.p = true;
                $ret.y = "ActualBrush";
                $ret.q = true;
                return $ret;
            })());
            e.valueResolving = delegateCombine(e.valueResolving, runOn(this, this.qu));
            a.add(e);
        }
        if (!this.x5()) {
            var f = ((function () {
                var $ret = new SeriesLayerPropertyOverlay();
                $ret.r = true;
                $ret.ad = "Outline";
                $ret.p = true;
                $ret.y = "ActualOutline";
                $ret.q = true;
                return $ret;
            })());
            f.valueResolving = delegateCombine(f.valueResolving, runOn(this, this.qu));
            a.add(f);
        }
        return a;
    };
    ScatterBase.prototype.zf = function (a, b) {
        if (this.yl != null) {
            b.value = this.yl;
            return;
        }
        b.value = this.y1;
    };
    ScatterBase.prototype.zg = function (a, b) {
        if (this.yn != null) {
            b.value = this.yn;
            return;
        }
        b.value = this.y9;
    };
    Object.defineProperty(ScatterBase.prototype, "aap", {
        get: function () {
            return this.c(ScatterBase.z0);
        },
        set: function (a) {
            this.h(ScatterBase.z0, a);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScatterBase.prototype, "GetErrorBarsXAxis", {
        get: function () {
            return this.xAxis;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScatterBase.prototype, "GetErrorBarsYAxis", {
        get: function () {
            return this.yAxis;
        },
        enumerable: false,
        configurable: true
    });
    ScatterBase.prototype.o6 = function () {
        _super.prototype.o6.call(this);
        if (this.xAxis != null) {
            this.xAxis.h8(false);
        }
        if (this.yAxis != null) {
            this.yAxis.h8(false);
        }
    };
    ScatterBase.prototype.p5 = function (a, b, c, d) {
        _super.prototype.p5.call(this, a, b, c, d);
        if (this.w6.c0.g$b(a, b, c, d)) {
            this.qm(false);
            this.ph();
        }
        switch (b) {
            case ScatterBase.$$p[10]:
            case ScatterBase.$$p[14]:
            case ScatterBase.$$p[11]:
            case ScatterBase.$$p[15]:
                this.pb();
                break;
            case "FastItemsSource":
                if (typeCast(IFastItemsSource_$type, c) != null) {
                    c.deregisterColumn(this.xq);
                    c.deregisterColumn(this.xr);
                    this.xq = null;
                    this.xr = null;
                }
                if (typeCast(IFastItemsSource_$type, d) != null) {
                    this.xq = this.da(this.y1);
                    this.xr = this.da(this.y9);
                }
                if ((this.yAxis != null && !this.yAxis.c1()) || (this.xAxis != null && !this.xAxis.c1())) {
                    this.qm(this.f0 && c != null);
                }
                break;
            case ScatterBase.$$p[9]:
                if (c != null) {
                    c.b0(this);
                }
                if (d != null) {
                    d.ct(this);
                }
                if ((this.xAxis != null && !this.xAxis.c1()) || (d == null && c != null)) {
                    this.qm(false);
                }
                this.ph();
                break;
            case ScatterBase.$$p[13]:
                if (c != null) {
                    c.b0(this);
                }
                if (d != null) {
                    d.ct(this);
                }
                if ((this.yAxis != null && !this.yAxis.c1()) || (d == null && c != null)) {
                    this.qm(false);
                }
                this.ph();
                break;
            case ScatterBase.$$p[12]:
                if (this.dd != null) {
                    this.dd.deregisterColumn(this.xq);
                    this.xq = this.da(this.y1);
                }
                break;
            case "XColumn":
                this.w6.c0.g$i();
                if (this.xAxis != null && !this.xAxis.c1()) {
                    this.qm(this.f0 && this.dv);
                }
                break;
            case ScatterBase.$$p[16]:
                if (this.dd != null) {
                    this.dd.deregisterColumn(this.xr);
                    this.xr = this.da(this.y9);
                }
                break;
            case "YColumn":
                this.w6.c0.g$i();
                if (this.yAxis != null && !this.yAxis.c1()) {
                    this.qm(this.f0 && this.dv);
                }
                break;
            case ScatterBase.$$p[7]:
                this.qm(false);
                this.ph();
                break;
            case ScatterBase.$$p[8]:
                this.qm(false);
                this.ph();
                break;
            case "TransitionProgress":
                this.xd.c(this.i6, this.xb, this.w9);
                this.zb();
                try {
                    if (this.dt(this.cl)) {
                        return;
                    }
                    if ((Math.round(this.i6 * 100000) / 100000) == 1) {
                        this.zx(this.w9, this.w6);
                    }
                    else {
                        this.zx(this.xd, this.w6);
                    }
                    if (this.c1 != null) {
                        this.c1.p6(this);
                    }
                }
                finally {
                    this.zy();
                }
                break;
            case "TrendLineBrush":
                this.qb(b);
                break;
            case ScatterBase.$$p[0]:
                if (this.w7 != null) {
                    this.w7.r = this;
                }
                this.qm(false);
                this.ph();
                break;
            case "TrendLineType":
                this.ph();
                break;
            case ScatterBase.$$p[4]:
                this.xu = this.x2();
                this.qm(false);
                break;
            case ScatterBase.$$p[3]:
                this.xt = this.x1();
                this.qm(false);
                break;
            case ScatterBase.$$p[5]:
                this.xf = this.xg();
                break;
        }
    };
    ScatterBase.prototype.x2 = function () {
        return this.xy;
    };
    ScatterBase.prototype.x1 = function () {
        return this.xx;
    };
    ScatterBase.prototype.xw = function (a) {
        if (typeCast(NumericYAxis.$, a) !== null) {
            return true;
        }
        return false;
    };
    ScatterBase.prototype.xv = function (a) {
        if (typeCast(NumericXAxis.$, a) !== null) {
            return true;
        }
        return false;
    };
    ScatterBase.prototype.zy = function () {
        this.aas = Rect.empty;
        this.aat = Rect.empty;
    };
    ScatterBase.prototype.zb = function () {
        var a = this.getViewInfo(this.aas, this.aat);
        this.aas = a.p0;
        this.aat = a.p1;
    };
    ScatterBase.prototype.x0 = function (a, b) {
        if (b != 3) {
            return true;
        }
        if (a == null) {
            return true;
        }
        if (this.y1 == a || this.y9 == a) {
            return true;
        }
        return false;
    };
    ScatterBase.prototype.oc = function (a, b, c, d) {
        var e = false;
        if (!this.x0(d, a)) {
            return;
        }
        this.w6.c0.g$e(a, b, c, d);
        if (this.xAxis != null && !this.xAxis.c1()) {
            e = true;
        }
        if (this.yAxis != null && !this.yAxis.c1()) {
            e = true;
        }
        if (a == 0 || a == 2 || a == 3 || a == 4) {
            this.xs = true;
        }
        else if (a == 1) {
            for (var f = b; f < b + c; f++) {
                this.x7 += this.xq.item(f);
                this.x8 += this.xr.item(f);
            }
            this.x9 = this.x7 / this.xq.count;
            this.ya = this.x8 / this.xr.count;
        }
        if (e) {
            this.qm(true);
        }
    };
    ScatterBase.prototype.zp = function (a) {
        this.zq(a, null);
    };
    ScatterBase.prototype.zq = function (a, b) {
        var e_1, _a, e_2, _b;
        var c = this.xq != null ? this.xq.count : 0;
        var d = this.xr != null ? this.xr.count : 0;
        var e = Math.min(c, d);
        if (e <= this.yh) {
            a.m.clear();
            var f = new List$1(OwnedPoint.$, 0);
            try {
                for (var _c = __values(fromEnum(a.u.values)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var g = _d.value;
                    f.add(g);
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return))
                        _a.call(_c);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
            var h_1 = this.dd;
            f.aa(function (i, j) {
                var k = h_1.indexOf(i.a);
                var l = h_1.indexOf(j.a);
                if (k < l) {
                    return -1;
                }
                if (k > l) {
                    return 1;
                }
                return 0;
            });
            if (b != null) {
                b.i = a.m;
            }
            try {
                for (var _e = __values(fromEnum(f)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var i = _f.value;
                    if (h_1.indexOf(i.a) >= 0) {
                        if (b != null) {
                            b.j(i.c);
                        }
                        else {
                            a.m.add({ $type: Point_$type, x: i.c.x, y: i.c.y });
                        }
                    }
                }
            }
            catch (e_2_1) {
                e_2 = { error: e_2_1 };
            }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return))
                        _b.call(_e);
                }
                finally {
                    if (e_2)
                        throw e_2.error;
                }
            }
        }
    };
    ScatterBase.prototype.aq = function (a) {
        if (a != null && a == this.xAxis && this.xq != null) {
            return new AxisRange(this.xq.minimum, this.xq.maximum);
        }
        if (a != null && a == this.yAxis && this.xr != null) {
            return new AxisRange(this.xr.minimum, this.xr.maximum);
        }
        return null;
    };
    ScatterBase.prototype.j2 = function (a) {
        var b = this.jj(a);
        if (this.dd != null && b >= 0 && b < this.dd.count) {
            return this.dd.item(b);
        }
        return null;
    };
    Object.defineProperty(ScatterBase.prototype, "xf", {
        get: function () {
            return this.xe;
        },
        set: function (a) {
            var b = this.xe;
            this.xe = a;
            if (b != this.xe) {
                this.raisePropertyChanged("ActualItemSearchMode", enumGetBox(ScatterItemSearchMode_$type, b), enumGetBox(ScatterItemSearchMode_$type, this.xe));
            }
        },
        enumerable: false,
        configurable: true
    });
    ScatterBase.prototype.xg = function () {
        if (this.xh != 0) {
            return this.xh;
        }
        return this.xz ? 4 : 1;
    };
    ScatterBase.prototype.jj = function (a) {
        var b = truncate(Math.round(this.h6(a)));
        return b;
    };
    ScatterBase.prototype.h6 = function (a) {
        switch (this.xf) {
            case 1: return this.yd(a);
            case 3: return this.ye(a);
            case 2: return this.yb(a);
            case 4: return this.yc(a);
        }
        return -1;
    };
    ScatterBase.prototype.yc = function (a) {
        return this.yf(a, false);
    };
    ScatterBase.prototype.yb = function (a) {
        var b = this.up(a);
        var c = b.x;
        var d = b.y;
        if (this.dd == null || this.xAxis == null || this.yAxis == null || this.xq == null || this.xr == null) {
            return -1;
        }
        if (this.dd.count > this.yg) {
            return -1;
        }
        this.ze();
        var e = this.wv;
        var f = this.ww;
        if (e == null || f == null) {
            return -1;
        }
        var g = 1.7976931348623157E+308;
        var h = -1;
        for (var i = 0; i < this.xq.count; i++) {
            var j = e[i];
            var k = f[i];
            var l = (c - j) * (c - j) + (d - k) * (d - k);
            if (l < g) {
                g = l;
                h = i;
            }
        }
        return h;
    };
    ScatterBase.prototype.ze = function () {
        var _this = this;
        var a = this.cl.by;
        var b = this.cl.bx;
        var c = this.getEffectiveViewport();
        if (this.w5 == null) {
            return;
        }
        var d = new ScalerParams(0, a, b, this.w5.d, c);
        var e = ((function () {
            var $ret = new ScalerParams(0, a, b, _this.w5.e, c);
            $ret.b = _this.id();
            return $ret;
        })());
        if (this.wv == null || this.ww == null) {
            var f = arrayShallowClone(this.xq.asArray());
            var g = arrayShallowClone(this.xr.asArray());
            this.xAxis.hn(boxArray$1(f), 0, f.length, d);
            this.yAxis.hn(boxArray$1(g), 0, g.length, e);
            this.wv = f;
            this.ww = g;
        }
    };
    ScatterBase.prototype.get_xz = function () {
        return false;
    };
    Object.defineProperty(ScatterBase.prototype, "xz", {
        get: function () {
            return this.get_xz();
        },
        enumerable: false,
        configurable: true
    });
    ScatterBase.prototype.yf = function (a, b) {
        if (!this.xz) {
            return -1;
        }
        var c = { $type: Point_$type, x: 0, y: 0 };
        var d = true;
        var e = this.xa();
        if (e == null) {
            return -1;
        }
        if (e.m == null) {
            return -1;
        }
        if (this.dd == null || this.dd.count > this.yg) {
            return -1;
        }
        this.ze();
        var f = this.wv;
        var g = this.ww;
        if (f == null || g == null) {
            return -1;
        }
        var h = this.up(a);
        var i = 1.7976931348623157E+308;
        var j = -1;
        for (var k = 0; k < this.wv.length; k++) {
            var l = { $type: Point_$type, x: this.wv[k], y: this.ww[k] };
            if (k > 0) {
                if (!b || e.j.containsKey(this.dd.item(k)) || e.j.containsKey(this.dd.item(k - 1))) {
                    var m = GeometryUtil.d(h, c, l);
                    if (m < i) {
                        i = m;
                        j = k;
                    }
                }
            }
            c = l;
        }
        if (j >= 0) {
            var n = { $type: Point_$type, x: this.wv[j], y: this.ww[j] };
            var o = { $type: Point_$type, x: this.wv[j - 1], y: this.ww[j - 1] };
            if (!b || (e.j.containsKey(this.dd.item(j)) && e.j.containsKey(this.dd.item(j - 1)))) {
                var p = GeometryUtil.i(h, o, n);
                return (j - 1) + p;
            }
            else if (e.j.containsKey(this.dd.item(j))) {
                return j;
            }
            else {
                return j - 1;
            }
        }
        return -1;
    };
    ScatterBase.prototype.ye = function (a) {
        return this.yf(a, true);
    };
    ScatterBase.prototype.yd = function (a) {
        var _this = this;
        var b = null;
        var c = 1.7976931348623157E+308;
        var d = this.up(a);
        var e = d.x;
        var f = d.y;
        if (this.w6.c1.e > this.yg) {
            return -1;
        }
        this.w6.c8(function (g) {
            if (g._visibility == 0) {
                var h = _this.w6.cs(g);
                var i = h.left + h.width / 2;
                var j = h.top + h.height / 2;
                var k = (e - i) * (e - i) + (f - j) * (f - j);
                if (k < c) {
                    c = k;
                    b = g;
                }
            }
        });
        if (b != null) {
            return b.ak;
        }
        return -1;
    };
    ScatterBase.prototype.uu = function (a, b, c) {
        var _this = this;
        if (this.xAxis == null || this.yAxis == null || this.xq == null || this.xr == null) {
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        var d = this.cl.by;
        var e = this.cl.bx;
        var f = this.getEffectiveViewport();
        var g = new ScalerParams(0, d, e, this.xAxis.ch, f);
        var h = ((function () {
            var $ret = new ScalerParams(0, d, e, _this.yAxis.ch, f);
            $ret.b = _this.id();
            return $ret;
        })());
        if (b) {
            var i = this.h6(a);
            if (i == -1) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            var j = truncate(Math.floor(i));
            var k = truncate(Math.ceil(i));
            if (j < 0) {
                j = 0;
            }
            if (k < 0) {
                k = 0;
            }
            if (k > this.dd.count - 1) {
                k = this.dd.count - 1;
            }
            if (j > this.dd.count - 1) {
                j = this.dd.count - 1;
            }
            if (k == j) {
                var l = this.xAxis.ej(this.xq.item(j), g);
                var m = this.yAxis.ej(this.xr.item(j), h);
                return { $type: Point_$type, x: l, y: m };
            }
            var n = i - Math.floor(i);
            var o = this.xAxis.ej(this.xq.item(j), g);
            var p = this.yAxis.ej(this.xr.item(j), h);
            var q = this.xAxis.ej(this.xq.item(k), g);
            var r = this.yAxis.ej(this.xr.item(k), h);
            var s = q - o;
            var t = r - p;
            return { $type: Point_$type, x: o + s * n, y: p + t * n };
        }
        else {
            var u = this.jj(a);
            if (u == -1) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            var v = this.xAxis.ej(this.xq.item(u), g);
            var w = this.yAxis.ej(this.xr.item(u), h);
            return { $type: Point_$type, x: v, y: w };
        }
    };
    ScatterBase.prototype.fx = function (a) {
        var _this = this;
        var b = this.c1 != null ? this.c1.vh : Rect.empty;
        b = b.copy();
        var c = this.c1 != null ? this.c1.vw : Rect.empty;
        var d = new Rect(0, 0, 0, 1, 1);
        var e = this.u3(this.cl);
        var f = new ScalerParams(0, d, d, this.xAxis.ch, e);
        var g = ((function () {
            var $ret = new ScalerParams(0, d, d, _this.yAxis.ch, e);
            $ret.b = _this.id();
            return $ret;
        })());
        var h = !b.isEmpty && !c.isEmpty && this.dd != null ? this.dd.indexOf(a) : -1;
        var i = this.xAxis != null && this.xq != null && h < this.xq.count ? this.xAxis.ej(this.xq.item(h), f) : NaN;
        var j = this.yAxis != null && this.xr != null && h < this.xr.count ? this.yAxis.ej(this.xr.item(h), g) : NaN;
        if (!isNaN_(i)) {
            if (i < b.left + 0.1 * b.width) {
                i = i + 0.4 * b.width;
                b.x = i - 0.5 * b.width;
            }
            if (i > b.right - 0.1 * b.width) {
                i = i - 0.4 * b.width;
                b.x = i - 0.5 * b.width;
            }
        }
        if (!isNaN_(j)) {
            if (j < b.top + 0.1 * b.height) {
                j = j + 0.4 * b.height;
                b.y = j - 0.5 * b.height;
            }
            if (j > b.bottom - 0.1 * b.height) {
                j = j - 0.4 * b.height;
                b.y = j - 0.5 * b.height;
            }
        }
        if (this.ct != null) {
            this.ct.au(this.c1, b, true);
        }
        return h >= 0;
    };
    ScatterBase.prototype.rj = function (a, b) {
        this.qm(false);
    };
    ScatterBase.prototype.rk = function (a, b) {
        this.qm(false);
    };
    ScatterBase.prototype.xa = function () {
        var a = this.w9;
        if (this.dr()) {
            if (this.c2.g) {
                this.c2.t();
            }
            a = this.xd;
        }
        return a;
    };
    ScatterBase.prototype.zc = function (a, b, c, d, e) {
        var _this = this;
        b.g = new Dictionary$2(Base.$, OwnedPoint.$, 1, c);
        var f = this.getEffectiveViewport1(a);
        var g = this.dd;
        var h;
        var i;
        var j = ((function () {
            var $ret = new ScalerParams(0, d, e, _this.w5.d, f);
            $ret.c = _this.getEffectiveViewport1(a);
            return $ret;
        })());
        var k = ((function () {
            var $ret = new ScalerParams(0, d, e, _this.w5.e, f);
            $ret.c = _this.getEffectiveViewport1(a);
            $ret.b = _this.id();
            return $ret;
        })());
        var l = false;
        var m = 0;
        if (this.c1 != null) {
            if (this.c1.fx()) {
                var n = this.c1.mp(d, j);
                l = n.c;
                m = n.d;
            }
        }
        var _loop_1 = function (o) {
            h = this_1.xq.item(o);
            i = this_1.xr.item(o);
            var p = { $type: Point_$type, x: this_1.w5.a.ej(h, j), y: this_1.w5.b.ej(i, k) };
            if (l) {
                if (p.x < e.left || p.x > e.right) {
                    if (p.x + m >= e.left && p.x + m <= e.right) {
                        p = { $type: Point_$type, x: p.x + m, y: i };
                    }
                }
            }
            if (!isInfinity(p.x) && !isInfinity(p.y)) {
                var q_1 = g.item(o);
                if (!b.g.containsKey(q_1)) {
                    var r_1 = { $type: Point_$type, x: h, y: i };
                    var s_1 = { $type: Point_$type, x: p.x, y: p.y };
                    b.g.addItem(q_1, ((function () {
                        var $ret = new OwnedPoint();
                        $ret.a = q_1;
                        $ret.b = r_1;
                        $ret.c = s_1;
                        return $ret;
                    })()));
                }
            }
        };
        var this_1 = this;
        for (var o = 0; o < c; o++) {
            _loop_1(o);
        }
    };
    ScatterBase.prototype.zm = function (a, b) {
        var _this = this;
        this.wv = null;
        this.ww = null;
        a.j.clear();
        a.n.clear();
        a.h.clear();
        a.l.clear();
        a.i.clear();
        a.k.clear();
        var c = Math.min(this.xq != null ? this.xq.count : 0, this.xr != null ? this.xr.count : 0);
        var d = b.by;
        var e = b.bx;
        var f = this.getEffectiveViewport1(b);
        var g = new ScalerParams(0, d, e, this.xAxis.ch, f);
        g.c = this.getEffectiveViewport1(b);
        var h = ((function () {
            var $ret = new ScalerParams(0, d, e, _this.yAxis.ch, f);
            $ret.b = _this.id();
            return $ret;
        })());
        h.c = this.getEffectiveViewport1(b);
        if (c < 1) {
            return;
        }
        this.w5 = ((function () {
            var $ret = new ScatterAxisInfoCache();
            $ret.a = _this.xAxis;
            $ret.b = _this.yAxis;
            $ret.d = _this.xAxis.ch;
            $ret.e = _this.yAxis.ch;
            $ret.c = _this.dd;
            return $ret;
        })());
        var i = b;
        if (c <= this.yh) {
            this.zc(i, a, c, d, e);
        }
        if (this.vr()) {
            b.cy.l(a.j, this.yh, d, e, this.hu);
        }
        var j = ((function () {
            var $ret = new Clipper(0, e, false);
            $ret.i = a.n;
            return $ret;
        })());
        var k = this.u1(b);
        var l = this.xAxis.em(k.left, g);
        var m = this.xAxis.em(k.right, g);
        b.c0.h(a.n, this.trendLineType, this.xq, this.xr, this.trendLinePeriod, function (n) { return _this.xAxis.ej(n, g); }, function (n) { return _this.yAxis.ej(n, h); }, ((function () {
            var $ret = new TrendResolutionParams();
            $ret.d = _this.hu;
            $ret.h = e;
            $ret.i = d;
            return $ret;
        })()), j, l, m);
        this.zk(a, b);
    };
    ScatterBase.prototype.n7 = function (a, b) {
        _super.prototype.n7.call(this, a, b);
        var c = b;
        c.c7(a);
    };
    ScatterBase.prototype.get_ez = function () {
        return true;
    };
    ScatterBase.prototype.xk = function (a, b, c) {
        return null;
    };
    ScatterBase.prototype.xl = function (a, b, c) {
        var d = this.xa();
        var e = this.w6.b1(this.up(b));
        var f = -1;
        if (e == null) {
            if (a != null) {
                f = this.dd.indexOf(a);
            }
            else {
                return null;
            }
        }
        else {
            f = e.ak;
        }
        if (f == -1) {
            return null;
        }
        var g = new HighlightingInfo();
        g.i = this;
        g.g = f;
        g.f = f;
        g.c = false;
        g.d = true;
        if (c != null && c.g == g.g && c.f == g.f) {
            return c;
        }
        return g;
    };
    ScatterBase.prototype.vb = function (a, b) {
        if (this.vn != 1 && this.vn != 13) {
            var c = this.vl.ct();
            var d = (c.width / 2) + (this.vu / 2);
            var e = (c.height / 2) + (this.vu / 2);
            var f = d;
            var g = d;
            var h = e;
            var i = e;
            if (a == 2 || a == 4) {
                f = 0;
            }
            if (a == 2 || a == 3) {
                g = 0;
            }
            if (b == 2 || b == 3) {
                h = 0;
            }
            if (b == 2 || b == 4) {
                i = 0;
            }
            return new Thickness(1, f, h, g, i);
        }
        return new Thickness(1, 0, 0, 0, 0);
    };
    ScatterBase.prototype.xj = function (a, b, c) {
        var d = new HighlightingInfo();
        d.i = this;
        d.g = 0;
        d.f = this.dd.count - 1;
        d.c = true;
        if (c != null && c.g == d.g && c.f == d.f) {
            return c;
        }
        return d;
    };
    ScatterBase.prototype.c6 = function (a, b, c) {
        if (this.d1 && this.fk(this.bo) && !c) {
            var d = this.xk(a, b, this.xm);
            this.xm = d;
            return d;
        }
        else {
            var e = this.xj(a, b, this.xm);
            this.xm = e;
            return e;
        }
    };
    ScatterBase.prototype.c7 = function (a, b, c) {
        if (this.fk(this.bo) && !c) {
            var d = this.xl(a, b, this.xn);
            this.xn = d;
            return d;
        }
        else {
            var e = this.xj(a, b, this.xn);
            e.d = true;
            this.xn = e;
            return e;
        }
    };
    ScatterBase.prototype.x4 = function () {
        return (this.assigningScatterStyle != null && this.xu) || (this.bo != 1) || (this.cf != 1) || (this.ce != 1);
    };
    ScatterBase.prototype.x3 = function () {
        return (this.assigningScatterMarkerStyle != null && this.xt) || (this.bo != 1) || (this.cf != 1) || (this.ce != 1);
    };
    ScatterBase.prototype.zx = function (a, b) {
        var _this = this;
        this.pt();
        var c = b.bx;
        this.w5 = ((function () {
            var $ret = new ScatterAxisInfoCache();
            $ret.a = _this.xAxis;
            $ret.b = _this.yAxis;
            $ret.d = _this.xAxis.ch;
            $ret.e = _this.yAxis.ch;
            return $ret;
        })());
        if (this.vr()) {
            b.cy.j(a.j, this.vt);
            if (this.x3()) {
                this.zd(b, a);
            }
        }
        b.cp();
        var d = ((function () {
            var $ret = new Clipper(1, NaN, c.bottom, NaN, c.top, false);
            $ret.i = b.c0.g$j.an;
            return $ret;
        })());
        b.c0.g$h(a.n, d);
        this.zu(a, b);
    };
    ScatterBase.prototype.wy = function (a, b) {
        return this.wz(a, b);
    };
    ScatterBase.prototype.wz = function (a, b) {
        if (b < a || a < 0 || a > this.xq.count || b < 0 || b > this.xq.count) {
            return null;
        }
        var c = new Array((b - a) + 1);
        for (var d = a; d <= b; d++) {
            var e = d;
            c[d - a] = this.dd.item(d);
        }
        return c;
    };
    ScatterBase.prototype.zd = function (a, b) {
        var _this = this;
        a.b6 = true;
        this.xi.ay(this, this.x3(), runOn(this, this.wy));
        var c = this.xi.d;
        var d = c != null;
        var e = this.getEffectiveViewport1(a);
        var f = this.dd == null ? 0 : this.dd.count;
        this.w6.ci(function (g) {
            if (g._visibility == 0) {
                var h = g.ak;
                var i = g.content;
                if (i == null) {
                    i = new DataContext();
                    g.content = i;
                }
                if (d) {
                    _this.zh(h, f, a.q);
                }
                _this.xi.ac(g, i);
            }
        });
    };
    ScatterBase.prototype.zi = function (a, b, c) {
        var d = this.bo != 1;
        var e = this.cf != 1;
        var f = this.ce != 1;
        this.xi.a0(this.xi.b, a, b, false);
        this.xi.ab(this.hs);
        var g = this.xi.ax;
        var h = null;
        var i = null;
        var j = null;
        var k = this.dd;
        if (d && this.c1 != null) {
            h = this.c1.dj.getHighlightingInfo(this, k, g.z, g.y, false);
            g.c = h;
        }
        if (e && this.c1 != null) {
            h = this.c1.dk.getHighlightingInfo(this, k, g.z, g.y, false);
            g.d = h;
        }
        if (f && this.c1 != null) {
            h = this.c1.di.getHighlightingInfo(this, k, g.z, g.y, false);
            g.b = h;
        }
        g.h = c;
        this.zs(g);
        this.xi.z(this, h, i, j, c, d, e, f, a < 0);
    };
    ScatterBase.prototype.zh = function (a, b, c) {
        var d = this.bo != 1;
        var e = this.cf != 1;
        var f = this.ce != 1;
        this.xi.a0(this.xi.d, a, b, true);
        this.xi.aa(this.hs);
        var g = this.xi.aw;
        var h = null;
        var i = null;
        var j = null;
        var k = this.dd;
        var l = null;
        var m = null;
        var n = null;
        if (d && this.c1 != null) {
            h = this.c1.dj.getHighlightingInfo(this, k, g.z, g.y, true);
            if (this.c1.dj.isCrossContextHighlight(this)) {
                l = this.c1.dj.getHighlightingInfo(this, k, g.z, g.y, true);
            }
            g.c = h;
        }
        if (e && this.c1 != null) {
            i = this.c1.dk.getHighlightingInfo(this, k, g.z, g.y, true);
            if (i == null && this.be != null) {
                i = this.c1.dk.getHighlightingInfo(this.be, this.be.dd, g.z, g.y, true);
            }
            if (this.c1.dk.isCrossContextHighlight(this)) {
                m = this.c1.dk.getHighlightingInfo(this, k, g.z, g.y, true);
            }
            g.d = i;
        }
        if (f && this.c1 != null) {
            j = this.c1.di.getHighlightingInfo(this, k, g.z, g.y, true);
            if (this.c1.di.isCrossContextHighlight(this)) {
                n = this.c1.di.getHighlightingInfo(this, k, g.z, g.y, true);
            }
            g.d = i;
        }
        g.h = c;
        this.zr(g);
        this.xi.y(this, h, i, j, c, d, e, f, g.v, this.c1.dj.totalHighWaterMark, g.x, this.c1.dk.totalHighWaterMark, g.t, this.c1.di.totalHighWaterMark);
    };
    ScatterBase.prototype.zs = function (a) {
        if (this.assigningScatterStyle != null && this.xu) {
            this.assigningScatterStyle(this, a);
        }
    };
    ScatterBase.prototype.zr = function (a) {
        if (this.assigningScatterMarkerStyle != null && this.xt) {
            this.assigningScatterMarkerStyle(this, a);
        }
    };
    ScatterBase.prototype.zk = function (a, b) {
        var e_3, _a;
        var c = new ErrorBarsHelper(this, b);
        if (this.w7 == null) {
            return;
        }
        var d = this.w7.u;
        var e = this.w7.v;
        var f = 0;
        var g = 0;
        var h = 0;
        var i = 0;
        try {
            for (var _b = __values(fromEnum(a.j.keys)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var j = _c.value;
                var k = a.j.item(j);
                if (d != null) {
                    switch (d.getCalculatorType()) {
                        case 1:
                            var l = this.zn(k, c, d, h, i, true);
                            h = l.p3;
                            i = l.p4;
                            break;
                        case 0:
                            var m = this.zl(k, c, d, h, i, true);
                            h = m.p3;
                            i = m.p4;
                            break;
                        case 2:
                            var n = this.zj(k, c, d, j, h, i, true);
                            h = n.p4;
                            i = n.p5;
                            break;
                        case 3:
                            var o = this.zo(c, d, f, h, i, true);
                            f = o.p2;
                            h = o.p3;
                            i = o.p4;
                            break;
                        case 4:
                            var p = this.zl(k, c, d, h, i, true);
                            h = p.p3;
                            i = p.p4;
                            break;
                    }
                    ;
                    var q = new OwnedPoint();
                    q.c = c.l(d, this.w5.a, k.c, f);
                    q.a = k.a;
                    a.h.addItem(j, q);
                    a.i.addItem(j, [h, i]);
                }
                if (e != null) {
                    switch (e.getCalculatorType()) {
                        case 1:
                            var r = this.zn(k, c, e, h, i, false);
                            h = r.p3;
                            i = r.p4;
                            break;
                        case 0:
                            var s = this.zl(k, c, e, h, i, false);
                            h = s.p3;
                            i = s.p4;
                            break;
                        case 2:
                            var t = this.zj(k, c, e, j, h, i, false);
                            h = t.p4;
                            i = t.p5;
                            break;
                        case 3:
                            var u = this.zo(c, e, g, h, i, false);
                            g = u.p2;
                            h = u.p3;
                            i = u.p4;
                            break;
                        case 4:
                            var v = this.zl(k, c, e, h, i, false);
                            h = v.p3;
                            i = v.p4;
                            break;
                    }
                    ;
                    var w = new OwnedPoint();
                    w.c = c.m(e, this.w5.b, k.c, g);
                    w.a = k.a;
                    a.l.addItem(j, w);
                    a.k.addItem(j, [h, i]);
                }
            }
        }
        catch (e_3_1) {
            e_3 = { error: e_3_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_3)
                    throw e_3.error;
            }
        }
    };
    ScatterBase.prototype.zn = function (a, b, c, d, e, f) {
        if (f) {
            var g = void 0;
            var h = void 0, i = void 0;
            i = this.w5.a;
            if (this.w7.s == 0) {
                g = a.c.x;
                h = this.w5.a;
            }
            else {
                g = a.c.y;
                h = this.w5.b;
            }
            var j = b.f(g, c, h, i, d, e);
            d = j.p4;
            e = j.p5;
        }
        else {
            var k = void 0;
            var l = void 0, m = void 0;
            m = this.w5.b;
            if (this.w7.t == 0) {
                k = a.c.x;
                l = this.w5.a;
            }
            else {
                k = a.c.y;
                l = this.w5.b;
            }
            var n = b.f(k, c, l, m, d, e);
            d = n.p4;
            e = n.p5;
        }
        return {
            p3: d,
            p4: e
        };
    };
    ScatterBase.prototype.zl = function (a, b, c, d, e, f) {
        if (f) {
            var g = b.j(a.c.x, c, this.w5.a, d, e);
            d = g.p3;
            e = g.p4;
        }
        else {
            var h = b.j(a.c.y, c, this.w5.b, d, e);
            d = h.p3;
            e = h.p4;
        }
        return {
            p3: d,
            p4: e
        };
    };
    ScatterBase.prototype.zj = function (a, b, c, d, e, f, g) {
        var h = c.getItemColumn();
        var i = this.dd.indexOf(d);
        if (h != null && i < h.count) {
            var j = h.item(i);
            if (g) {
                var k = b.h(a.c.x, j, this.w5.a, e, f);
                e = k.p3;
                f = k.p4;
            }
            else {
                var l = b.h(a.c.y, j, this.w5.b, e, f);
                e = l.p3;
                f = l.p4;
            }
        }
        else {
            e = NaN;
            f = NaN;
        }
        return {
            p4: e,
            p5: f
        };
    };
    ScatterBase.prototype.zo = function (a, b, c, d, e, f) {
        var g = a.i(b, c);
        c = g.p1;
        if (f) {
            var h = a.k(c, b, this.w5.a, d, e);
            d = h.p3;
            e = h.p4;
        }
        else {
            var i = a.k(c, b, this.w5.b, d, e);
            d = i.p3;
            e = i.p4;
        }
        return {
            p2: c,
            p3: d,
            p4: e
        };
    };
    ScatterBase.prototype.zu = function (a, b) {
        if (!b.o() || this.w7 == null) {
            b.c9();
            return;
        }
        this.zv(a, b);
        this.zw(a, b);
    };
    ScatterBase.prototype.zv = function (a, b) {
        var e_4, _a;
        b.c5();
        var c = new ErrorBarsHelper(this, b);
        var d = new PathGeometry();
        var e = this.w7.u;
        try {
            for (var _b = __values(fromEnum(a.j.keys)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var f = _c.value;
                if (e != null && a.i.containsKey(f)) {
                    var g = a.i.item(f)[0];
                    var h = a.i.item(f)[1];
                    if (!isNaN_(g) && !isNaN_(h)) {
                        var i = a.h.item(f).c;
                        if (this.w7.o == 1 || this.w7.o == 2) {
                            c.d(d, i, g, true);
                        }
                        if (this.w7.o == 1 || this.w7.o == 3) {
                            c.d(d, i, h, false);
                        }
                    }
                }
            }
        }
        catch (e_4_1) {
            e_4 = { error: e_4_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_4)
                    throw e_4.error;
            }
        }
        b.da(d);
    };
    ScatterBase.prototype.zw = function (a, b) {
        var e_5, _a;
        b.c6();
        var c = new ErrorBarsHelper(this, b);
        var d = new PathGeometry();
        var e = this.w7.v;
        try {
            for (var _b = __values(fromEnum(a.j.keys)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var f = _c.value;
                if (e != null && a.k.containsKey(f)) {
                    var g = a.k.item(f)[0];
                    var h = a.k.item(f)[1];
                    if (!isNaN_(g) && !isNaN_(h)) {
                        var i = a.l.item(f).c;
                        if (this.w7.p == 1 || this.w7.p == 2) {
                            c.e(d, i, g, true);
                        }
                        if (this.w7.p == 1 || this.w7.p == 3) {
                            c.e(d, i, h, false);
                        }
                    }
                }
            }
        }
        catch (e_5_1) {
            e_5 = { error: e_5_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_5)
                    throw e_5.error;
            }
        }
    };
    ScatterBase.prototype.gw = function (a, b, c) {
        var d = true;
        if (!_super.prototype.gw.call(this, a, b, c) || b.isEmpty || a.isEmpty || this.xAxis == null || this.yAxis == null || this.xAxis.bi == null || this.yAxis.bi == null || this.xq == null || this.xr == null || this.xq.count == 0 || this.xr.count == 0 || this.dd == null || this.dd.count != this.xq.count || this.dd.count != this.xr.count || this.xAxis.bi == null || this.yAxis.bi == null || this.xAxis.lx == this.xAxis.lw || this.yAxis.lx == this.yAxis.lw) {
            d = false;
        }
        return d;
    };
    ScatterBase.prototype.getViewInfo = function (a, b) {
        if (!this.aas.isEmpty && !this.aat.isEmpty) {
            a = this.aas;
            b = this.aat;
            return {
                p0: a,
                p1: b
            };
        }
        a = this.cl.bx;
        b = this.cl.by;
        return {
            p0: a,
            p1: b
        };
    };
    ScatterBase.prototype.qn = function (a) {
        _super.prototype.qn.call(this, a);
        this.zb();
        try {
            if (this.dt(this.cl)) {
                return;
            }
            if (this.dd != null && this.dd.count > this.yh) {
                a = false;
            }
            if (this.fz(a) && !this.gb) {
                var b = this.xb;
                if (this.dr()) {
                    if (this.c2.g) {
                        this.c2.t();
                    }
                    this.xb = this.xd;
                    this.xd = b;
                }
                else {
                    this.xb = this.w9;
                    this.w9 = b;
                }
                this.zm(this.w9, this.w6);
                this.q0();
            }
            else {
                if (!this.gb) {
                    this.zm(this.w9, this.w6);
                }
                this.zx(this.w9, this.w6);
            }
        }
        finally {
            this.zy();
        }
    };
    ScatterBase.prototype.ra = function () {
        _super.prototype.ra.call(this);
        if (this.index < 0) {
            return;
        }
        this.w6.dd();
    };
    ScatterBase.prototype.qo = function (a, b) {
        _super.prototype.qo.call(this, a, b);
        if (!this.gj) {
            this.cl.a4(b);
            return;
        }
        this.cl.a4(b);
        if (this.dt(this.ck)) {
            return;
        }
        var c = typeCast(ScatterBaseView.$, this.ck);
        if (!this.gc) {
            this.xc = new ScatterFrame();
            this.zm(this.xc, c);
        }
        this.gc = false;
        this.zx(this.xc, c);
        this.gj = false;
    };
    ScatterBase.prototype.ql = function (a, b, c, d, e) {
        _super.prototype.ql.call(this, a, b, c, d, e);
        var f = this.a2.a$i.item(d);
        var g = f;
        f.a3(c);
        if (this.dt(g)) {
            return;
        }
        if (this.w8 == null) {
            this.w8 = new ScatterFrame();
        }
        this.zm(this.w8, g);
        this.zx(this.w8, g);
    };
    ScatterBase.prototype.zt = function (a, b) {
        var e_6, _a, e_7, _b;
        var c = new List$1(Base.$, 0);
        try {
            for (var _c = __values(fromEnum(b.c)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var d = _d.value;
                if (!a.containsKey(d)) {
                    c.add1(d);
                }
            }
        }
        catch (e_6_1) {
            e_6 = { error: e_6_1 };
        }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return))
                    _a.call(_c);
            }
            finally {
                if (e_6)
                    throw e_6.error;
            }
        }
        try {
            for (var _e = __values(fromEnum(c)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var e = _f.value;
                b.h(e);
            }
        }
        catch (e_7_1) {
            e_7 = { error: e_7_1 };
        }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return))
                    _b.call(_e);
            }
            finally {
                if (e_7)
                    throw e_7.error;
            }
        }
    };
    ScatterBase.prototype.wx = function (a, b, c, d, e) {
        var _this = this;
        if (c == null || c.length != this.w5.c.count) {
            c = new Array(this.w5.c.count);
            for (var f = 0; f < this.w5.c.count; f++) {
                c[f] = PointUtil.create();
            }
        }
        var g = this.getEffectiveViewport1(a);
        var h = ((function () {
            var $ret = new ScalerParams(0, d, e, _this.xAxis.ch, g);
            $ret.c = _this.getEffectiveViewport1(a);
            return $ret;
        })());
        var i = ((function () {
            var $ret = new ScalerParams(0, d, e, _this.yAxis.ch, g);
            $ret.c = _this.getEffectiveViewport1(a);
            $ret.b = _this.id();
            return $ret;
        })());
        var j = this.u1(a);
        var k = this.w5.a.em(j.left, h);
        var l = this.w5.a.em(j.right, h);
        var m = this.w5.b.em(j.bottom, i);
        var n = this.w5.b.em(j.top, i);
        if (this.w5.d) {
            var o = k;
            k = l;
            l = o;
        }
        if (this.w5.e) {
            var p = m;
            m = n;
            n = p;
        }
        var q = this.w5;
        var r = q.a;
        var s = q.b;
        var t;
        var u;
        var v = this.xq;
        var w = this.xr;
        var x = false;
        var y = 0;
        var z = 0;
        if (this.c1 != null) {
            if (this.c1.fx()) {
                var aa = this.c1.mp(d, h);
                x = aa.c;
                y = aa.d;
                z = r.em(0 + y, h);
                var ab = r.em(0, h);
                z -= ab;
            }
        }
        for (var ac = 0; ac < this.w5.c.count; ac++) {
            t = v.item(ac);
            u = w.item(ac);
            if (x) {
                if (t >= k && t <= l && u >= m && u <= n) {
                    c[ac].x = r.ej(t, h);
                    c[ac].y = s.ej(u, i);
                }
                else {
                    if ((t + z) >= k && (t + z) <= l && u >= m && u <= n) {
                        c[ac].x = r.ej(t, h) + y;
                        c[ac].y = s.ej(u, i);
                    }
                    else {
                        c[ac].x = NaN;
                        c[ac].y = NaN;
                    }
                }
            }
            else {
                if (t >= k && t <= l && u >= m && u <= n) {
                    c[ac].x = r.ej(t, h);
                    c[ac].y = s.ej(u, i);
                }
                else {
                    c[ac].x = NaN;
                    c[ac].y = NaN;
                }
            }
        }
        return c;
    };
    ScatterBase.prototype.x6 = function (a, b) {
        var e_8, _a;
        if (b == null) {
            b = new List$1(Number_$type, 2, a.e);
        }
        else {
            b.clear();
        }
        var c = 0;
        var d = this.dd;
        try {
            for (var _b = __values(fromEnum(a.c)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var e = _c.value;
                b.add(d.indexOf(e));
            }
        }
        catch (e_8_1) {
            e_8 = { error: e_8_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_8)
                    throw e_8.error;
            }
        }
        return b;
    };
    ScatterBase.prototype.ow = function (a) {
        _super.prototype.ow.call(this, a);
        this.a4.exportTrendlineData(this, a, this.w6.c0.g$j);
    };
    ScatterBase.prototype.id = function () {
        return Series.ie(this.xr, null);
    };
    ScatterBase.prototype.getDataLegendSeriesContextAt = function (a, b) {
        var c = { $type: Point_$type, x: a, y: b };
        var d = this.j2(c);
        var e = d == null ? NaN : this.ic(d, "XMemberPath");
        var f = d == null ? NaN : this.ic(d, "YMemberPath");
        var g = new DataLegendSeriesValueInfo();
        g.l = e;
        g.a = 13;
        g.q = "X";
        g.r = this.y1 != null ? this.y1 : "X";
        g.s = this.yx != null ? this.yx : "X:";
        g.t = this.yz != null ? this.yz : "";
        var h = new DataLegendSeriesValueInfo();
        h.l = f;
        h.a = 14;
        h.q = "Y";
        h.r = this.y9 != null ? this.y9 : "Y";
        h.s = this.y5 != null ? this.y5 : "Y:";
        h.t = this.y7 != null ? this.y7 : "";
        var i = new DataLegendSeriesContext();
        i.e = ((function () {
            var $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
            $ret.add(g);
            $ret.add(h);
            return $ret;
        })());
        i.h = this.lh();
        return i;
    };
    ScatterBase.prototype.zz = function () {
        if (this.xs) {
            this.x7 = 0;
            this.x8 = 0;
            for (var a = 0; a < this.xq.count; a++) {
                this.x7 += this.xq.item(a);
                this.x8 += this.xr.item(a);
            }
            this.x9 = this.x7 / this.xq.count;
            this.ya = this.x8 / this.xr.count;
            this.xs = false;
        }
    };
    ScatterBase.prototype.ip = function (a, b) {
        if (b == null || !b.cj) {
            return NaN;
        }
        if (b != this.xAxis && b != this.yAxis) {
            return NaN;
        }
        var c = this.am(a);
        if (b.cp) {
            return c[1];
        }
        else {
            return c[0];
        }
    };
    ScatterBase.prototype.am = function (a) {
        var b = NaN;
        var c = NaN;
        switch (a) {
            case 5:
            case 2:
                b = this.xq.maximum;
                c = this.xr.maximum;
                break;
            case 4:
            case 1:
                b = this.xq.minimum;
                c = this.xr.minimum;
                break;
            case 6:
            case 3:
                if (this.xs) {
                    this.zz();
                }
                b = this.x9;
                c = this.ya;
                break;
        }
        return [b, c];
    };
    ScatterBase.prototype.uy = function (a) {
        var b = this.getEffectiveViewport1(this.cl);
        var c = new ScalerParams(0, this.cl.by, this.cl.bx, this.xAxis.ch, b);
        c.c = b;
        var d = isNaN_(a[0]) ? NaN : this.xAxis.ej(a[0], c);
        c = new ScalerParams(0, this.cl.by, this.cl.bx, this.yAxis.ch, b);
        c.b = this.id();
        c.c = b;
        var e = isNaN_(a[1]) ? NaN : this.yAxis.ej(a[1], c);
        return { $type: Point_$type, x: d, y: e };
    };
    ScatterBase.prototype.ux = function (a) {
        var b = this.am(a);
        return this.uy(b);
    };
    ScatterBase.$t = markType(ScatterBase, 'ScatterBase', MarkerSeries.$, [ISupportsErrorBars_$type, ITrendLineSeries_$type]);
    ScatterBase.z0 = DependencyProperty.i("ActualTrendLineBrush", Brush.$, ScatterBase.$, new PropertyMetadata(2, null, function (a, b) { return a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue); }));
    ScatterBase.$$p = markDep(DependencyProperty, PropertyMetadata, ScatterBase, 'raisePropertyChanged', ['ErrorBarSettings:w7:z1', [ScatterErrorBarSettings.$, null], 'HighlightedXMemberPath:yl:z2', [2, null], 'HighlightedYMemberPath:yn:z3', [2, null], 'IsCustomScatterMarkerStyleAllowed:xx:z4', [0, false], 'IsCustomScatterStyleAllowed:xy:z5', [0, false], 'ItemSearchMode:xh:z6', [ScatterItemSearchMode_$type, enumGetBox(ScatterItemSearchMode_$type, 0)], 'ItemSearchThreshold:yg:z7', [1, 10000], 'MarkerCollisionAvoidance:w2:z8', [CollisionAvoidanceType_$type, enumGetBox(CollisionAvoidanceType_$type, 0)], 'MaximumMarkers:yh:z9', [1, 400], 'XAxis::aah', [NumericXAxis.$, null], 'XMemberAsLegendLabel:yx:aai', [2, null], 'XMemberAsLegendUnit:yz:aaj', [2, null], 'XMemberPath:y1:aak', [2, null], 'YAxis::aal', [NumericYAxis.$, null], 'YMemberAsLegendLabel:y5:aam', [2, null], 'YMemberAsLegendUnit:y7:aan', [2, null], 'YMemberPath:y9:aao', [2, null], 'TrendLineType::aaf', [TrendLineType_$type, enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness::aae', [1, 1.5], 'TrendLinePeriod::aad', [1, 7], 'TrendLineBrush::aaa', [Brush.$, null], 'TrendLineZIndex:yi:aag', [1, 1001], 'TrendLineDashArray:aaq:aab', [DoubleCollection.$], 'TrendLineDashCap:aar:aac', [PenLineCap_$type, enumGetBox(PenLineCap_$type, 0)]]);
    return ScatterBase;
}(MarkerSeries));
export { ScatterBase };
/**
 * @hidden
 */
var ScatterSeriesRenderManager = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ScatterSeriesRenderManager, _super);
    function ScatterSeriesRenderManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.aw = null;
        _this.ax = null;
        return _this;
    }
    ScatterSeriesRenderManager.prototype.c = function () {
        this.aw = new AssigningScatterMarkerStyleEventArgs();
        return this.aw;
    };
    ScatterSeriesRenderManager.prototype.a = function () {
        this.ax = new AssigningScatterStyleEventArgs();
        return this.ax;
    };
    ScatterSeriesRenderManager.prototype.ay = function (a, b, c) {
        this.w(a, b, c);
    };
    ScatterSeriesRenderManager.prototype.az = function (a, b, c) {
        this.x(a, b, c);
    };
    ScatterSeriesRenderManager.prototype.a0 = function (a, b, c, d) {
        if (b == -1) {
            a.e = false;
            a.z = 0;
            a.y = c - 1;
        }
        else {
            if (d) {
                a.z = b;
                a.y = b;
            }
            else {
                a.e = false;
                a.z = b;
                a.y = b;
            }
        }
    };
    ScatterSeriesRenderManager.$t = markType(ScatterSeriesRenderManager, 'ScatterSeriesRenderManager', SeriesRenderManager.$);
    return ScatterSeriesRenderManager;
}(SeriesRenderManager));
export { ScatterSeriesRenderManager };
/**
 * @hidden
 */
var ScatterBaseView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ScatterBaseView, _super);
    function ScatterBaseView(a) {
        var _this = _super.call(this, a) || this;
        _this.cy = null;
        _this.cw = null;
        _this.cz = null;
        _this.c4 = null;
        _this.df = null;
        _this.dg = null;
        _this.c0 = null;
        _this.de = null;
        _this.c1 = null;
        _this.cz = a;
        _this.c1 = new HashPool$2(Base.$, Marker.$);
        _this.ck(_this.c1);
        _this.c0 = new ScatterTrendLineManager();
        return _this;
    }
    ScatterBaseView.prototype.au = function () {
        _super.prototype.au.call(this);
        this.cy = this.cx();
        this.df = new Path();
        this.dg = new Path();
        if (!this.q) {
            this.cz.yh = 2000;
        }
    };
    ScatterBaseView.prototype.dh = function (a) {
        if (this.de == null) {
            this.de = new DataTemplateMeasureInfo();
            this.de.context = this.k.h();
        }
        this.de.width = a.width;
        this.de.height = a.height;
        this.de.data = a.content;
        var b = a.ah;
        if (b.measure != null) {
            b.measure(this.de);
        }
        return new Size(1, this.de.width, this.de.height);
    };
    ScatterBaseView.prototype.cx = function () {
        var _this = this;
        var a = new NumericMarkerManager(1, function (b) { return _this.c1.item(b); }, function (b) { return _this.cz.w5.c.item(b); }, runOn(this, this.dc), runOn(this, this.cu), runOn(this, this.c2), function () { return _this.cz.w2; });
        a.q = runOn(this, this.dh);
        return a;
    };
    ScatterBaseView.prototype.dc = function (a) {
        this.cz.zt(a, this.c1);
    };
    ScatterBaseView.prototype.c3 = function () {
        return this.b7;
    };
    ScatterBaseView.prototype.cv = function () {
        return this.cw;
    };
    ScatterBaseView.prototype.cu = function () {
        this.cw = this.cz.wx(this, this.c1, this.cw, this.by, this.bx);
        return this.cw;
    };
    ScatterBaseView.prototype.c2 = function () {
        this.c4 = this.cz.x6(this.c1, this.c4);
        return this.c4;
    };
    ScatterBaseView.prototype.c5 = function () {
    };
    ScatterBaseView.prototype.da = function (a) {
    };
    ScatterBaseView.prototype.c6 = function () {
    };
    ScatterBaseView.prototype.db = function (a) {
    };
    ScatterBaseView.prototype.dd = function () {
        if (this.cz.trendLineBrush != null) {
            this.cz.aap = this.cz.trendLineBrush;
        }
        else {
            this.cz.aap = this.cz.tw;
        }
    };
    ScatterBaseView.prototype.ci = function (a) {
        this.c1.f(a);
    };
    ScatterBaseView.prototype.c8 = function (a) {
        this.c1.g(a);
    };
    ScatterBaseView.prototype.c9 = function () {
    };
    ScatterBaseView.prototype.a7 = function (a, b) {
        _super.prototype.a7.call(this, a, b);
        if (a.d) {
            if (this.cz.trendLineType != 0 && !b) {
                var c = this.c0.g$j;
                c.ad = this.cz.trendLineThickness;
                c._stroke = this.cz.aap;
                c.ai = this.cz.aaq;
                c.aj = this.cz.aar;
                a.v(c);
            }
        }
    };
    ScatterBaseView.prototype.c7 = function (a) {
        if (a) {
            this.c9();
            this.c1.clear();
        }
        this.c0.g$d();
        this.as();
    };
    ScatterBaseView.prototype.getDefaultTooltipTemplate = function () {
        var a = "<div class='ui-chart-default-tooltip-content'><span";
        var b = this.e.a2.a$t(this.e);
        if (!stringIsNullOrEmpty(b)) {
            a += " style='color:" + b + "'";
        }
        a += ">" + this.cz.title + "</span><br/><span>" + "x: </span><span class='ui-priority-primary'>${item." + this.cz.y1 + "}</span><br/><span>" + "y: </span><span class='ui-priority-primary'>${item." + this.cz.y9 + "}</span></div>";
        return a;
    };
    ScatterBaseView.$t = markType(ScatterBaseView, 'ScatterBaseView', MarkerSeriesView.$);
    return ScatterBaseView;
}(MarkerSeriesView));
export { ScatterBaseView };
