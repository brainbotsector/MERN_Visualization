import { __extends } from "tslib";
import { IgrStyle } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { IgrShapeSeriesBase } from "./igr-shape-series-base";
import { ScatterPolygonSeries } from "./ScatterPolygonSeries";
import { ensureEnum, brushToString, stringToBrush } from "igniteui-react-core";
/**
 * Series class which renders polygons as Paths based on lists of points in the ItemsSource.
*/
var IgrScatterPolygonSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrScatterPolygonSeries, _super);
    function IgrScatterPolygonSeries(props) {
        return _super.call(this, props) || this;
    }
    IgrScatterPolygonSeries.prototype.createImplementation = function () {
        return new ScatterPolygonSeries();
    };
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "isPolygon", {
        /**
         * Gets whether the current series shows a polygon shape.
        */
        get: function () {
            return this.i.fb;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "isMarkerlessDisplayPreferred", {
        /**
         * Overridden by derived series classes to indicate when marker-less display is preferred or not.
        */
        get: function () {
            return this.i.e6;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "hasMarkers", {
        /**
         * Returns whether the current series supports visual markers.
        */
        get: function () {
            return this.i.hasMarkers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "shapeStyle", {
        /**
         * The default style to apply to all Shapes in the series.
        */
        get: function () {
            var r = this.i.zq;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgrStyle();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.zq = null : this.i.zq = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerType", {
        /**
         * Gets or sets the marker type for the current series object.
         * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
        */
        get: function () {
            return this.i.ye;
        },
        set: function (v) {
            this.i.ye = ensureEnum(MarkerType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerTemplate", {
        /**
         * Gets or sets the MarkerTemplate for the current series object.
        */
        get: function () {
            return this.i.y5;
        },
        set: function (v) {
            this.i.y5 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerThickness", {
        /**
         * Gets or sets thickness of the marker outline
        */
        get: function () {
            return this.i.ym;
        },
        set: function (v) {
            this.i.ym = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "actualMarkerTemplate", {
        /**
         * Gets the effective marker template for the current series object.
        */
        get: function () {
            return this.i.y3;
        },
        set: function (v) {
            this.i.y3 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerBrush", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
        */
        get: function () {
            return brushToString(this.i.zm);
        },
        set: function (v) {
            this.i.zm = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "actualMarkerBrush", {
        /**
         * Gets the effective marker brush for the current series object.
        */
        get: function () {
            return brushToString(this.i.zk);
        },
        set: function (v) {
            this.i.zk = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerOutline", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
        */
        get: function () {
            return brushToString(this.i.zn);
        },
        set: function (v) {
            this.i.zn = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "actualMarkerOutline", {
        /**
         * Gets the effective marker outline for the current series object.
        */
        get: function () {
            return brushToString(this.i.zl);
        },
        set: function (v) {
            this.i.zl = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerCollisionAvoidance", {
        /**
         * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
        */
        get: function () {
            return this.i.x5;
        },
        set: function (v) {
            this.i.x5 = ensureEnum(CollisionAvoidanceType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerOutlineMode", {
        /**
         * Gets or sets whether the marker outline is based on the marker brush of the series rather than the marker outlines collection.
        */
        get: function () {
            return this.i.yc;
        },
        set: function (v) {
            this.i.yc = ensureEnum(MarkerOutlineMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerFillMode", {
        /**
         * Gets or sets whether the marker fill is based on the marker outline of the series rather than the marker brushes collection.
        */
        get: function () {
            return this.i.x8;
        },
        set: function (v) {
            this.i.x8 = ensureEnum(MarkerFillMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    IgrScatterPolygonSeries.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.shapeStyle && this.shapeStyle.name && this.shapeStyle.name == name) {
            return this.shapeStyle;
        }
        return null;
    };
    return IgrScatterPolygonSeries;
}(IgrShapeSeriesBase));
export { IgrScatterPolygonSeries };
