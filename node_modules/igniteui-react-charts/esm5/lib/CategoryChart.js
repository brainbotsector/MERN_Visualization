/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { XYChart } from "./XYChart";
import { typeCast, runOn, delegateCombine, enumGetBox, markType, TypeRegistrar, getInstanceType } from "igniteui-react-core";
import { CategoryChartType_$type } from "./CategoryChartType";
import { CategorySeriesMarkerCollisionAvoidance_$type } from "./CategorySeriesMarkerCollisionAvoidance";
import { CategoryTransitionInMode_$type } from "./CategoryTransitionInMode";
import { TransitionInSpeedType_$type } from "./TransitionInSpeedType";
import { AutoMarginsAndAngleUpdateMode_$type } from "./AutoMarginsAndAngleUpdateMode";
import { AxisRangeBufferMode_$type } from "./AxisRangeBufferMode";
import { CategoryXAxis } from "./CategoryXAxis";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType_$type } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { IDataSeriesAdapterRule_$type } from "igniteui-react-core";
import { SimpleCategorySeriesRule } from "igniteui-react-core";
import { SubCollectionsRule } from "igniteui-react-core";
import { DVContainer } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { AxisDefaults } from "./AxisDefaults";
import { Defaults } from "./Defaults";
import { Series } from "./Series";
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { ArrayExtension } from "igniteui-react-core";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { DeviceUtils } from "igniteui-react-core";
import { CategoryChartMockDataGenerator } from "./CategoryChartMockDataGenerator";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
var CategoryChart = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CategoryChart, _super);
    function CategoryChart() {
        var _this = _super.call(this) || this;
        _this.ag7 = 1000;
        _this.ag8 = 1000;
        _this.afa = null;
        _this.afb = null;
        _this.aeu = 9;
        _this.aew = 1;
        _this.afg = false;
        _this.afh = true;
        _this.aey = 0;
        _this.ae8 = 0;
        _this.af4 = 0;
        _this.af7 = 0;
        _this.af3 = 0;
        _this.af6 = 0;
        _this.af5 = 1;
        _this.af8 = 0;
        _this.age = NaN;
        _this.aeq = 1;
        _this.afi = true;
        _this.afj = true;
        _this.af1 = DeviceUtils.g(2);
        _this.af2 = DeviceUtils.g(60);
        _this.afn = true;
        _this.afk = true;
        _this.afm = false;
        _this.aes = 0;
        _this.afo = false;
        _this.ag9 = 10;
        _this.agg = NaN;
        _this.agf = NaN;
        _this.agh = 0;
        _this.aem = null;
        _this.aen = null;
        _this.afl = true;
        _this.af9 = 3;
        _this.aga = NaN;
        _this.agb = NaN;
        _this.agc = NaN;
        _this.agd = NaN;
        _this.afe = false;
        _this.aff = false;
        _this.af0 = null;
        DVContainer.instance.registerIfLoaded("CategoryChartToolbarFactoryManager");
        _this.s0();
        return _this;
    }
    CategoryChart.prototype.ti = function () {
        _super.prototype.ti.call(this);
        if (this.dataChart == null) {
            return;
        }
        var a = this.dataChart.c8.j.e();
        this.aeo = a.d;
        this.aep = a.e;
        if (this.ady == null) {
            this.ady = a.k;
        }
        if (this.ad5 == null) {
            this.ad5 = a.k;
        }
        this.zx = 0;
        this.ad6 = AxisDefaults.h;
        this.ad9 = null;
        this.ad2 = AxisDefaults.g;
        this.adz = null;
        this.zg = AxisDefaults.f;
        this.ad3 = AxisDefaults.j;
        this.zh = AxisDefaults.e;
        this.gc = true;
        this.gd = true;
        this.bd = 0;
        this.i2 = Defaults.j;
        this.v3 = Defaults.ae;
        this.vy = Defaults.af;
        this.vz = Defaults.ag;
        this.afs = true;
    };
    CategoryChart.prototype.tk = function (a, b) {
        _super.prototype.tk.call(this, a, b);
        a.ju = this.aha;
        a.jv = this.ahb;
        a.c4 = this.afc;
        a.c5 = this.afd;
    };
    CategoryChart.prototype.t8 = function (a, b, c) {
        var _this = this;
        _super.prototype.t8.call(this, a, b, c);
        switch (a) {
            case "TransitionInDuration":
                this.s7(function (d) { return d.ju = _this.aha; });
                break;
            case "TransitionOutDuration":
                this.s7(function (d) { return d.jv = _this.ahb; });
                break;
            case "TransitionInEasingFunction":
                this.s7(function (d) { return d.c4 = _this.afc; });
                break;
            case "TransitionOutEasingFunction":
                this.s7(function (d) { return d.c5 = _this.afd; });
                break;
        }
    };
    Object.defineProperty(CategoryChart.prototype, "aha", {
        get: function () {
            return this.ag7;
        },
        set: function (a) {
            var b = this.aha;
            if (a != b) {
                this.ag7 = a;
                this.t5("TransitionInDuration", b, this.aha);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "ahb", {
        get: function () {
            return this.ag8;
        },
        set: function (a) {
            var b = this.ahb;
            if (a != b) {
                this.ag8 = a;
                this.t5("TransitionOutDuration", b, this.ahb);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "afc", {
        get: function () {
            return this.afa;
        },
        set: function (a) {
            var b = this.afc;
            if (a != b) {
                this.afa = a;
                this.t5("TransitionInEasingFunction", b, this.afc);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "afd", {
        get: function () {
            return this.afb;
        },
        set: function (a) {
            var b = this.afd;
            if (a != b) {
                this.afb = a;
                this.t5("TransitionOutEasingFunction", b, this.afd);
            }
        },
        enumerable: false,
        configurable: true
    });
    CategoryChart.prototype.ahh = function () {
        var cvd_ = this.k0();
        cvd_.scaleByViewport();
        return (cvd_.serialize());
    };
    CategoryChart.prototype.td = function (a) {
        _super.prototype.td.call(this, a);
        a.eg = this.f7;
        a.wy = this.aft;
        a.w1 = this.afu;
        a.xo = this.agi;
        a.xp = this.agj;
        a.v3 = this.aer;
    };
    CategoryChart.prototype.tj = function (a, b) {
        _super.prototype.tj.call(this, a, b);
        var c = typeCast(HorizontalAnchoredCategorySeries.$, a);
        if (c == null) {
            return;
        }
        c.yx = this.aex;
        c.xt = this.afs;
        c.xd = this.aez;
        c.cv = this.ae9;
        c.trendLineBrush = ArrayExtension.getModulus$1(Brush.$, this.ah, b);
        c.trendLineType = this.d5;
        c.trendLineThickness = this.jy;
        c.vp = this.cw(a, b);
        if (a.e7) {
            a.qw(ArrayExtension.getModulus$1(Brush.$, this.aeo, b), ArrayExtension.getModulus$1(Brush.$, this.aep, b));
        }
    };
    CategoryChart.prototype.ae0 = function () {
        return new CategoryXAxis();
    };
    CategoryChart.prototype.ae4 = function () {
        return new NumericYAxis();
    };
    CategoryChart.prototype.sw = function () {
        this.xAxis = this.ae0();
        this.xAxis.name = "xAxis";
        var a = this.xAxis;
        a.propertyChanged = delegateCombine(a.propertyChanged, runOn(this, this.ail));
        this.yAxis = this.ae4();
        this.yAxis.name = "yAxis";
        var b = this.yAxis;
        b.propertyChanged = delegateCombine(b.propertyChanged, runOn(this, this.aim));
        if (this.xAxis.az == null) {
            this.xAxis.az = new AxisLabelSettings();
        }
        if (this.yAxis.az == null) {
            this.yAxis.az = new AxisLabelSettings();
        }
    };
    CategoryChart.prototype.acy = function (a) {
        _super.prototype.acy.call(this, a);
        a.la = this.afw;
        a.ld = this.afy;
        a.b1 = this.afx;
    };
    CategoryChart.prototype.acw = function (a) {
        _super.prototype.acw.call(this, a);
        a.b1 = this.afv;
        a.zoomMaximumCategoryRange = this.agw;
        a.zoomToCategoryRange = this.agy;
        a.zoomToCategoryStart = this.agz;
        a.zoomMaximumItemSpan = this.agx;
        a.zoomToItemSpan = this.ag0;
    };
    CategoryChart.prototype.get_b5 = function () {
        return 0;
    };
    Object.defineProperty(CategoryChart.prototype, "b5", {
        get: function () {
            return this.get_b5();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "aev", {
        get: function () {
            return this.aeu;
        },
        set: function (a) {
            if (a != this.aeu) {
                var b = this.aev;
                this.aeu = a;
                this.t5("ChartType", enumGetBox(CategoryChartType_$type, b), enumGetBox(CategoryChartType_$type, this.aev));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "aex", {
        get: function () {
            return this.aew;
        },
        set: function (a) {
            var b = this.aex;
            if (a != b) {
                this.aew = a;
                this.t5("MarkerCollisionAvoidance", enumGetBox(CategorySeriesMarkerCollisionAvoidance_$type, b), enumGetBox(CategorySeriesMarkerCollisionAvoidance_$type, this.aex));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "afr", {
        get: function () {
            return this.afg;
        },
        set: function (a) {
            var b = this.afr;
            if (a != b) {
                this.afg = a;
                this.t5("IsSplineShapePartOfRange", b, this.afr);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "afs", {
        get: function () {
            return this.afh;
        },
        set: function (a) {
            var b = this.afs;
            if (a != b) {
                this.afh = a;
                this.t5("IsTransitionInEnabled", b, this.afs);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "aez", {
        get: function () {
            return this.aey;
        },
        set: function (a) {
            var b = this.aez;
            if (a != b) {
                this.aey = a;
                this.t5("TransitionInMode", enumGetBox(CategoryTransitionInMode_$type, b), enumGetBox(CategoryTransitionInMode_$type, this.aez));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "ae9", {
        get: function () {
            return this.ae8;
        },
        set: function (a) {
            var b = this.ae9;
            if (a != b) {
                this.ae8 = a;
                this.t5("TransitionInSpeedType", enumGetBox(TransitionInSpeedType_$type, b), enumGetBox(TransitionInSpeedType_$type, this.ae9));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "agr", {
        get: function () {
            return this.af4;
        },
        set: function (a) {
            var b = this.agr;
            if (a != b) {
                this.af4 = a;
                this.t5("XAxisInterval", b, this.agr);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "agu", {
        get: function () {
            return this.af7;
        },
        set: function (a) {
            var b = this.agu;
            if (a != b) {
                this.af7 = a;
                this.t5("XAxisMinorInterval", b, this.agu);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "agq", {
        get: function () {
            return this.af3;
        },
        set: function (a) {
            var b = this.agq;
            if (a != b) {
                this.af3 = a;
                this.t5("XAxisGap", b, this.agq);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "agt", {
        get: function () {
            return this.af6;
        },
        set: function (a) {
            var b = this.agt;
            if (a != b) {
                this.af6 = a;
                this.t5("XAxisMinimumGapSize", b, this.agt);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "ags", {
        get: function () {
            return this.af5;
        },
        set: function (a) {
            var b = this.ags;
            if (a != b) {
                this.af5 = a;
                this.t5("XAxisMaximumGap", b, this.ags);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "agv", {
        get: function () {
            return this.af8;
        },
        set: function (a) {
            var b = this.agv;
            if (a != b) {
                this.af8 = a;
                this.t5("XAxisOverlap", b, this.agv);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "ag3", {
        get: function () {
            return this.age;
        },
        set: function (a) {
            var b = this.ag3;
            if (a != b) {
                this.age = a;
                this.t5("YAxisInterval", b, this.ag3);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "aer", {
        get: function () {
            return this.aeq;
        },
        set: function (a) {
            var b = this.aer;
            if (a != b) {
                this.aeq = a;
                this.t5("AutoMarginAndAngleUpdateMode", enumGetBox(AutoMarginsAndAngleUpdateMode_$type, b), enumGetBox(AutoMarginsAndAngleUpdateMode_$type, this.aer));
            }
        },
        enumerable: false,
        configurable: true
    });
    CategoryChart.prototype.ain = function () {
        if (this.dataChart != null) {
            this.dataChart.y9();
        }
    };
    Object.defineProperty(CategoryChart.prototype, "aft", {
        get: function () {
            return this.afi;
        },
        set: function (a) {
            var b = this.aft;
            if (a != b) {
                this.afi = a;
                this.t5("ShouldAutoExpandMarginForInitialLabels", b, this.aft);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "afu", {
        get: function () {
            return this.afj;
        },
        set: function (a) {
            var b = this.afu;
            if (a != b) {
                this.afj = a;
                this.t5(CategoryChart.ahq, b, this.afu);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "agi", {
        get: function () {
            return this.af1;
        },
        set: function (a) {
            var b = this.agi;
            if (a != b) {
                this.af1 = a;
                this.t5("AutoExpandMarginExtraPadding", b, this.agi);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "agj", {
        get: function () {
            return this.af2;
        },
        set: function (a) {
            var b = this.agj;
            if (a != b) {
                this.af2 = a;
                this.t5("AutoExpandMarginMaximumValue", b, this.agj);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "afy", {
        get: function () {
            return this.afn;
        },
        set: function (a) {
            var b = this.afy;
            if (a != b) {
                this.afn = a;
                this.t5("YAxisFavorLabellingScaleEnd", b, this.afy);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "afv", {
        get: function () {
            return this.afk;
        },
        set: function (a) {
            var b = this.afv;
            if (a != b) {
                this.afk = a;
                this.t5(CategoryChart.ahx, b, this.afv);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "afx", {
        get: function () {
            return this.afm;
        },
        set: function (a) {
            var b = this.afx;
            if (a != b) {
                this.afm = a;
                this.t5(CategoryChart.aib, b, this.afx);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "aet", {
        get: function () {
            return this.aes;
        },
        set: function (a) {
            var b = this.aet;
            if (a != b) {
                this.aes = a;
                this.t5("YAxisAutoRangeBufferMode", enumGetBox(AxisRangeBufferMode_$type, b), enumGetBox(AxisRangeBufferMode_$type, this.aet));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "afz", {
        get: function () {
            return this.afo;
        },
        set: function (a) {
            var b = this.afz;
            if (a != b) {
                this.afo = a;
                this.t5("YAxisIsLogarithmic", b, this.afz);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "ahc", {
        get: function () {
            return this.ag9;
        },
        set: function (a) {
            var b = this.ahc;
            if (a != b) {
                this.ag9 = a;
                this.t5("YAxisLogarithmBase", b, this.ahc);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "ag5", {
        get: function () {
            return this.agg;
        },
        set: function (a) {
            var b = this.ag5;
            if (a != b) {
                this.agg = a;
                this.t5("YAxisMinimumValue", b, this.ag5);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "ag4", {
        get: function () {
            return this.agf;
        },
        set: function (a) {
            var b = this.ag4;
            if (a != b) {
                this.agf = a;
                this.t5("YAxisMaximumValue", b, this.ag4);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "ag6", {
        get: function () {
            return this.agh;
        },
        set: function (a) {
            var b = this.ag6;
            if (a != b) {
                this.agh = a;
                this.t5("YAxisMinorInterval", b, this.ag6);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "agp", {
        get: function () {
            return this.xAxis.mw;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "ago", {
        get: function () {
            return this.xAxis.mv;
        },
        enumerable: false,
        configurable: true
    });
    CategoryChart.prototype.agl = function () {
        return this.agp;
    };
    CategoryChart.prototype.agn = function () {
        return this.ag2;
    };
    CategoryChart.prototype.agk = function () {
        return this.ago;
    };
    CategoryChart.prototype.agm = function () {
        return this.ag1;
    };
    Object.defineProperty(CategoryChart.prototype, "ag2", {
        get: function () {
            return this.yAxis.lx;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "ag1", {
        get: function () {
            return this.yAxis.lw;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "aeo", {
        get: function () {
            return this.aem;
        },
        set: function (a) {
            var b = this.aeo;
            if (a != b) {
                this.aem = a;
                this.t5("NegativeBrushes", b, this.aeo);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "aep", {
        get: function () {
            return this.aen;
        },
        set: function (a) {
            var b = this.aep;
            if (a != b) {
                this.aen = a;
                this.t5("NegativeOutlines", b, this.aep);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "afw", {
        get: function () {
            return this.afl;
        },
        set: function (a) {
            var b = this.afw;
            if (a != b) {
                this.afl = a;
                this.t5("YAxisAbbreviateLargeNumbers", b, this.afw);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "agw", {
        get: function () {
            return this.af9;
        },
        set: function (a) {
            var b = this.agw;
            if (a != b) {
                this.af9 = a;
                this.t5("XAxisZoomMaximumCategoryRange", b, this.agw);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "agx", {
        get: function () {
            return this.aga;
        },
        set: function (a) {
            var b = this.agx;
            if (a != b) {
                this.aga = a;
                this.t5("XAxisZoomMaximumItemSpan", b, this.agx);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "agy", {
        get: function () {
            return this.agb;
        },
        set: function (a) {
            var b = this.agy;
            if (a != b) {
                this.agb = a;
                this.t5("XAxisZoomToCategoryRange", b, this.agy);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "agz", {
        get: function () {
            return this.agc;
        },
        set: function (a) {
            var b = this.agz;
            if (a != b) {
                this.agc = a;
                this.t5("XAxisZoomToCategoryStart", b, this.agz);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "ag0", {
        get: function () {
            return this.agd;
        },
        set: function (a) {
            var b = this.ag0;
            if (a != b) {
                this.agd = a;
                this.t5("XAxisZoomToItemSpan", b, this.ag0);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "afp", {
        get: function () {
            return this.afe;
        },
        set: function (a) {
            var b = this.afp;
            if (a != b) {
                this.afe = a;
                this.t5("IsCategoryHighlightingEnabled", b, this.afp);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "afq", {
        get: function () {
            return this.aff;
        },
        set: function (a) {
            var b = this.afq;
            if (a != b) {
                this.aff = a;
                this.t5("IsItemHighlightingEnabled", b, this.afq);
            }
        },
        enumerable: false,
        configurable: true
    });
    CategoryChart.prototype.get_hi = function () {
        var a = new List$1(DataSeriesType_$type, 0);
        if (TypeRegistrar.isRegistered("AreaSeries")) {
            a.add(2);
        }
        if (TypeRegistrar.isRegistered("ColumnSeries")) {
            a.add(1);
        }
        if (TypeRegistrar.isRegistered("LineSeries")) {
            a.add(0);
        }
        if (TypeRegistrar.isRegistered("PointSeries")) {
            a.add(10);
        }
        if (TypeRegistrar.isRegistered("SplineSeries")) {
            a.add(6);
        }
        if (TypeRegistrar.isRegistered("SplineAreaSeries")) {
            a.add(7);
        }
        if (TypeRegistrar.isRegistered("StepAreaSeries")) {
            a.add(5);
        }
        if (TypeRegistrar.isRegistered("StepLineSeries")) {
            a.add(4);
        }
        if (TypeRegistrar.isRegistered("WaterfallSeries")) {
            a.add(8);
        }
        return a;
    };
    Object.defineProperty(CategoryChart.prototype, "hi", {
        get: function () {
            return this.get_hi();
        },
        enumerable: false,
        configurable: true
    });
    CategoryChart.prototype.hm = function () {
        if (this.af0 == null) {
            this.af0 = CategoryChartMockDataGenerator.a();
        }
        return this.af0;
    };
    CategoryChart.prototype.cv = function (a) {
        if (a != null) {
            var b = _super.prototype.cv.call(this, a);
            if (b == 2) {
                if (a.e6 && this.go) {
                    return 13;
                }
            }
        }
        return _super.prototype.cv.call(this, a);
    };
    CategoryChart.prototype.cx = function (a) {
        if (a != null) {
            var b = _super.prototype.cv.call(this, a);
            if (b == 2) {
                if (a.e6 && this.go) {
                    return 13;
                }
            }
        }
        return _super.prototype.cx.call(this, a);
    };
    CategoryChart.prototype.get_g5 = function () {
        return this.xAxis != null && this.xAxis.categoryMode != 0;
    };
    CategoryChart.prototype.ail = function (a, b) {
        switch (b.propertyName) {
            case "ActualMinimum":
                this.ug("XAxisActualMinimum");
                break;
            case "ActualMaximum":
                this.ug("XAxisActualMaximum");
                break;
        }
    };
    CategoryChart.prototype.aim = function (a, b) {
        switch (b.propertyName) {
            case "ActualMinimumValue":
                this.ug("YAxisActualMinimum");
                break;
            case "ActualMaximumValue":
                this.ug("YAxisActualMaximum");
                break;
        }
    };
    CategoryChart.prototype.ut = function () {
        _super.prototype.ut.call(this);
        this.xAxis.f0 = this.z7 == null ? XYChart.aaj(this.xAxis, this.bh.dataSeries) : this.z7;
        this.xAxis.itemsSource = this.dataChart != null && this.dataChart.series.count > 0 ? this.dataChart.series._inner[0].itemsSource : null;
        if (this.aft) {
            this.tx(function (a) { return a.y9(); });
        }
    };
    Object.defineProperty(CategoryChart.prototype, "xAxis", {
        get: function () {
            return this._xAxis;
        },
        set: function (a) {
            this._xAxis = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChart.prototype, "yAxis", {
        get: function () {
            return this._yAxis;
        },
        set: function (a) {
            this._yAxis = a;
        },
        enumerable: false,
        configurable: true
    });
    CategoryChart.prototype.ae3 = function (a, b) {
        switch (a) {
            case 2: return this.c8(1);
            case 3: return this.c8(10);
            case 0: return this.c8(0);
            case 1: return this.c8(2);
            case 6: return this.c8(6);
            case 7: return this.c8(7);
            case 4: return this.c8(4);
            case 5: return this.c8(5);
            case 8: return this.c8(8);
            case 9: return this.ae2(b);
            default: return this.c8(1);
        }
    };
    CategoryChart.prototype.ae2 = function (a) {
        return this.c8(a);
    };
    CategoryChart.prototype.bg = function (a) {
        switch (this.aev) {
            case 1: return 2;
            case 0: return 0;
            case 3: return 10;
            case 6: return 6;
            case 7: return 7;
            case 5: return 5;
            case 4: return 4;
            case 8: return 8;
            case 9: return a.suggestedSeries;
            default:
            case 2: return 1;
        }
    };
    CategoryChart.prototype.c6 = function (a, b) {
        var c = this.ae3(this.aev, a.suggestedSeries);
        c.zl = a.findMatchingHint(0).path;
        c.xAxis = this.xAxis;
        c.yAxis = this.yAxis;
        return c;
    };
    CategoryChart.prototype.ur = function (a) {
        if (a.suggestedSecondaryAxis == 2) {
            this.yAxis.li = true;
            this.yAxis.l9 = 10;
        }
    };
    CategoryChart.prototype.uu = function () {
        this.yAxis.li = this.afz;
        this.yAxis.l9 = this.ahc;
    };
    CategoryChart.prototype.get_hh = function () {
        return ((function () {
            var $ret = new List$1(IDataSeriesAdapterRule_$type, 0);
            $ret.add(new SimpleCategorySeriesRule());
            $ret.add(new SubCollectionsRule());
            return $ret;
        })());
    };
    Object.defineProperty(CategoryChart.prototype, "hh", {
        get: function () {
            return this.get_hh();
        },
        enumerable: false,
        configurable: true
    });
    CategoryChart.prototype.ss = function (a, b) {
        var c = typeCast(HorizontalAnchoredCategorySeries.$, a);
        if (c != null) {
            c.yx = this.aex;
            c.vp = this.cw(a, b);
        }
    };
    CategoryChart.prototype.aij = function (a) {
        this.aik(function (b, c) { return a(b); });
    };
    CategoryChart.prototype.aik = function (a) {
        if (this.dataChart == null) {
            return;
        }
        for (var b = 0; b < this.dataChart.series.count; b++) {
            var c = typeCast(HorizontalAnchoredCategorySeries.$, this.dataChart.series._inner[b]);
            if (c == null) {
                continue;
            }
            a(c, b);
        }
    };
    CategoryChart.prototype.xp = function () {
        return this.xAxis;
    };
    CategoryChart.prototype.xq = function () {
        return this.yAxis;
    };
    CategoryChart.prototype.ae6 = function () {
        return this.c8(30);
    };
    CategoryChart.prototype.ae7 = function () {
        return this.c8(31);
    };
    CategoryChart.prototype.he = function (a, b) {
        var c = _super.prototype.he.call(this, a, b);
        if (c != null) {
            var d = new List$1(Series.$, 0);
            if (this.afe) {
                d.add(this.ae6());
            }
            if (this.aff) {
                d.add(this.ae7());
            }
            for (var e = 0; e < d.count; e++) {
                var f = d._inner[e];
                f.name = a + getInstanceType(f).typeName;
                c.add(f);
            }
        }
        return c;
    };
    CategoryChart.prototype.bb = function () {
        if (this.ba == 0) {
            return 1;
        }
        else {
            return this.ba;
        }
    };
    CategoryChart.prototype.uz = function (a, b, c) {
        _super.prototype.uz.call(this, a, b, c);
        if (this.bh.dataSeries.count > 0) {
            if (stringIsNullOrEmpty(this.mf)) {
                this.b8.setXMemberPath(a, c.getMemberPathFor(16));
            }
            if (stringIsNullOrEmpty(this.mh)) {
                this.b8.setYMemberPath(a, c.getMemberPathFor(0));
            }
            if (stringIsNullOrEmpty(this.mb)) {
                this.b8.setLabelMemberPath(a, c.getMemberPathFor(0));
            }
            if (stringIsNullOrEmpty(this.l8)) {
                this.b8.setContentMemberPath(a, c.getMemberPathFor(0));
            }
        }
    };
    CategoryChart.prototype.gr = function () {
        if (this.bd == 4 || this.bd == 3) {
            return true;
        }
        else if (this.bd == 0) {
            if (this.aev == 2 || this.aev == 8) {
                return false;
            }
            else if (this.aev == 9 && this.bh != null && this.bh.dataSeries != null && this.bh.dataSeries.count > 0) {
                var a = this.bh.dataSeries._inner[0].suggestedSeries;
                if (a == 1 || a == 8) {
                    return false;
                }
            }
            return true;
        }
        return false;
    };
    CategoryChart.prototype.get_gx = function () {
        return DVContainer.instance.checkLoaded("CategoryChartToolbarFactoryManager");
    };
    CategoryChart.prototype.t5 = function (a, b, c) {
        var _this = this;
        _super.prototype.t5.call(this, a, b, c);
        switch (a) {
            case "ChartType":
                this.ut();
                break;
            case "MarkerCollisionAvoidance":
                this.aij(function (d) { return d.yx = _this.aex; });
                break;
            case "IsTransitionInEnabled":
                this.aij(function (d) { return d.xt = _this.afs; });
                break;
            case "IsSplineShapePartOfRange":
                this.aij(function (d) {
                    if (d.fl) {
                        d.qx(_this.afr);
                    }
                });
                break;
            case "TransitionInMode":
                this.aij(function (d) { return d.xd = _this.aez; });
                break;
            case "TransitionInSpeedType":
                this.aij(function (d) { return d.cv = _this.ae9; });
                break;
            case "XAxisInterval":
                this.xAxis.mr = this.agr;
                break;
            case "XAxisMinorInterval":
                this.xAxis.ms = this.agu;
                break;
            case "XAxisGap":
                this.xAxis.k1 = this.agq;
                break;
            case "XAxisOverlap":
                this.xAxis.la = this.agv;
                break;
            case "XAxisMinimumGapSize":
                this.xAxis.k9 = this.agt;
                break;
            case "XAxisMaximumGap":
                this.xAxis.k8 = this.ags;
                break;
            case "XAxisZoomMaximumCategoryRange":
                this.xAxis.zoomMaximumCategoryRange = this.agw;
                break;
            case "XAxisZoomMaximumItemSpan":
                this.xAxis.zoomMaximumItemSpan = this.agx;
                break;
            case "XAxisZoomToCategoryRange":
                this.xAxis.zoomToCategoryRange = this.agy;
                break;
            case "XAxisZoomToCategoryStart":
                this.xAxis.zoomToCategoryStart = this.agz;
                break;
            case "XAxisZoomToItemSpan":
                this.xAxis.zoomToItemSpan = this.ag0;
                break;
            case "YAxisInterval":
                this.yAxis.l1 = this.ag3;
                break;
            case "YAxisFavorLabellingScaleEnd":
                this.yAxis.ld = this.afy;
                break;
            case "YAxisAutoRangeBufferMode":
                this.yAxis.ku = this.aet;
                break;
            case "YAxisIsLogarithmic":
                this.yAxis.li = this.afz;
                break;
            case "YAxisLogarithmBase":
                this.yAxis.l9 = this.ahc;
                break;
            case "YAxisMinimumValue":
                this.yAxis.l5 = this.ag5;
                break;
            case "YAxisMaximumValue":
                this.yAxis.l4 = this.ag4;
                break;
            case "YAxisMinorInterval":
                this.yAxis.l6 = this.ag6;
                break;
            case "NegativeBrushes":
            case "NegativeOutlines":
                this.aik(function (d, e) {
                    if (d.e7) {
                        d.qw(ArrayExtension.getModulus$1(Brush.$, _this.aeo, e), ArrayExtension.getModulus$1(Brush.$, _this.aep, e));
                    }
                });
                break;
            case "YAxisAbbreviateLargeNumbers":
                this.ac5(function (d) { return d.la = _this.afw; });
                break;
            case "IsCategoryHighlightingEnabled":
            case "IsItemHighlightingEnabled":
                this.ut();
                break;
            case "AutoMarginAndAngleUpdateMode":
                this.tx(function (d) { return d.v3 = _this.aer; });
                break;
            case "ShouldAutoExpandMarginForInitialLabels":
                this.tx(function (d) { return d.wy = _this.aft; });
                break;
            case CategoryChart.ahq:
                this.tx(function (d) { return d.w1 = _this.afu; });
                break;
            case "AutoExpandMarginExtraPadding":
                this.tx(function (d) { return d.xo = _this.agi; });
                break;
            case "AutoExpandMarginMaximumValue":
                this.tx(function (d) { return d.xp = _this.agj; });
                break;
            case CategoryChart.ahx:
                this.ac1(function (d) { return d.b1 = _this.afv; }, a);
                break;
            case CategoryChart.aib:
                this.ac5(function (d) { return d.b1 = _this.afx; });
                break;
        }
    };
    CategoryChart.$t = markType(CategoryChart, 'CategoryChart', XYChart.$);
    CategoryChart.ahq = "ShouldConsiderAutoRotationForInitialLabels";
    CategoryChart.ahx = "XAxisEnhancedIntervalPreferMoreCategoryLabels";
    CategoryChart.aib = "YAxisEnhancedIntervalPreferMoreCategoryLabels";
    return CategoryChart;
}(XYChart));
export { CategoryChart };
