/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Series } from "./Series";
import { IHasCategoryModePreference_$type } from "./IHasCategoryModePreference";
import { Axis } from "./Axis";
import { DependencyProperty } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { Point_$type, typeCast, Delegate_$type, markType, markDep } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { AxisAnnotation } from "./AxisAnnotation";
import { SeriesView } from "./SeriesView";
import { NotImplementedException } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { NumericAxisBase } from "./NumericAxisBase";
import { AxisAnnotationFrame } from "./AxisAnnotationFrame";
import { ScalerParams } from "./ScalerParams";
import { CategoryXAxis } from "./CategoryXAxis";
import { AxisAnnotationFrameManager } from "./AxisAnnotationFrameManager";
import { PropertyMetadata } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { stringFormat } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
/**
 * @hidden
 */
var ValueOverlay = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ValueOverlay, _super);
    function ValueOverlay() {
        var _this = _super.call(this) || this;
        _this.vu = 0;
        _this.vv = 0;
        _this.vr = 0;
        _this.ve = null;
        _this.vk = null;
        _this.vj = null;
        _this.ab = ValueOverlay.$;
        return _this;
    }
    ValueOverlay.prototype.bb = function () {
        return new ValueOverlay();
    };
    ValueOverlay.prototype.il = function (a, b, c) {
        return this.vw;
    };
    ValueOverlay.prototype.vs = function (a, b) {
        var c = Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
        var d = Math.acos((a.x - b.x) / c);
        if ((a.y - b.y) < 0) {
            d = (2 * Math.PI) - d;
        }
        return d;
    };
    ValueOverlay.prototype.uu = function (a, b, c) {
        if (this.vd == null) {
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        var d = this.vt();
        var e = NaN;
        var f = NaN;
        var g = NaN;
        var h = { $type: Point_$type, x: 0.5, y: 0.5 };
        var i = NaN;
        switch (this.vd.a2) {
            case 2:
                i = Math.sqrt(Math.pow(a.x - h.x, 2) + Math.pow(a.y - h.y, 2));
                g = d;
                e = h.x + Math.cos(g) * i;
                f = h.y + Math.sin(g) * i;
                f = this.cl.bx.top + this.cl.bx.height * (f - this.cl.by.top) / this.cl.by.height;
                e = this.cl.bx.left + this.cl.bx.width * (e - this.cl.by.left) / this.cl.by.width;
                break;
            case 0:
                e = d;
                f = a.y;
                f = this.cl.bx.top + this.cl.bx.height * (f - this.cl.by.top) / this.cl.by.height;
                break;
            case 1:
                f = d;
                e = a.x;
                e = this.cl.bx.left + this.cl.bx.width * (e - this.cl.by.left) / this.cl.by.width;
                break;
            case 3:
                g = this.vs(a, h);
                i = d;
                e = h.x + Math.cos(g) * i;
                f = h.y + Math.sin(g) * i;
                f = this.cl.bx.top + this.cl.bx.height * (f - this.cl.by.top) / this.cl.by.height;
                e = this.cl.bx.left + this.cl.bx.width * (e - this.cl.by.left) / this.cl.by.width;
                break;
        }
        return { $type: Point_$type, x: e, y: f };
    };
    ValueOverlay.prototype.jj = function (a) {
        throw new NotImplementedException(0);
    };
    ValueOverlay.prototype.j2 = function (a) {
        return this;
    };
    ValueOverlay.prototype.fx = function (a) {
        return false;
    };
    ValueOverlay.prototype.aq = function (a) {
        var b = typeCast(NumericAxisBase.$, a);
        var c = this.vw;
        if (isNaN_(c) || isInfinity(c)) {
            return null;
        }
        return new AxisRange(c, c);
    };
    ValueOverlay.prototype.qn = function (a) {
        this.n7(true, this.cl);
        if (!this.vi()) {
            if (this.ve != null) {
                this.wf(NaN, this.dr());
            }
            return;
        }
        if (this.fz(a)) {
            if (this.dr()) {
                if (this.c2.g) {
                    this.c2.t();
                }
                var b = this.vu;
                this.vu = this.vv;
                this.vv = b;
            }
            else {
                this.vu = this.vr;
            }
            this.vr = this.vt();
            this.q0();
        }
        else {
            this.vr = this.vt();
            this.we(this.vr, this.vg);
        }
    };
    ValueOverlay.prototype.vt = function () {
        var a, b;
        var c = this.getViewInfo(b, a);
        b = c.p0;
        a = c.p1;
        var d = this.getEffectiveViewport1(this.cl);
        var e = new ScalerParams(0, a, b, this.vd.ch, d);
        return this.vd.ej(this.vw, e);
    };
    ValueOverlay.prototype.we = function (a, b) {
        if (this.vd == null) {
            return;
        }
        var c = typeCast(CategoryAxisBase.$, this.vd);
        if (c != null && !c.ce) {
            if (this.vw > c.lg - 1) {
                return;
            }
            if (c.categoryMode != 0) {
                var d = this.getEffectiveViewport1(b);
                var e = 0.5 * c.getCategorySize(b.by, b.bx, d);
                var f = false;
                if (c.cp && !c.ch) {
                    f = true;
                }
                if (typeCast(CategoryXAxis.$, c) !== null && c.ch) {
                    f = true;
                }
                if (f) {
                    e = -e;
                }
                a += e;
            }
        }
        var g = typeCast(NumericAxisBase.$, this.vd);
        if (g != null) {
            if (this.vw < g.lx || this.vw > g.lw) {
                return;
            }
            if (g.lj && this.vw < 0) {
                return;
            }
        }
        var h;
        switch (this.vd.a2) {
            case 2:
            case 3:
                h = this.vd.j5(a, b.by, b.bx, this.getEffectiveViewport1(b), this.u1(b));
                break;
            default:
                h = this.vd.j5(a, b.by, b.bx, this.getEffectiveViewport1(b), this.u1(b));
                break;
        }
        if (h != null) {
            b.b1(h);
        }
        if (!b.q) {
            this.wf(a, this.dr());
        }
    };
    ValueOverlay.prototype.gw = function (a, b, c) {
        var d = true;
        d = _super.prototype.gw.call(this, a, b, c);
        if (!c.o() || b.isEmpty || a.isEmpty || this.vd == null || this.vd.bi == null) {
            d = false;
        }
        return d;
    };
    ValueOverlay.prototype.rk = function (a, b) {
        this.qm(false);
    };
    ValueOverlay.prototype.rj = function (a, b) {
        this.qm(false);
    };
    ValueOverlay.prototype.oc = function (a, b, c, d) {
        throw new NotImplementedException(0);
    };
    ValueOverlay.prototype.p5 = function (a, b, c, d) {
        _super.prototype.p5.call(this, a, b, c, d);
        switch (b) {
            case ValueOverlay.$$p[11]:
                if (c != null) {
                    c.b0(this);
                }
                if (d != null) {
                    d.ct(this);
                }
                this.qm(false);
                this.ph();
                break;
            case "TransitionProgress":
                this.vv = this.vu + this.i6 * (this.vr - this.vu);
                if (this.dt(this.cl)) {
                    return;
                }
                if (this.i6 == 1) {
                    this.we(this.vr, this.vg);
                    this.pk();
                }
                else {
                    this.we(this.vv, this.vg);
                }
                if (this.c1 != null) {
                    this.c1.p6(this);
                }
                break;
            case ValueOverlay.$$p[13]:
                var e = typeCast(NumericAxisBase.$, this.vd);
                if (e != null) {
                    e.c1();
                }
                this.qm(true);
                this.pi();
                break;
            case ValueOverlay.$$p[12]:
            case ValueOverlay.$$p[10]:
            case ValueOverlay.$$p[1]:
            case ValueOverlay.$$p[0]:
            case ValueOverlay.$$p[3]:
            case ValueOverlay.$$p[4]:
            case ValueOverlay.$$p[9]:
            case ValueOverlay.$$p[5]:
            case ValueOverlay.$$p[6]:
            case ValueOverlay.$$p[7]:
            case ValueOverlay.$$p[8]:
                this.qm(true);
                break;
        }
    };
    ValueOverlay.prototype.o6 = function () {
        _super.prototype.o6.call(this);
        if (this.vd != null) {
            this.vd.h8(false);
        }
    };
    ValueOverlay.prototype.n7 = function (a, b) {
        _super.prototype.n7.call(this, a, b);
        var c = b;
        c.b0();
    };
    ValueOverlay.prototype.vi = function () {
        if (this.vd == null || this.vd.bi == null || isNaN_(this.vw) || this._visibility != 0) {
            return false;
        }
        var a = typeCast(CategoryAxisBase.$, this.vd);
        if (a != null && a.lg == 0) {
            return false;
        }
        return true;
    };
    ValueOverlay.prototype.preferredCategoryMode = function (a) {
        return 0;
    };
    Object.defineProperty(ValueOverlay.prototype, "categoryAxis", {
        get: function () {
            return typeCast(CategoryAxisBase.$, this.vd);
        },
        enumerable: false,
        configurable: true
    });
    ValueOverlay.prototype.ci = function () {
        return new ValueOverlayView(this);
    };
    ValueOverlay.prototype.px = function (a) {
        _super.prototype.px.call(this, a);
        this.vg = typeCast(ValueOverlayView.$, a);
    };
    ValueOverlay.prototype.qo = function (a, b) {
        _super.prototype.qo.call(this, a, b);
        if (!this.gj) {
            this.cl.a4(b);
            return;
        }
        this.cl.a4(b);
        if (this.dt(this.ck) || !this.vi()) {
            return;
        }
        var c = this.getEffectiveViewport1(this.cl);
        var d = this.vd.ej(this.vw, new ScalerParams(0, this.ck.by, a, this.vd.ch, c));
        this.we(d, typeCast(ValueOverlayView.$, this.ck));
        this.gj = false;
    };
    ValueOverlay.prototype.getOffsetValue = function () {
        return 0;
    };
    ValueOverlay.prototype.getCategoryWidth = function () {
        return 0;
    };
    Object.defineProperty(ValueOverlay.prototype, "wx", {
        get: function () {
            return new Thickness(1, this.vn, this.vp, this.vo, this.vm);
        },
        enumerable: false,
        configurable: true
    });
    ValueOverlay.prototype.ag = function () {
        return [this.vd];
    };
    ValueOverlay.prototype.wf = function (a, b) {
        if (isNaN_(a)) {
            if (this.ve != null) {
                AxisAnnotationFrameManager.b(this.ve);
                AxisAnnotationFrameManager.d(this, this.ve, true, this.vj, this.vk, b, this.vx, this.vx, this.vf, this.vf);
            }
            return;
        }
        var c = false;
        if (this.vj == null) {
            c = true;
            this.vk = new List$1(Axis.$, 0);
            this.vj = new Dictionary$2(Axis.$, Pool$1.$.specialize(AxisAnnotation.$), 0);
        }
        this.ve = new AxisAnnotationFrame();
        var d = this.tw;
        if (d == null) {
            d = this.t2;
        }
        var e = this.vd.cp;
        AxisAnnotationFrameManager.c(this.ve, { $type: Point_$type, x: a, y: a }, this, this.c1, this.getEffectiveViewport(), d, this.wu, this.vl, this.ww, this.wv, this.wx, this.vq, this.wu, this.vl, this.ww, this.wv, this.wx, this.vq, !e && this.vh, e && this.vh);
        AxisAnnotationFrameManager.d(this, this.ve, c, this.vj, this.vk, b, this.vx, this.vx, this.vf, this.vf);
    };
    ValueOverlay.prototype.get_isValueOverlay = function () {
        return true;
    };
    ValueOverlay.prototype.wa = function (a) {
        if (this.vd != null) {
            return this.vd.gd(a);
        }
        return null;
    };
    Object.defineProperty(ValueOverlay.prototype, "wc", {
        get: function () {
            var a = this.wa(this.vw);
            return a != null ? a : stringFormat("{0:0.##}", this.vw);
        },
        enumerable: false,
        configurable: true
    });
    ValueOverlay.$t = markType(ValueOverlay, 'ValueOverlay', Series.$, [IHasCategoryModePreference_$type]);
    ValueOverlay.$$p = markDep(DependencyProperty, PropertyMetadata, ValueOverlay, 'raisePropertyChanged', ['AxisAnnotationBackgroundCornerRadius:vl:wg', [1, DeviceUtils.g(3)], 'AxisAnnotationBackground:wu:wh', [Brush.$, null], 'AxisAnnotationFormatLabel:vf:wi', [Delegate_$type], 'AxisAnnotationInterpolatedValuePrecision:vx:wj', [1, -1], 'AxisAnnotationOutline:wv:wk', [Brush.$, null], 'AxisAnnotationPaddingBottom:vm:wl', [1, NaN], 'AxisAnnotationPaddingLeft:vn:wm', [1, NaN], 'AxisAnnotationPaddingRight:vo:wn', [1, NaN], 'AxisAnnotationPaddingTop:vp:wo', [1, NaN], 'AxisAnnotationStrokeThickness:vq:wp', [1, NaN], 'AxisAnnotationTextColor:ww:wq', [Brush.$, null], 'Axis:vd:wr', [Axis.$, null], 'IsAxisAnnotationEnabled:vh:ws', [0, false], 'Value:vw:wt', [1, 0]]);
    return ValueOverlay;
}(Series));
export { ValueOverlay };
/**
 * @hidden
 */
var ValueOverlayView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ValueOverlayView, _super);
    function ValueOverlayView(a) {
        var _this = _super.call(this, a) || this;
        _this.b2 = null;
        _this.b2 = new Path();
        return _this;
    }
    ValueOverlayView.prototype.bd = function () {
        _super.prototype.bd.call(this);
        this.b2._stroke = this.e.tw;
        this.b2.ad = this.e.hv;
        this.b2.ai = this.e.uk;
        this.b2.aj = this.e.ul;
    };
    ValueOverlayView.prototype.be = function () {
        _super.prototype.be.call(this);
        var a = this.br();
        this.b2._stroke = a;
        this.b2.ad = this.e.hv + 3;
        this.b2._stroke = a;
        this.b2.ad = this.e.hv + 3;
    };
    ValueOverlayView.prototype.b1 = function (a) {
        this.b2.an = a;
        this.as();
    };
    ValueOverlayView.prototype.b0 = function () {
        this.b2.an = null;
        this.as();
    };
    ValueOverlayView.prototype.a8 = function (a, b) {
        _super.prototype.a8.call(this, a, b);
        if (a.d) {
            a.t(this.b2);
        }
    };
    ValueOverlayView.prototype.an = function (a) {
        _super.prototype.an.call(this, a);
        this.e.a4.exportPathData(a, this.b2, "ValueOverlayPath", []);
    };
    ValueOverlayView.$t = markType(ValueOverlayView, 'ValueOverlayView', SeriesView.$);
    return ValueOverlayView;
}(SeriesView));
export { ValueOverlayView };
