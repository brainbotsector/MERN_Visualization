import { __extends } from "tslib";
import { IgrAxis } from "./igr-axis";
import { DataToolTipLayerGroupingMode_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionX_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionY_$type } from "igniteui-react-core";
import { DataAbbreviationMode_$type } from "igniteui-react-core";
import { DataLegendValueMode_$type } from "igniteui-react-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-react-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-react-core";
import { DataLegendSummaryType_$type } from "igniteui-react-core";
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
import { DataLegendUnitsMode_$type } from "igniteui-react-core";
import { DataLegendLabelMode_$type } from "igniteui-react-core";
import { IgrAnnotationLayer } from "./igr-annotation-layer";
import { DataToolTipLayer } from "./DataToolTipLayer";
import { ensureBool, ensureEnum, brushToString, stringToBrush, arrayFindByName } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
/**
 * Represents an annotation layer that displays grouped tooltips with summaries for series.
*/
var IgrDataToolTipLayer = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrDataToolTipLayer, _super);
    function IgrDataToolTipLayer(props) {
        return _super.call(this, props) || this;
    }
    IgrDataToolTipLayer.prototype.createImplementation = function () {
        return new DataToolTipLayer();
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "isAnnotationHoverLayer", {
        /**
         * Gets whether the series is an annotation layer displayed only when hovering over the chart.
        */
        get: function () {
            return this.i.ec;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "isDefaultTooltipBehaviorDisabled", {
        /**
         * Gets whether the default tooltip behaviors for the chart are disabled if this layer is present.
        */
        get: function () {
            return this.i.en;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "targetAxis", {
        /**
         * Gets or sets the Axis to target this annotation to. If null, this annotation layer will not render content.
        */
        get: function () {
            var r = this.i.yl;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgrAxis._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.yl = null : this.i.yl = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "useInterpolation", {
        /**
         * Gets or sets whether to use value interpolation when drawing the tooltips.
        */
        get: function () {
            return this.i.z2;
        },
        set: function (v) {
            this.i.z2 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupingMode", {
        /**
         * Gets or sets the grouping mode to apply to use for the tooltip layer.
        */
        get: function () {
            return this.i.y3;
        },
        set: function (v) {
            this.i.y3 = ensureEnum(DataToolTipLayerGroupingMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "actualGroupingMode", {
        /**
         * Gets the actual resolved tooltip layer grouping mode.
        */
        get: function () {
            return this.i.y2;
        },
        set: function (v) {
            this.i.y2 = ensureEnum(DataToolTipLayerGroupingMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "positionOffsetX", {
        /**
         * Gets or sets the offset of the tooltip layer on the X axis.
        */
        get: function () {
            return this.i.aab;
        },
        set: function (v) {
            this.i.aab = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "positionOffsetY", {
        /**
         * Gets or sets the offset of the tooltip layer on the Y axis.
        */
        get: function () {
            return this.i.aac;
        },
        set: function (v) {
            this.i.aac = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "defaultPositionOffsetX", {
        /**
         * Gets or sets the default offset of the tooltip layer on the X axis.
        */
        get: function () {
            return this.i.z9;
        },
        set: function (v) {
            this.i.z9 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "defaultPositionOffsetY", {
        /**
         * Gets or sets the default offset of the tooltip layer on the Y axis.
        */
        get: function () {
            return this.i.aaa;
        },
        set: function (v) {
            this.i.aaa = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupedPositionModeX", {
        /**
         * Gets or sets the tooltip position mode on the X axis for grouped series.
        */
        get: function () {
            return this.i.yv;
        },
        set: function (v) {
            this.i.yv = ensureEnum(DataTooltipGroupedPositionX_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "actualGroupedPositionModeX", {
        /**
         * Gets the actual resolved tooltip position mode on the X axis for grouped series.
        */
        get: function () {
            return this.i.yu;
        },
        set: function (v) {
            this.i.yu = ensureEnum(DataTooltipGroupedPositionX_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupedPositionModeY", {
        /**
         * Gets or sets the tooltip position mode on the Y axis for grouped series.
        */
        get: function () {
            return this.i.yz;
        },
        set: function (v) {
            this.i.yz = ensureEnum(DataTooltipGroupedPositionY_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "actualGroupedPositionModeY", {
        /**
         * Gets the actual resolved tooltip position mode on the Y axis for grouped series.
        */
        get: function () {
            return this.i.yy;
        },
        set: function (v) {
            this.i.yy = ensureEnum(DataTooltipGroupedPositionY_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "shouldUpdateWhenSeriesDataChanges", {
        /**
         * Gets or sets whether the data legend should update when the series data is mutated.
        */
        get: function () {
            return this.i.z1;
        },
        set: function (v) {
            this.i.z1 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "includedSeries", {
        /**
         * Gets or sets indexes, titles, or names of series to include in displaying in the data legend, e.g. "0, 1" or "Series1 Title, Series2 Title"
         * The ExcludedSeries property takes precedence over values of IncludedSeries property
        */
        get: function () {
            return this.i.yi;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.yi = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "excludedSeries", {
        /**
         * Gets or sets indexes, titles, or names of series to exclude from displaying in the data legend, e.g. "0, 1" or "Series1 Title, Series2 Title"
         * The ExcludedSeries property takes precedence over values of IncludedSeries property
        */
        get: function () {
            return this.i.yd;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.yd = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "includedColumns", {
        /**
         * Gets or sets names of data columns or their labels to include in displaying in the data tooltip, e.g. "High, Low" or "H, L"
         * The ExcludedColumns property takes precedence over values of IncludedColumns property
        */
        get: function () {
            return this.i.yh;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.yh = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "excludedColumns", {
        /**
         * Gets or sets names of data columns or their labels to exclude from displaying in the data tooltip, e.g. "High, Low" or "H, L"
         * The ExcludedColumns property takes precedence over values of IncludedColumns property
        */
        get: function () {
            return this.i.yc;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.yc = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatAbbreviation", {
        /**
         * Gets or sets mode for abbreviating large numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.ym;
        },
        set: function (v) {
            this.i.ym = ensureEnum(DataAbbreviationMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatMaxFractions", {
        /**
         * Gets or sets maximum digits for formatting numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.abb;
        },
        set: function (v) {
            this.i.abb = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatMinFractions", {
        /**
         * Gets or sets minimum digits for formatting numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.abc;
        },
        set: function (v) {
            this.i.abc = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatMode", {
        /**
         * Gets or sets the mode for displaying values in the data legend, e.g. Currency ($500.25), Decimal (500.25), Integer (500)
        */
        get: function () {
            return this.i.ys;
        },
        set: function (v) {
            this.i.ys = ensureEnum(DataLegendValueMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatCulture", {
        /**
         * Gets or sets globalization culture when displaying values as currencies, e.g. use "en-GB" to display British pound symbol when the ValueFormatMode property is set to 'Currency' mode
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.adb;
        },
        set: function (v) {
            this.i.adb = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatUseGrouping", {
        /**
         * Gets or sets whether or not use grouping separator, e.g, 15,000 for 15000
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.z3;
        },
        set: function (v) {
            this.i.z3 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatString", {
        /**
         * Gets or sets the format string for values displayed in the data legend.
        */
        get: function () {
            return this.i.adh;
        },
        set: function (v) {
            this.i.adh = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatSpecifiers", {
        /**
         * Gets or sets the format specifiers to use with the ValueFormatString string.
        */
        get: function () {
            return this.i.yj;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.yj = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueRowMarginBottom", {
        get: function () {
            return this.i.agf ? this.i.agf.bottom : NaN;
        },
        set: function (v) {
            this.ensureValueRowMargin();
            this.i.agf.bottom = +v;
            this.i.agf = this.i.agf;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueRowMarginLeft", {
        get: function () {
            return this.i.agf ? this.i.agf.left : NaN;
        },
        set: function (v) {
            this.ensureValueRowMargin();
            this.i.agf.left = +v;
            this.i.agf = this.i.agf;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueRowMarginRight", {
        get: function () {
            return this.i.agf ? this.i.agf.right : NaN;
        },
        set: function (v) {
            this.ensureValueRowMargin();
            this.i.agf.right = +v;
            this.i.agf = this.i.agf;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueRowMarginTop", {
        get: function () {
            return this.i.agf ? this.i.agf.top : NaN;
        },
        set: function (v) {
            this.ensureValueRowMargin();
            this.i.agf.top = +v;
            this.i.agf = this.i.agf;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureValueRowMargin = function () {
        if (this.i.agf) {
            return;
        }
        this.i.agf = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueRowVisible", {
        /**
         * Gets or sets whether to show series rows.
        */
        get: function () {
            return this.i.z4;
        },
        set: function (v) {
            this.i.z4 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextWhenMissingData", {
        /**
         * Gets or sets text displayed when data column is missing a value, e.g. "no data"
        */
        get: function () {
            return this.i.adq;
        },
        set: function (v) {
            this.i.adq = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextUseSeriesColors", {
        /**
         * Gets or sets whether to use series colors when displaying values in the legend
        */
        get: function () {
            return this.i.z5;
        },
        set: function (v) {
            this.i.z5 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextMarginBottom", {
        get: function () {
            return this.i.agg ? this.i.agg.bottom : NaN;
        },
        set: function (v) {
            this.ensureValueTextMargin();
            this.i.agg.bottom = +v;
            this.i.agg = this.i.agg;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextMarginLeft", {
        get: function () {
            return this.i.agg ? this.i.agg.left : NaN;
        },
        set: function (v) {
            this.ensureValueTextMargin();
            this.i.agg.left = +v;
            this.i.agg = this.i.agg;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextMarginRight", {
        get: function () {
            return this.i.agg ? this.i.agg.right : NaN;
        },
        set: function (v) {
            this.ensureValueTextMargin();
            this.i.agg.right = +v;
            this.i.agg = this.i.agg;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextMarginTop", {
        get: function () {
            return this.i.agg ? this.i.agg.top : NaN;
        },
        set: function (v) {
            this.ensureValueTextMargin();
            this.i.agg.top = +v;
            this.i.agg = this.i.agg;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureValueTextMargin = function () {
        if (this.i.agg) {
            return;
        }
        this.i.agg = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.afy);
        },
        set: function (v) {
            this.i.afy = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.zr == null) {
                return null;
            }
            return this.i.zr.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.zr = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerFormatString", {
        /**
         * Gets or sets the format string for header text displayed in the data legend.
        */
        get: function () {
            return this.i.abz;
        },
        set: function (v) {
            this.i.abz = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerFormatSpecifiers", {
        /**
         * Gets or sets the format specifiers to use with the HeaderFormatString string.
        */
        get: function () {
            return this.i.yg;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.yg = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerFormatCulture", {
        /**
         * Gets or sets globalization culture when displaying header as date time
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get: function () {
            return this.i.abv;
        },
        set: function (v) {
            this.i.abv = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerFormatDate", {
        /**
         * Gets or sets date format for the header
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get: function () {
            return this.i.yn;
        },
        set: function (v) {
            this.i.yn = ensureEnum(DataLegendHeaderDateMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerFormatTime", {
        /**
         * Gets or sets time format for the header
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get: function () {
            return this.i.yo;
        },
        set: function (v) {
            this.i.yo = ensureEnum(DataLegendHeaderTimeMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerText", {
        /**
         * Gets or sets the HeaderText for the data legend.
        */
        get: function () {
            return this.i.ab4;
        },
        set: function (v) {
            this.i.ab4 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextColor", {
        /**
         * Gets or sets the header text color.
        */
        get: function () {
            return brushToString(this.i.afq);
        },
        set: function (v) {
            this.i.afq = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextMarginBottom", {
        get: function () {
            return this.i.af9 ? this.i.af9.bottom : NaN;
        },
        set: function (v) {
            this.ensureHeaderTextMargin();
            this.i.af9.bottom = +v;
            this.i.af9 = this.i.af9;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextMarginLeft", {
        get: function () {
            return this.i.af9 ? this.i.af9.left : NaN;
        },
        set: function (v) {
            this.ensureHeaderTextMargin();
            this.i.af9.left = +v;
            this.i.af9 = this.i.af9;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextMarginRight", {
        get: function () {
            return this.i.af9 ? this.i.af9.right : NaN;
        },
        set: function (v) {
            this.ensureHeaderTextMargin();
            this.i.af9.right = +v;
            this.i.af9 = this.i.af9;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextMarginTop", {
        get: function () {
            return this.i.af9 ? this.i.af9.top : NaN;
        },
        set: function (v) {
            this.ensureHeaderTextMargin();
            this.i.af9.top = +v;
            this.i.af9 = this.i.af9;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureHeaderTextMargin = function () {
        if (this.i.af9) {
            return;
        }
        this.i.af9 = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerRowMarginBottom", {
        get: function () {
            return this.i.af8 ? this.i.af8.bottom : NaN;
        },
        set: function (v) {
            this.ensureHeaderRowMargin();
            this.i.af8.bottom = +v;
            this.i.af8 = this.i.af8;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerRowMarginLeft", {
        get: function () {
            return this.i.af8 ? this.i.af8.left : NaN;
        },
        set: function (v) {
            this.ensureHeaderRowMargin();
            this.i.af8.left = +v;
            this.i.af8 = this.i.af8;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerRowMarginRight", {
        get: function () {
            return this.i.af8 ? this.i.af8.right : NaN;
        },
        set: function (v) {
            this.ensureHeaderRowMargin();
            this.i.af8.right = +v;
            this.i.af8 = this.i.af8;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerRowMarginTop", {
        get: function () {
            return this.i.af8 ? this.i.af8.top : NaN;
        },
        set: function (v) {
            this.ensureHeaderRowMargin();
            this.i.af8.top = +v;
            this.i.af8 = this.i.af8;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureHeaderRowMargin = function () {
        if (this.i.af8) {
            return;
        }
        this.i.af8 = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerRowVisible", {
        /**
         * Gets or sets whether to show Header row.
        */
        get: function () {
            return this.i.zu;
        },
        set: function (v) {
            this.i.zu = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextStyle", {
        /**
         * Gets or Sets the style to use for the header text.
        */
        get: function () {
            if (this.i.zj == null) {
                return null;
            }
            return this.i.zj.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.zj = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupRowVisible", {
        /**
         * Gets or sets whether to show Header row.
        */
        get: function () {
            return this.i.zt;
        },
        set: function (v) {
            this.i.zt = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupTextColor", {
        /**
         * Gets or sets the Group text color.
        */
        get: function () {
            return brushToString(this.i.afp);
        },
        set: function (v) {
            this.i.afp = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupTextMarginBottom", {
        get: function () {
            return this.i.af7 ? this.i.af7.bottom : NaN;
        },
        set: function (v) {
            this.ensureGroupTextMargin();
            this.i.af7.bottom = +v;
            this.i.af7 = this.i.af7;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupTextMarginLeft", {
        get: function () {
            return this.i.af7 ? this.i.af7.left : NaN;
        },
        set: function (v) {
            this.ensureGroupTextMargin();
            this.i.af7.left = +v;
            this.i.af7 = this.i.af7;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupTextMarginRight", {
        get: function () {
            return this.i.af7 ? this.i.af7.right : NaN;
        },
        set: function (v) {
            this.ensureGroupTextMargin();
            this.i.af7.right = +v;
            this.i.af7 = this.i.af7;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupTextMarginTop", {
        get: function () {
            return this.i.af7 ? this.i.af7.top : NaN;
        },
        set: function (v) {
            this.ensureGroupTextMargin();
            this.i.af7.top = +v;
            this.i.af7 = this.i.af7;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureGroupTextMargin = function () {
        if (this.i.af7) {
            return;
        }
        this.i.af7 = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupRowMarginBottom", {
        get: function () {
            return this.i.af6 ? this.i.af6.bottom : NaN;
        },
        set: function (v) {
            this.ensureGroupRowMargin();
            this.i.af6.bottom = +v;
            this.i.af6 = this.i.af6;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupRowMarginLeft", {
        get: function () {
            return this.i.af6 ? this.i.af6.left : NaN;
        },
        set: function (v) {
            this.ensureGroupRowMargin();
            this.i.af6.left = +v;
            this.i.af6 = this.i.af6;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupRowMarginRight", {
        get: function () {
            return this.i.af6 ? this.i.af6.right : NaN;
        },
        set: function (v) {
            this.ensureGroupRowMargin();
            this.i.af6.right = +v;
            this.i.af6 = this.i.af6;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupRowMarginTop", {
        get: function () {
            return this.i.af6 ? this.i.af6.top : NaN;
        },
        set: function (v) {
            this.ensureGroupRowMargin();
            this.i.af6.top = +v;
            this.i.af6 = this.i.af6;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureGroupRowMargin = function () {
        if (this.i.af6) {
            return;
        }
        this.i.af6 = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupTextStyle", {
        /**
         * Gets or Sets the style to use for the Group text.
        */
        get: function () {
            if (this.i.zi == null) {
                return null;
            }
            return this.i.zi.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.zi = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextColor", {
        /**
         * Gets or sets the summary text color.
        */
        get: function () {
            return brushToString(this.i.aft);
        },
        set: function (v) {
            this.i.aft = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextStyle", {
        /**
         * Gets or Sets the style to use for the summary text.
        */
        get: function () {
            if (this.i.zm == null) {
                return null;
            }
            return this.i.zm.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.zm = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryType", {
        /**
         * Gets or sets the SummaryType for the data legend.
        */
        get: function () {
            return this.i.yq;
        },
        set: function (v) {
            this.i.yq = ensureEnum(DataLegendSummaryType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleText", {
        /**
         * Gets or sets the SummaryTitleText for the data legend.
        */
        get: function () {
            return this.i.acn;
        },
        set: function (v) {
            this.i.acn = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextMarginBottom", {
        get: function () {
            return this.i.agc ? this.i.agc.bottom : NaN;
        },
        set: function (v) {
            this.ensureSummaryTitleTextMargin();
            this.i.agc.bottom = +v;
            this.i.agc = this.i.agc;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextMarginLeft", {
        get: function () {
            return this.i.agc ? this.i.agc.left : NaN;
        },
        set: function (v) {
            this.ensureSummaryTitleTextMargin();
            this.i.agc.left = +v;
            this.i.agc = this.i.agc;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextMarginRight", {
        get: function () {
            return this.i.agc ? this.i.agc.right : NaN;
        },
        set: function (v) {
            this.ensureSummaryTitleTextMargin();
            this.i.agc.right = +v;
            this.i.agc = this.i.agc;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextMarginTop", {
        get: function () {
            return this.i.agc ? this.i.agc.top : NaN;
        },
        set: function (v) {
            this.ensureSummaryTitleTextMargin();
            this.i.agc.top = +v;
            this.i.agc = this.i.agc;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureSummaryTitleTextMargin = function () {
        if (this.i.agc) {
            return;
        }
        this.i.agc = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryRowMarginBottom", {
        get: function () {
            return this.i.agb ? this.i.agb.bottom : NaN;
        },
        set: function (v) {
            this.ensureSummaryRowMargin();
            this.i.agb.bottom = +v;
            this.i.agb = this.i.agb;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryRowMarginLeft", {
        get: function () {
            return this.i.agb ? this.i.agb.left : NaN;
        },
        set: function (v) {
            this.ensureSummaryRowMargin();
            this.i.agb.left = +v;
            this.i.agb = this.i.agb;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryRowMarginRight", {
        get: function () {
            return this.i.agb ? this.i.agb.right : NaN;
        },
        set: function (v) {
            this.ensureSummaryRowMargin();
            this.i.agb.right = +v;
            this.i.agb = this.i.agb;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryRowMarginTop", {
        get: function () {
            return this.i.agb ? this.i.agb.top : NaN;
        },
        set: function (v) {
            this.ensureSummaryRowMargin();
            this.i.agb.top = +v;
            this.i.agb = this.i.agb;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureSummaryRowMargin = function () {
        if (this.i.agb) {
            return;
        }
        this.i.agb = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryValueTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.afv);
        },
        set: function (v) {
            this.i.afv = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryValueTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.zo == null) {
                return null;
            }
            return this.i.zo.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.zo = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryLabelText", {
        /**
         * Gets or sets the units text for the data legend.
        */
        get: function () {
            return this.i.aci;
        },
        set: function (v) {
            this.i.aci = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryLabelTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.afs);
        },
        set: function (v) {
            this.i.afs = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryLabelTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.zl == null) {
                return null;
            }
            return this.i.zl.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.zl = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryUnitsText", {
        /**
         * Gets or sets the units text for the data legend.
        */
        get: function () {
            return this.i.act;
        },
        set: function (v) {
            this.i.act = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryUnitsTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.afu);
        },
        set: function (v) {
            this.i.afu = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryUnitsTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.zn == null) {
                return null;
            }
            return this.i.zn.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.zn = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "badgeMarginBottom", {
        get: function () {
            return this.i.af5 ? this.i.af5.bottom : NaN;
        },
        set: function (v) {
            this.ensureBadgeMargin();
            this.i.af5.bottom = +v;
            this.i.af5 = this.i.af5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "badgeMarginLeft", {
        get: function () {
            return this.i.af5 ? this.i.af5.left : NaN;
        },
        set: function (v) {
            this.ensureBadgeMargin();
            this.i.af5.left = +v;
            this.i.af5 = this.i.af5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "badgeMarginRight", {
        get: function () {
            return this.i.af5 ? this.i.af5.right : NaN;
        },
        set: function (v) {
            this.ensureBadgeMargin();
            this.i.af5.right = +v;
            this.i.af5 = this.i.af5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "badgeMarginTop", {
        get: function () {
            return this.i.af5 ? this.i.af5.top : NaN;
        },
        set: function (v) {
            this.ensureBadgeMargin();
            this.i.af5.top = +v;
            this.i.af5 = this.i.af5;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureBadgeMargin = function () {
        if (this.i.af5) {
            return;
        }
        this.i.af5 = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "badgeShape", {
        /**
         * Gets or sets the BadgeShape for the data legend.
        */
        get: function () {
            return this.i.y7;
        },
        set: function (v) {
            this.i.y7 = ensureEnum(LegendItemBadgeShape_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsDisplayMode", {
        /**
         * Gets or sets the UnitsMode for the data legend.
        */
        get: function () {
            return this.i.yr;
        },
        set: function (v) {
            this.i.yr = ensureEnum(DataLegendUnitsMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsText", {
        /**
         * Gets or sets the units text for the data legend.
        */
        get: function () {
            return this.i.ac4;
        },
        set: function (v) {
            this.i.ac4 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.afx);
        },
        set: function (v) {
            this.i.afx = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextMarginBottom", {
        get: function () {
            return this.i.age ? this.i.age.bottom : NaN;
        },
        set: function (v) {
            this.ensureUnitsTextMargin();
            this.i.age.bottom = +v;
            this.i.age = this.i.age;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextMarginLeft", {
        get: function () {
            return this.i.age ? this.i.age.left : NaN;
        },
        set: function (v) {
            this.ensureUnitsTextMargin();
            this.i.age.left = +v;
            this.i.age = this.i.age;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextMarginRight", {
        get: function () {
            return this.i.age ? this.i.age.right : NaN;
        },
        set: function (v) {
            this.ensureUnitsTextMargin();
            this.i.age.right = +v;
            this.i.age = this.i.age;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextMarginTop", {
        get: function () {
            return this.i.age ? this.i.age.top : NaN;
        },
        set: function (v) {
            this.ensureUnitsTextMargin();
            this.i.age.top = +v;
            this.i.age = this.i.age;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureUnitsTextMargin = function () {
        if (this.i.age) {
            return;
        }
        this.i.age = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.zq == null) {
                return null;
            }
            return this.i.zq.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.zq = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextMarginBottom", {
        get: function () {
            return this.i.agd ? this.i.agd.bottom : NaN;
        },
        set: function (v) {
            this.ensureTitleTextMargin();
            this.i.agd.bottom = +v;
            this.i.agd = this.i.agd;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextMarginLeft", {
        get: function () {
            return this.i.agd ? this.i.agd.left : NaN;
        },
        set: function (v) {
            this.ensureTitleTextMargin();
            this.i.agd.left = +v;
            this.i.agd = this.i.agd;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextMarginRight", {
        get: function () {
            return this.i.agd ? this.i.agd.right : NaN;
        },
        set: function (v) {
            this.ensureTitleTextMargin();
            this.i.agd.right = +v;
            this.i.agd = this.i.agd;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextMarginTop", {
        get: function () {
            return this.i.agd ? this.i.agd.top : NaN;
        },
        set: function (v) {
            this.ensureTitleTextMargin();
            this.i.agd.top = +v;
            this.i.agd = this.i.agd;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureTitleTextMargin = function () {
        if (this.i.agd) {
            return;
        }
        this.i.agd = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextColor", {
        /**
         * Gets or sets the display text color.
        */
        get: function () {
            return brushToString(this.i.afw);
        },
        set: function (v) {
            this.i.afw = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextStyle", {
        /**
         * Gets or Sets the style to use for the display text.
        */
        get: function () {
            if (this.i.zp == null) {
                return null;
            }
            return this.i.zp.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.zp = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelDisplayMode", {
        /**
         * Gets or sets the mode for displaying labels before series values in the data legend, e.g. O: H: L: C: for financial series
        */
        get: function () {
            return this.i.yp;
        },
        set: function (v) {
            this.i.yp = ensureEnum(DataLegendLabelMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.afr);
        },
        set: function (v) {
            this.i.afr = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextMarginBottom", {
        get: function () {
            return this.i.aga ? this.i.aga.bottom : NaN;
        },
        set: function (v) {
            this.ensureLabelTextMargin();
            this.i.aga.bottom = +v;
            this.i.aga = this.i.aga;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextMarginLeft", {
        get: function () {
            return this.i.aga ? this.i.aga.left : NaN;
        },
        set: function (v) {
            this.ensureLabelTextMargin();
            this.i.aga.left = +v;
            this.i.aga = this.i.aga;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextMarginRight", {
        get: function () {
            return this.i.aga ? this.i.aga.right : NaN;
        },
        set: function (v) {
            this.ensureLabelTextMargin();
            this.i.aga.right = +v;
            this.i.aga = this.i.aga;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextMarginTop", {
        get: function () {
            return this.i.aga ? this.i.aga.top : NaN;
        },
        set: function (v) {
            this.ensureLabelTextMargin();
            this.i.aga.top = +v;
            this.i.aga = this.i.aga;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureLabelTextMargin = function () {
        if (this.i.aga) {
            return;
        }
        this.i.aga = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.zk == null) {
                return null;
            }
            return this.i.zk.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.zk = fi;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.targetAxis && this.targetAxis.name && this.targetAxis.name == name) {
            return this.targetAxis;
        }
        if (this.valueFormatSpecifiers != null && arrayFindByName(this.valueFormatSpecifiers, name)) {
            return arrayFindByName(this.valueFormatSpecifiers, name);
        }
        if (this.headerFormatSpecifiers != null && arrayFindByName(this.headerFormatSpecifiers, name)) {
            return arrayFindByName(this.headerFormatSpecifiers, name);
        }
        return null;
    };
    IgrDataToolTipLayer.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.targetAxis && this.targetAxis._styling) {
            this.targetAxis._styling(container, component, this);
        }
        this._inStyling = false;
    };
    /**
     * Hides any tooltips presented by the layer, if any.
    
    */
    IgrDataToolTipLayer.prototype.hideToolTips = function () {
        this.i.o3();
    };
    /**
     * Hides any tooltips presented by the layer, if any.
    
    */
    IgrDataToolTipLayer.prototype.hideToolTipsImmediate = function () {
        this.i.o4();
    };
    return IgrDataToolTipLayer;
}(IgrAnnotationLayer));
export { IgrDataToolTipLayer };
