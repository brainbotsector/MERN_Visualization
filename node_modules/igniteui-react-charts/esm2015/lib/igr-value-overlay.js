import { IgrAxis } from "./igr-axis";
import { IgrSeries } from "./igr-series";
import { ValueOverlay } from "./ValueOverlay";
import { ensureBool, brushToString, stringToBrush, toPoint, fromPoint } from "igniteui-react-core";
/**
 * Represents the class of the value overlay. The value overlay is a line or circle representing a value on an axis.
*/
export class IgrValueOverlay extends IgrSeries {
    createImplementation() {
        return new ValueOverlay();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
        this._axisName = null;
    }
    /**
     * Gets or sets the axis used by the value overlay.
    */
    get axis() {
        const r = this.i.vd;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = IgrAxis._createFromInternal(r);
            if (e) {
                e._implementation = r;
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set axis(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.vd = null : this.i.vd = v.i;
    }
    /**
    * Gets or sets the name to use to resolve axis from markup.
    */
    get axisName() {
        return this._axisName;
    }
    set axisName(v) {
        this._axisName = v;
    }
    /**
     * Gets or sets the value of the overlay.
    */
    get value() {
        return this.i.vw;
    }
    set value(v) {
        this.i.vw = +v;
    }
    /**
     * Gets or sets whether to draw annotations over the axes where the crosshair meets with them.
    */
    get isAxisAnnotationEnabled() {
        return this.i.vh;
    }
    set isAxisAnnotationEnabled(v) {
        this.i.vh = ensureBool(v);
    }
    /**
     * Sets or gets a function which takes an object that produces a formatted label for the axis annotation.
    */
    get axisAnnotationFormatLabel() {
        return this.i.vf;
    }
    set axisAnnotationFormatLabel(v) {
        this.i.vf = v;
    }
    /**
     * Gets or sets the color to use for the axis annotation text. Leave unset for an automatic value.
    */
    get axisAnnotationTextColor() {
        return brushToString(this.i.ww);
    }
    set axisAnnotationTextColor(v) {
        this.i.ww = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the axis annotation backing. Leave unset for an automatic value.
    */
    get axisAnnotationBackground() {
        return brushToString(this.i.wu);
    }
    set axisAnnotationBackground(v) {
        this.i.wu = stringToBrush(v);
    }
    /**
     * Gets or sets the corner radius to use for the axis annotation backing. Leave unset for an automatic value.
    */
    get axisAnnotationBackgroundCornerRadius() {
        return this.i.vl;
    }
    set axisAnnotationBackgroundCornerRadius(v) {
        this.i.vl = +v;
    }
    /**
     * Gets or sets the precision to use displaying values for interpolated positions.
    */
    get axisAnnotationInterpolatedValuePrecision() {
        return this.i.vx;
    }
    set axisAnnotationInterpolatedValuePrecision(v) {
        this.i.vx = +v;
    }
    /**
     * Gets or sets the color to use for the axis annotation outline. Leave unset for an automatic value.
    */
    get axisAnnotationOutline() {
        return brushToString(this.i.wv);
    }
    set axisAnnotationOutline(v) {
        this.i.wv = stringToBrush(v);
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get axisAnnotationPaddingLeft() {
        return this.i.vn;
    }
    set axisAnnotationPaddingLeft(v) {
        this.i.vn = +v;
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get axisAnnotationPaddingTop() {
        return this.i.vp;
    }
    set axisAnnotationPaddingTop(v) {
        this.i.vp = +v;
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get axisAnnotationPaddingRight() {
        return this.i.vo;
    }
    set axisAnnotationPaddingRight(v) {
        this.i.vo = +v;
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get axisAnnotationPaddingBottom() {
        return this.i.vm;
    }
    set axisAnnotationPaddingBottom(v) {
        this.i.vm = +v;
    }
    /**
     * Gets or sets the stroke thickness for the axis annotation backing. Leave unset for an automatic value.
    */
    get axisAnnotationStrokeThickness() {
        return this.i.vq;
    }
    set axisAnnotationStrokeThickness(v) {
        this.i.vq = +v;
    }
    /**
     * Gets whether the series is a value overlay.
    */
    get isValueOverlay() {
        return this.i.isValueOverlay;
    }
    get labelResolved() {
        return this.i.wc;
    }
    bindAxes(axes) {
        super.bindAxes(axes);
        for (let i = 0; i < axes.length; i++) {
            if (this.axisName && this.axisName.length > 0 &&
                axes[i].name == this.axisName) {
                this.axis = axes[i];
            }
        }
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.axis && this.axis.name && this.axis.name == name) {
            return this.axis;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.axis && this.axis._styling) {
            this.axis._styling(container, component, this);
        }
        this._inStyling = false;
    }
    getSeriesValue(world, useInterpolation, skipUnknowns) {
        let iv = this.i.il(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    }
    getSeriesValuePosition(world, useInterpolation, skipUnknowns) {
        let iv = this.i.uu(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    }
    /**
     * Gets the item index associated with the specified world position
    
    * @param world
    */
    getItemIndex(world) {
        let iv = this.i.jj(toPoint(world));
        return (iv);
    }
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world) {
        let iv = this.i.j2(toPoint(world));
        return (iv);
    }
    /**
     * Requests that the provided item should be brought into view if possible.
    
    * @param item  * The item to attempt to bring into view.
    */
    scrollIntoView(item) {
        let iv = this.i.fx(item);
        return (iv);
    }
    /**
     * Gets the label for a data item.
    
    * @param value  * The unscaled value to get a label for.
    */
    getLabel(value) {
        let iv = this.i.wa(value);
        return (iv);
    }
}
