/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Series } from "./Series";
import { NumericXAxis } from "./NumericXAxis";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { Color } from "igniteui-react-core";
import { ScatterFrame } from "./ScatterFrame";
import { Defaults } from "./Defaults";
import { KDTree2D } from "./KDTree2D";
import { Point_$type, typeGetValue, runOn, delegateRemove, typeCast, delegateCombine, markType, markDep, toNullable } from "igniteui-react-core";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { KDPointData } from "./KDPointData";
import { ScalerParams } from "./ScalerParams";
import { ProgressiveLoadStatusEventArgs } from "./ProgressiveLoadStatusEventArgs";
import { SearchArgs } from "./SearchArgs";
import { KDTreeNode2D } from "./KDTreeNode2D";
import { AxisRange } from "./AxisRange";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity, logBase, intDivide } from "igniteui-react-core";
import { boxArray$1, arrayShallowClone } from "igniteui-react-core";
import { dateNow } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { CanvasViewRenderer } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
/**
 * @hidden
 */
export let HighDensityScatterSeries = /*@__PURE__*/ (() => {
    class HighDensityScatterSeries extends Series {
        bb() {
            return new HighDensityScatterSeries();
        }
        get_e9() {
            return true;
        }
        i0() {
            if (!isNaN_(this.iz)) {
                return super.i0();
            }
            return Defaults.q;
        }
        constructor() {
            super();
            this.vq = null;
            this.vs = null;
            this.w1 = 0;
            this.vu = false;
            this.wg = Defaults.aq.o;
            this.wf = Defaults.aq.n;
            this.we = Defaults.aq.m;
            this.wd = Defaults.aq.l;
            this.wc = Defaults.ap.o;
            this.wb = Defaults.ap.n;
            this.wa = Defaults.ap.m;
            this.v9 = Defaults.ap.l;
            this.vi = null;
            this.vn = null;
            this.vo = null;
            this.vj = null;
            this.vl = null;
            this.vw = false;
            this.w2 = 0;
            this.w4 = 0;
            this.wy = 0;
            this.wx = 0;
            this.progressiveLoadStatusChanged = null;
            this.v1 = null;
            this.v7 = 0;
            this.v6 = 0;
            this.v8 = 0;
            this.wn = 0;
            this.wl = 0;
            this.wm = 0;
            this.wo = 0;
            this.wq = 0;
            this.ws = 0;
            this.wr = 0;
            this.wp = 0;
            this.v3 = 0;
            this.v4 = 0;
            this.v5 = 0;
            this.v2 = 0;
            this.w0 = 0;
            this.wz = 0;
            this.vf = null;
            this.w3 = 0;
            this.vv = false;
            this._itemIndexes = null;
            this.vg = null;
            this.vd = null;
            this.vp = null;
            this.ab = HighDensityScatterSeries.$;
            this.fs = false;
        }
        get_fh() {
            return true;
        }
        get vr() {
            return this.vq;
        }
        set vr(a) {
            if (this.vq != a) {
                let b = this.vr;
                this.vq = a;
                this.raisePropertyChanged("XColumn", b, this.vr);
            }
        }
        getDataLegendSeriesContextAt(a, b) {
            let c = { $type: Point_$type, x: a, y: b };
            let d = this.j2(c);
            let e = d == null ? NaN : this.ic(d, "XMemberPath");
            let f = d == null ? NaN : this.ic(d, "YMemberPath");
            let g = new DataLegendSeriesValueInfo();
            g.l = e;
            g.a = 13;
            g.q = "X";
            g.r = this.xn != null ? this.xn : "X";
            g.s = this.xj != null ? this.xj : "X:";
            g.t = this.xl != null ? this.xl : "";
            let h = new DataLegendSeriesValueInfo();
            h.l = f;
            h.a = 14;
            h.q = "Y";
            h.r = this.xv != null ? this.xv : "Y";
            h.s = this.xr != null ? this.xr : "Y:";
            h.t = this.xt != null ? this.xt : "";
            let i = new DataLegendSeriesContext();
            i.e = ((() => {
                let $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
                $ret.add(g);
                $ret.add(h);
                return $ret;
            })());
            i.h = this.lh();
            return i;
        }
        j5(a, b) {
            let c = this.mh(b);
            if (c == HighDensityScatterSeries.$$p[10]) {
                return this.j6(a, b, this.xn);
            }
            if (c == HighDensityScatterSeries.$$p[14]) {
                return this.j6(a, b, this.xv);
            }
            return super.j5(a, b);
        }
        li(a) {
            let b = this.mh(a);
            if (b == HighDensityScatterSeries.$$p[10]) {
                return this.xn;
            }
            if (b == HighDensityScatterSeries.$$p[14]) {
                return this.xv;
            }
            return super.li(a);
        }
        get vt() {
            return this.vs;
        }
        set vt(a) {
            if (this.vs != a) {
                let b = this.vt;
                this.vs = a;
                this.raisePropertyChanged("YColumn", b, this.vt);
            }
        }
        ya() {
            if (this.vi == null) {
                return;
            }
            this.vi.s();
            let a = this.vi;
            a.progressiveThunkCompleted = delegateRemove(a.progressiveThunkCompleted, runOn(this, this.xx));
            this.vi = null;
        }
        p5(a, b, c, d) {
            super.p5(a, b, c, d);
            switch (b) {
                case HighDensityScatterSeries.$$p[8]:
                case HighDensityScatterSeries.$$p[12]:
                case HighDensityScatterSeries.$$p[9]:
                case HighDensityScatterSeries.$$p[13]:
                    this.pb();
                    break;
                case "SeriesViewer":
                    if (this.c1 != null) {
                        let e = this.getEffectiveViewport1(this.cl);
                        this.vv = !e.isEmpty;
                    }
                    break;
                case "FastItemsSource":
                    this.ya();
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        c.deregisterColumn(this.vr);
                        c.deregisterColumn(this.vt);
                        this.vr = null;
                        this.vt = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        this.vr = this.da(this.xn);
                        this.vt = this.da(this.xv);
                    }
                    if ((this.vm != null && !this.vm.c1()) || (this.vk != null && !this.vk.c1())) {
                        this.qm(this.f0 && c != null);
                    }
                    this.pi();
                    break;
                case HighDensityScatterSeries.$$p[7]:
                    let f = this.vj;
                    this.vj = this.vk;
                    this.ya();
                    if (f != null) {
                        f.rangeChanged = delegateRemove(f.rangeChanged, runOn(this, this.x0));
                    }
                    if (this.vj != null) {
                        let g = this.vj;
                        g.rangeChanged = delegateCombine(g.rangeChanged, runOn(this, this.x0));
                    }
                    if (c != null) {
                        c.b0(this);
                    }
                    if (d != null) {
                        d.ct(this);
                    }
                    if ((this.vk != null && !this.vk.c1()) || (d == null && c != null)) {
                        this.qm(false);
                    }
                    break;
                case HighDensityScatterSeries.$$p[11]:
                    let h = this.vl;
                    this.vl = this.vm;
                    this.ya();
                    if (h != null) {
                        h.rangeChanged = delegateRemove(h.rangeChanged, runOn(this, this.x0));
                    }
                    if (this.vl != null) {
                        let i = this.vl;
                        i.rangeChanged = delegateCombine(i.rangeChanged, runOn(this, this.x0));
                    }
                    if (c != null) {
                        c.b0(this);
                    }
                    if (d != null) {
                        d.ct(this);
                    }
                    if ((this.vm != null && !this.vm.c1()) || (d == null && c != null)) {
                        this.qm(false);
                    }
                    break;
                case "MouseOverEnabled":
                    this.vw = this.fs;
                    this.qm(false);
                    break;
                case HighDensityScatterSeries.$$p[10]:
                    if (this.dd != null) {
                        this.dd.deregisterColumn(this.vr);
                        this.vr = this.da(this.xn);
                    }
                    break;
                case "XColumn":
                    this.ya();
                    if (this.vk != null && !this.vk.c1()) {
                        this.qm(false);
                    }
                    this.pi();
                    break;
                case HighDensityScatterSeries.$$p[14]:
                    if (this.dd != null) {
                        this.dd.deregisterColumn(this.vt);
                        this.vt = this.da(this.xv);
                    }
                    break;
                case "YColumn":
                    this.ya();
                    if (this.vm != null && !this.vm.c1()) {
                        this.qm(false);
                    }
                    this.pi();
                    break;
                case HighDensityScatterSeries.$$p[6]:
                    this.ya();
                    this.qm(false);
                    this.ph();
                    break;
                case HighDensityScatterSeries.$$p[3]:
                    this.qm(false);
                    this.ph();
                    break;
                case HighDensityScatterSeries.$$p[1]:
                    this.qm(false);
                    this.ph();
                    break;
                case HighDensityScatterSeries.$$p[0]:
                case HighDensityScatterSeries.$$p[2]:
                    if (!this.vh.b4(this.yt, this.ys)) {
                        return;
                    }
                    this.x4();
                    this.qm(false);
                    this.ph();
                    break;
                case HighDensityScatterSeries.$$p[4]:
                    this.w1 = Math.max(typeGetValue(d) - 1, 0);
                    this.vu = this.w1 > 0;
                    this.qm(false);
                    this.ph();
                    break;
                case HighDensityScatterSeries.$$p[5]:
                    this.qm(false);
                    this.ph();
                    break;
            }
        }
        x4() {
            this.wd = this.yt.l;
            this.wg = this.yt.o;
            this.wf = this.yt.n;
            this.we = this.yt.m;
            this.v9 = this.ys.l;
            this.wc = this.ys.o;
            this.wb = this.ys.n;
            this.wa = this.ys.m;
            this.ud = BrushUtil.h(truncate(this.wd), truncate(this.wg), truncate(this.wf), truncate(this.we));
            this.t2 = BrushUtil.h(truncate(this.v9), truncate(this.wc), truncate(this.wb), truncate(this.wa));
        }
        vy(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        vx(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        x0(a, b) {
            this.ya();
            this.qm(false);
        }
        get wk() {
            return this.wc - this.wg;
        }
        get wj() {
            return this.wb - this.wf;
        }
        get wi() {
            return this.wa - this.we;
        }
        get wh() {
            return this.v9 - this.wd;
        }
        gw(a, b, c) {
            let d = super.gw(a, b, c);
            if (this.vm == null || this.vk == null || this.vk.bi == null || this.vm.bi == null || this.vt == null || this.vr == null || this.vt.count < 1 || this.vr.count < 1 || this.vt.count != this.vr.count || this.vk.lx == this.vk.lw || this.vm.lx == this.vm.lw || this.u9.isEmpty) {
                d = false;
            }
            return d;
        }
        get w8() {
            return this.w2;
        }
        set w8(a) {
            let b = this.w2;
            this.w2 = a;
            this.raisePropertyChanged("ProgressiveStatus", b, this.w2);
        }
        qn(a) {
            super.qn(a);
            this.x2(a, this.cl);
        }
        x2(a, b) {
            if (this.dt(b)) {
                return;
            }
            if (this.vi == null && !this.v0) {
                let c = new List$1(KDPointData.$, 2, this.vr.count);
                let d = this.vk;
                let e = this.vm;
                let f = new Rect(0, 0, 0, 1, 1);
                let g = new Rect(0, 0, 0, 1, 1);
                let h = new ScalerParams(1, f, g, d.ch);
                let i = new ScalerParams(1, f, g, e.ch);
                let j;
                let k;
                for (let l = 0; l < this.vr.count; l++) {
                    j = d.ej(this.vr.item(l), h);
                    k = e.ej(this.vt.item(l), i);
                    if (!isNaN_(j) && !isNaN_(k) && !isInfinity(j) && !isInfinity(k)) {
                        c.add(((() => {
                            let $ret = new KDPointData();
                            $ret.a = j;
                            $ret.b = k;
                            $ret.c = l;
                            return $ret;
                        })()));
                    }
                }
                if (this.vz) {
                    this.wx = 1;
                    this.wy = truncate(logBase(c.count, 2)) + 3;
                    this.w8 = truncate(((this.wx / this.wy) * 100));
                    if (this.progressiveLoadStatusChanged != null) {
                        this.progressiveLoadStatusChanged(this, new ProgressiveLoadStatusEventArgs(this.w8));
                    }
                    this.vi = KDTree2D.b(c.toArray(), 1);
                    let m = this.vi;
                    m.progressiveThunkCompleted = delegateCombine(m.progressiveThunkCompleted, runOn(this, this.xx));
                    if (!this.vi.f(this.jf)) {
                        let n = this.vi;
                        n.progressiveThunkCompleted = delegateRemove(n.progressiveThunkCompleted, runOn(this, this.xx));
                    }
                    this.ph();
                }
                else {
                    let o = dateNow();
                    this.vi = new KDTree2D(0, c.toArray(), 1);
                    let p = dateNow();
                }
            }
            if (this.vz && !this.v0) {
                this.x3(b);
            }
            else {
                this.x5(b);
            }
        }
        oc(a, b, c, d) {
            super.oc(a, b, c, d);
            this.ya();
            let e = false;
            if (this.vk != null && !this.vk.c1()) {
                e = true;
            }
            if (this.vm != null && !this.vm.c1()) {
                e = true;
            }
            if (e) {
                this.qm(false);
            }
            this.pi();
        }
        xz(a) {
            let b = a;
            let c = this.w0 * this.wz;
            if (this.vw) {
                if (this._itemIndexes == null || this._itemIndexes.length != c) {
                    this._itemIndexes = new Array(c);
                    for (let d = 0; d < c; d++) {
                        this._itemIndexes[d] = 0;
                    }
                }
                else {
                    for (let e = 0; e < c; e++) {
                        this._itemIndexes[e] = 0;
                    }
                }
            }
        }
        x5(a) {
            let b;
            let c;
            let d = null;
            if (a.q) {
                d = this._itemIndexes;
            }
            let e = a.getViewInfo(c, b);
            c = e.p0;
            b = e.p1;
            let f = a;
            let g = this.getEffectiveViewport1(a);
            this.vn = new ScalerParams(0, b, c, this.vj.ch, g);
            this.vo = new ScalerParams(0, b, c, this.vl.ch, g);
            this.xy(a);
            this.xz(a);
            let h = this.w0 * this.wz;
            if (this.vg == null || this.vg.length != h) {
                this.vg = new Array(h);
                this.vd = new Array(h);
            }
            let i = this.vg.length;
            let j = this.vg;
            let k = this.vd;
            for (let l = 0; l < i; l++) {
                j[l] = 0;
                k[l] = 0;
            }
            this.w4 = truncate(Math.round(this.hu));
            this.vf = f.b1();
            let m = this.vf.length;
            let n = this.vf;
            for (let o = 0; o < m; o++) {
                n[o] = 0;
            }
            let p = this.wv;
            let q = this.wu;
            if (isNaN_(p) || isInfinity(p)) {
                p = 0;
            }
            if (isNaN_(q) || isInfinity(q)) {
                q = 50;
            }
            this.v7 = Math.min(p, q);
            this.v6 = Math.max(p, q);
            if (this.v7 < 0) {
                this.v7 = 0;
            }
            if (this.v6 < 0) {
                this.v6 = 0;
            }
            this.v8 = this.v6 - this.v7;
            if (this.v0) {
                this.x1(a);
            }
            else {
                this.yc(a);
            }
            f.cc();
            if (a.q) {
                this._itemIndexes = d;
                this.vh.cd();
            }
        }
        x3(a) {
            if (this.vi == null) {
                return;
            }
            this.x5(a);
        }
        xx(a, b) {
            this.vh.cb(() => {
                if (this.wx < this.wy - 1) {
                    this.wx++;
                }
                this.w8 = truncate(((this.wx / this.wy) * 100));
                if (this.progressiveLoadStatusChanged != null) {
                    this.progressiveLoadStatusChanged(this, new ProgressiveLoadStatusEventArgs(this.w8));
                }
                this.x3(this.cl);
                this.ph();
                if (this.vi != null) {
                    if (!this.vi.f(this.jf)) {
                        let c = this.vi;
                        c.progressiveThunkCompleted = delegateRemove(c.progressiveThunkCompleted, runOn(this, this.xx));
                        this.w8 = 100;
                        if (this.progressiveLoadStatusChanged != null) {
                            this.progressiveLoadStatusChanged(this, new ProgressiveLoadStatusEventArgs(this.w8));
                        }
                    }
                }
            });
        }
        x1(a) {
            let b = arrayShallowClone(this.vr.asArray());
            this.vk.hn(boxArray$1(b), 0, b.length, this.vn);
            let c = arrayShallowClone(this.vt.asArray());
            this.w3 = 0;
            let d = this.w1;
            let e = this.vu;
            let f = this.vg.length;
            this.vm.hn(boxArray$1(c), 0, c.length, this.vo);
            let g = 255 << 24 | truncate(this.wg) << 16 | truncate(this.wf) << 8 | truncate(this.we);
            for (let h = 0; h < b.length; h++) {
                let i = truncate(b[h]);
                let j = truncate(c[h]);
                i = truncate(Math.floor(i));
                j = truncate(Math.floor(j));
                if (i < 0 || i >= this.w0 || j < 0 || j >= this.wz) {
                    continue;
                }
                if (e) {
                    let k = i - d;
                    let l = i + d;
                    l = l > (this.w0 - 1) ? (this.w0 - 1) : l;
                    k = k < 0 ? 0 : k;
                    let m = j + d;
                    let n = j - d;
                    for (let o = k; o <= l; o++) {
                        for (let p = n; p <= m; p++) {
                            let q = (p * this.w0) + o;
                            if (q < 0 || q > f - 1) {
                                continue;
                            }
                            this.vg[q] = this.vg[q] + 1;
                            this.vd[q] = 1;
                            this.w3++;
                            if (this.vw) {
                                this._itemIndexes[q] = h + 1;
                            }
                        }
                    }
                }
                else {
                    let r = (j * this.w0) + i;
                    this.vg[r] = this.vg[r] + 1;
                    this.vd[r] = 1;
                    this.w3++;
                    if (this.vw) {
                        this._itemIndexes[r] = h + 1;
                    }
                }
            }
            this.x6();
        }
        yc(a) {
            let b;
            let c;
            let d = a.getViewInfo(b, c);
            b = d.p0;
            c = d.p1;
            if (this.vi == null) {
                return;
            }
            if (this.v1 == null) {
                this.v1 = new List$1(KDTreeNode2D.$, 2, truncate(Math.round(b.width * b.height)));
            }
            else {
                this.v1.clear();
            }
            let e = c.left;
            let f = c.right;
            let g = c.top;
            let h = c.bottom;
            this.wr = c.top;
            this.wp = c.height;
            this.wq = c.left;
            this.ws = c.width;
            this.wn = b.top;
            this.wl = b.height;
            this.wm = b.left;
            this.wo = b.width;
            let i = this.getEffectiveViewport1(a);
            this.v3 = (i.left - this.wm) / this.wo;
            this.v4 = (i.top - this.wn) / this.wl;
            let j = (i.right - this.wm) / this.wo;
            this.v5 = j - this.v3;
            let k = (i.bottom - this.wn) / this.wl;
            this.v2 = k - this.v4;
            if (this.vv) {
                e = (e - this.v3) / this.v5;
                f = (f - this.v3) / this.v5;
                g = (g - this.v4) / this.v2;
                h = (h - this.v4) / this.v2;
            }
            let l = this.hu / b.width * c.width;
            let m = this.hu / b.height * c.height;
            let n = Math.min(l, m);
            let o = ((() => {
                let $ret = new SearchArgs();
                $ret.c = e;
                $ret.a = f;
                $ret.d = g;
                $ret.b = h;
                $ret.e = l;
                $ret.f = m;
                $ret.g = 0x7FFFFFFF;
                return $ret;
            })());
            this.vi.t(this.v1, o, 0, 1, 0, 1);
            let p;
            this.w3 = 0;
            for (let q = 0; q < this.v1.count; q++) {
                p = this.v1._inner[q];
                this.x7(p);
            }
            this.x6();
        }
        x7(a) {
            if (a.g) {
                return;
            }
            let b = a.e != null && a.e.a;
            let c = a.a == null ? 0 : a.a.length;
            let d = (a.h - c) + 1;
            if (b && d > 0) {
            }
            else {
                d = 1;
            }
            this.x9(a.b, d, b, a.e);
            if (c > 0 && !b) {
                let e;
                for (let f = 0; f < c; f++) {
                    e = a.a[f];
                    this.x9(e, d, false, a.e);
                }
            }
            if (a.e != null) {
                a.e.a = false;
            }
        }
        fx(a) {
            let b = this.c1 != null ? this.c1.vh : Rect.empty;
            let c = this.c1 != null ? this.c1.vw : Rect.empty;
            let d = new Rect(0, 0, 0, 1, 1);
            let e = this.u3(this.cl);
            let f = new ScalerParams(0, d, d, this.vk.ch, e);
            let g = new ScalerParams(0, d, d, this.vm.ch, e);
            let h = !b.isEmpty && !c.isEmpty && this.dd != null ? this.dd.indexOf(a) : -1;
            let i = this.vk != null && this.vr != null && h < this.vr.count ? this.vk.ej(this.vr.item(h), f) : NaN;
            let j = this.vm != null && this.vt != null && h < this.vt.count ? this.vm.ej(this.vt.item(h), g) : NaN;
            if (!isNaN_(i)) {
                if (i < b.left + 0.1 * b.width) {
                    i = i + 0.4 * b.width;
                    b.x = i - 0.5 * b.width;
                }
                if (i > b.right - 0.1 * b.width) {
                    i = i - 0.4 * b.width;
                    b.x = i - 0.5 * b.width;
                }
            }
            if (!isNaN_(j)) {
                if (j < b.top + 0.1 * b.height) {
                    j = j + 0.4 * b.height;
                    b.y = j - 0.5 * b.height;
                }
                if (j > b.bottom - 0.1 * b.height) {
                    j = j - 0.4 * b.height;
                    b.y = j - 0.5 * b.height;
                }
            }
            if (this.ct != null) {
                this.ct.au(this.c1, b, true);
            }
            return h >= 0;
        }
        x9(a, b, c, d) {
            let e = this.w6(b);
            let f = a.c;
            let g = this.w1;
            if (c) {
                let h = d.d;
                let i = d.b;
                let j = d.e;
                let k = d.c;
                if (this.vv) {
                    h = this.v3 + this.v5 * h;
                    i = this.v3 + this.v5 * i;
                    j = this.v4 + this.v2 * j;
                    k = this.v4 + this.v2 * k;
                }
                let l = truncate((this.wm + this.wo * (h - this.wq) / this.ws));
                let m = truncate((this.wm + this.wo * (i - this.wq) / this.ws));
                let n = truncate((this.wn + this.wl * (j - this.wr) / this.wp));
                let o = truncate((this.wn + this.wl * (k - this.wr) / this.wp));
                l = truncate(Math.floor(l));
                m = truncate(Math.floor(m));
                n = truncate(Math.floor(n));
                o = truncate(Math.floor(o));
                if (this.vu) {
                    l -= g;
                    m += g;
                    n -= g;
                    o += g;
                }
                let p = ((m - l) + 1) * ((o - n) + 1);
                let q = b / p;
                let r = q;
                for (let s = l; s <= m; s++) {
                    for (let t = n; t <= o; t++) {
                        this.x8(f, s, t, q, r);
                    }
                }
            }
            else {
                let u = a.a;
                let v = a.b;
                if (this.vv) {
                    u = this.v3 + this.v5 * u;
                    v = this.v4 + this.v2 * v;
                }
                let w = truncate((this.wm + this.wo * (u - this.wq) / this.ws));
                let x = truncate((this.wn + this.wl * (v - this.wr) / this.wp));
                w = truncate(Math.floor(w));
                x = truncate(Math.floor(x));
                if (this.vu) {
                    let y = w - g;
                    let z = w + g;
                    let aa = x + g;
                    let ab = x - g;
                    let ac = ((z - y) + 1) * ((aa - ab) + 1);
                    let ad = b / ac;
                    let ae = ad;
                    for (let af = y; af <= z; af++) {
                        for (let ag = ab; ag <= aa; ag++) {
                            this.x8(f, af, ag, ad, ae);
                        }
                    }
                }
                else {
                    this.x8(f, w, x, b, 1);
                }
            }
        }
        w5(a, b) {
            return truncate((Math.floor(255 * b))) << 24 | truncate(Math.floor(b * (this.wg + a * this.wk))) << 16 | truncate(Math.floor(b * (this.wf + a * this.wj))) << 8 | truncate(Math.floor(b * (this.we + a * this.wi)));
        }
        w6(a) {
            return 255 << 24 | truncate(Math.floor((this.wg + a * this.wk))) << 16 | truncate(Math.floor((this.wf + a * this.wj))) << 8 | truncate(Math.floor((this.we + a * this.wi)));
        }
        wt(a) {
            return (a >> 24 & 255) / 255;
        }
        x8(a, b, c, d, e) {
            if (b < 0 || b >= this.w0 || c < 0 || c >= this.wz) {
                return;
            }
            let f = (c * this.w0) + b;
            this.vg[f] = this.vg[f] + d;
            this.vd[f] = this.vd[f] + e;
            if (this.vw) {
                this._itemIndexes[f] = a + 1;
            }
            this.w3 += truncate(d);
        }
        x6() {
            let a = 0;
            let b = 0;
            let c = this.v8;
            let d = this.v7;
            let e = this.v6;
            let f = this.vg.length;
            let g = this.vg;
            let h = this.vd;
            let i = this.vf;
            let j = NaN;
            let k = NaN;
            let l = 0;
            let m = 0;
            for (let n = 0; n < f; n++) {
                a = g[n];
                if (a != 0) {
                    b = h[n];
                    if (a >= e) {
                        a = 1;
                    }
                    else if (a <= d) {
                        a = 0;
                    }
                    else {
                        a = (a - d) / (c);
                    }
                    if (b > 1) {
                        b = 1;
                    }
                    if (b < 0.2) {
                        b = 0.2;
                    }
                    if (j != a || k != b) {
                        l = this.w5(a, b);
                        j = a;
                        k = b;
                    }
                    i[m] = l >> 16 & 255;
                    i[m + 1] = l >> 8 & 255;
                    i[m + 2] = l & 255;
                    i[m + 3] = l >> 24 & 255;
                }
                m += 4;
            }
        }
        xy(a) {
            let b = a;
            b.b9();
        }
        ci() {
            return new HighDensityScatterSeriesView(this);
        }
        px(a) {
            super.px(a);
            this.vh = a;
        }
        aq(a) {
            if (a != null && a == this.vk && this.vr != null) {
                return new AxisRange(this.vr.minimum, this.vr.maximum);
            }
            if (a != null && a == this.vm && this.vt != null) {
                return new AxisRange(this.vt.minimum, this.vt.maximum);
            }
            return null;
        }
        rj(a, b) {
            if (this.c1 != null) {
                let c = this.getEffectiveViewport1(this.cl);
                this.vv = !c.isEmpty;
            }
            this.qm(false);
        }
        rk(a, b) {
            this.qm(false);
        }
        j2(a) {
            if (!this.vw || this._itemIndexes == null || this.c1 == null || this.dd == null || this._itemIndexes.length != (this.w0 * this.wz)) {
                return null;
            }
            let b = this.c1.vh;
            let c = (a.x - b.left) / b.width;
            let d = (a.y - b.top) / b.height;
            let e = truncate(Math.round(this.u9.left + (this.u9.width * c)));
            let f = truncate(Math.round(this.u9.top + (this.u9.height * d)));
            let g = this.w9(e, f);
            if (g < 0 || g > this._itemIndexes.length - 1) {
                return null;
            }
            let h = this._itemIndexes[g] - 1;
            if (h < 0 || h > this.dd.count) {
                return null;
            }
            return this.dd.item(h);
        }
        w9(a, b) {
            let c = (this.w0 * b) + a;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            let d = 1;
            c = (this.w0 * (b - d)) + a;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.w0 * (b + d)) + a;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.w0 * (b)) + a - 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.w0 * (b)) + a + 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.w0 * (b - d)) + a - 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.w0 * (b + d)) + a + 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.w0 * (b - d)) + a + 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.w0 * (b + d)) + a - 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            return 0;
        }
        yb(a, b, c) {
            this.vf = a;
            this.w0 = b;
            this.wz = c;
        }
        get_gq() {
            return true;
        }
        set_gq(a) {
            super.set_gq(a);
        }
        n7(a, b) {
            super.n7(a, b);
            this.vh.ca();
            if (this.ck != null) {
                this.ck.ca();
            }
            this.ph();
        }
        qo(a, b) {
            super.qo(a, b);
            if (!this.gj) {
                this.cl.a4(b);
                return;
            }
            this.cl.a4(b);
            if (this.dt(this.ck)) {
                return;
            }
            let c = typeCast(HighDensityScatterSeriesView.$, this.ck);
            let d = new ScatterFrame();
            this.x2(false, c);
            this.gj = false;
        }
        ql(a, b, c, d, e) {
            super.ql(a, b, c, d, e);
            let f = this.a2.a$i.item(d);
            let g = f;
            f.a3(c);
            if (this.dt(g)) {
                return;
            }
            if (this.vp == null) {
                this.vp = new ScatterFrame();
            }
            this.x2(false, f);
        }
        n4() {
            super.n4();
            this.vk = null;
            this.vm = null;
        }
    }
    HighDensityScatterSeries.$t = /*@__PURE__*/ markType(HighDensityScatterSeries, 'HighDensityScatterSeries', Series.$);
    HighDensityScatterSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, HighDensityScatterSeries, 'raisePropertyChanged', ['HeatMaximumColor:ys:yd', [Color.$, Defaults.ap], 'HeatMaximum:wu:ye', [1, 50], 'HeatMinimumColor:yt:yf', [Color.$, Defaults.aq], 'HeatMinimum:wv:yg', [1, 0], 'PointExtent:w7:yh', [1, 1], 'ProgressiveLoad:vz:yi', [0, true], 'UseBruteForce:v0:yj', [0, false], 'XAxis:vk:yk', [NumericXAxis.$, null], 'XMemberAsLegendLabel:xj:yl', [2, null], 'XMemberAsLegendUnit:xl:ym', [2, null], 'XMemberPath:xn:yn', [2, null], 'YAxis:vm:yo', [NumericYAxis.$, null], 'YMemberAsLegendLabel:xr:yp', [2, null], 'YMemberAsLegendUnit:xt:yq', [2, null], 'YMemberPath:xv:yr', [2, null]]);
    return HighDensityScatterSeries;
})();
/**
 * @hidden
 */
export let HighDensityScatterSeriesView = /*@__PURE__*/ (() => {
    class HighDensityScatterSeriesView extends SeriesView {
        constructor(a) {
            super(a);
            this.b2 = null;
            this.b0 = null;
            this.b8 = 0;
            this.b7 = 0;
            this.b5 = null;
            this.b6 = null;
            this.b3 = null;
            this.b2 = a;
        }
        au() {
            super.au();
            if (!this.q) {
                this.b2.yt = Defaults.aq;
                this.b2.ys = Defaults.ap;
                this.b2.t2 = Defaults.al;
                this.b2.ud = Defaults.ak;
            }
        }
        cd() {
            this.b2.yb(this.b0, this.b8, this.b7);
        }
        b9() {
            if (this.b5 == null) {
                this.b5 = this.e.jf.createElement("canvas");
                let a = this.e.jf.get2DCanvasContext(this.b5);
                this.b3 = new RenderingContext(new CanvasViewRenderer(), a);
            }
            let b;
            if (this.p) {
                b = this.bx;
            }
            else {
                b = this.e.c1.vm();
            }
            let c = truncate(Math.round(b.left));
            let d = truncate(Math.round(b.top));
            let e = truncate(Math.round(b.width));
            let f = truncate(Math.round(b.height));
            let g = this.b8;
            let h = this.b7;
            this.b8 = e;
            this.b7 = f;
            if (g != this.b8 || h != this.b7 || this.b0 == null) {
                this.b5.setAttribute("width", e.toString());
                this.b5.setAttribute("height", f.toString());
                this.b6 = this.b3.h().getImageData(0, 0, e, f);
                let imageDataArray_ = this.b6.data;
                this.b0 = imageDataArray_;
            }
            this.b2.yb(this.b0, this.b8, this.b7);
        }
        b1() {
            return this.b0;
        }
        cc() {
            let a = truncate(Math.round(this.bx.left));
            let b = truncate(Math.round(this.bx.left));
            let c = truncate(Math.round(this.bx.width));
            let d = truncate(Math.round(this.bx.height));
            this.b3.h().putImageData(this.b6, 0, 0);
            this.as();
        }
        cb(a) {
            if (this.e.jf != null) {
                this.e.jf.setTimeout(a, 0);
            }
            else {
                window.setTimeout(a, 0);
            }
        }
        a8(a, b) {
            super.a8(a, b);
            if (b) {
                if (!this.b2.fs) {
                    return;
                }
                let c = new Rectangle();
                c.n = this.bx.left;
                c.o = this.bx.top;
                c.width = this.bx.width;
                c.height = this.bx.height;
                c._fill = this.br();
                a.w(c);
                return;
            }
            if (this.b5 == null) {
                return;
            }
            let d = truncate(Math.round(this.bx.left));
            let e = truncate(Math.round(this.bx.top));
            let f = truncate(Math.round(this.bx.width));
            let g = truncate(Math.round(this.bx.height));
            this.k.o(this.b5.getNativeElement(), this.e._opacity, d, e, f, g, d, e, f, g);
        }
        b4(a, b) {
            return Color.e(toNullable(Color.$, a), toNullable(Color.$, null)) && Color.e(toNullable(Color.$, b), toNullable(Color.$, null));
        }
        ca() {
            if (this.b0 != null) {
                for (let a = 0; a < this.b0.length; a++) {
                    this.b0[a] = 0;
                }
                this.cc();
            }
        }
        an(a) {
            super.an(a);
            if (this.b0 == null) {
                this.e.a4.exportSeriesPixelsData(a, null, this.b8, this.b7);
                return;
            }
            let b = new Array(intDivide(this.b0.length, 4));
            let c;
            for (let d = 0; d < intDivide(this.b0.length, 4); d++) {
                c = d * 4;
                b[d] = this.b0[c + 3] << 24 | this.b0[c] << 16 | this.b0[c + 1] << 8 | this.b0[c + 2];
            }
            this.e.a4.exportSeriesPixelsData(a, b, this.b8, this.b7);
        }
    }
    HighDensityScatterSeriesView.$t = /*@__PURE__*/ markType(HighDensityScatterSeriesView, 'HighDensityScatterSeriesView', SeriesView.$);
    return HighDensityScatterSeriesView;
})();
