/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnnotationLayer } from "./AnnotationLayer";
import { ValueLayerValueMode_$type } from "./ValueLayerValueMode";
import { DependencyProperty } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { Series } from "./Series";
import { Axis } from "./Axis";
import { Base, enumGetBox, Delegate_$type, Number_$type, fromEnum, Point_$type, markType, markDep, runOn } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { Visibility_$type } from "igniteui-react-core";
import { ValueLayerFrame } from "./ValueLayerFrame";
import { List$1 } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { AxisAnnotation } from "./AxisAnnotation";
import { AxisAnnotationFrameManager } from "./AxisAnnotationFrameManager";
import { DoubleCollection } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { Tuple$2 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { LineSegment } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_, truncate } from "igniteui-react-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { Defaults } from "./Defaults";
import { TranslateTransform } from "igniteui-react-core";
import { LineGeometry } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
export let ValueLayer = /*@__PURE__*/ (() => {
    class ValueLayer extends AnnotationLayer {
        bb() {
            return new ValueLayer();
        }
        get_ee() {
            return true;
        }
        constructor() {
            super();
            this.abd = null;
            this.yo = null;
            this.yn = null;
            let a = new ValueLayerFrame();
            let b = new ValueLayerFrame();
            let c = new ValueLayerFrame();
            let d = this.jt / 1000;
            this.vr = a;
            this.vq = b;
            this.vs = c;
            this.ab = ValueLayer.$;
        }
        ci() {
            return new ValueLayerView(this);
        }
        px(a) {
            super.px(a);
            this.yi = a;
        }
        get abf() {
            return new Thickness(1, this.yr, this.yt, this.ys, this.yq);
        }
        get abg() {
            return new Thickness(1, this.yx, this.yz, this.yy, this.yw);
        }
        w4(a, b) {
            if (this.yf == null || this.yf == a) {
                if (!this.at.c) {
                    this.qm(b);
                }
            }
        }
        w6(a, b) {
            super.w6(a, b);
            let c = a;
            let d = this.ym;
            let e = this.yl;
            c.af.clear();
            c.ag.clear();
            c.ae.clear();
            c.ah.clear();
            AxisAnnotationFrameManager.b(c);
            if (this.vx(this.yf)) {
                this.z4(this.yf, c, d, e);
            }
            else {
                let f = this.yg();
                if (f == 5 || f == 4 || f == 6) {
                    let g = null;
                    let h = null;
                    let i = [NaN, NaN];
                    let j = 0;
                    for (let k of fromEnum(this.c1.series)) {
                        if (!this.vx(k)) {
                            continue;
                        }
                        let l = k.ag();
                        for (let n = 0; n < l.length; n++) {
                            let m = l[n];
                            if (!this.yk(m)) {
                                continue;
                            }
                            let o = m.cp ? 1 : 0;
                            let p = i[o];
                            let q = null;
                            if (f == 5) {
                                let r = k.ip(2, m);
                                if (!isNaN_(r) && (r > p || isNaN_(p))) {
                                    q = k;
                                }
                                p = !isNaN_(p) ? Math.max(r, p) : r;
                            }
                            else if (f == 4) {
                                let s = k.ip(1, m);
                                if (!isNaN_(s) && (s < p || isNaN_(p))) {
                                    q = k;
                                }
                                p = !isNaN_(p) ? Math.min(s, p) : s;
                            }
                            else if (f == 6) {
                                let t = k.ip(3, m);
                                q = k;
                                p = !isNaN_(p) ? p + t : t;
                            }
                            if (m.cp) {
                                h = q != null ? q : h;
                            }
                            else {
                                g = q != null ? q : g;
                            }
                            i[o] = p;
                        }
                        j++;
                    }
                    if (f == 6) {
                        i[0] = !isNaN_(i[0]) ? i[0] / j : NaN;
                        i[1] = !isNaN_(i[1]) ? i[1] / j : NaN;
                    }
                    if (g != null && !isNaN_(i[0])) {
                        let u = g.uy(i);
                        this.z5(g, { $type: Point_$type, x: u.x, y: NaN }, c, d, e);
                    }
                    if (h != null && !isNaN_(i[1])) {
                        let v = h.uy(i);
                        this.z5(h, { $type: Point_$type, x: NaN, y: v.y }, c, d, e);
                    }
                }
                else {
                    for (let w of fromEnum(this.c1.series)) {
                        if (this.vx(w)) {
                            this.z4(w, c, d, e);
                        }
                        if (w.isStacked) {
                            w.o0((x) => {
                                if (this.vx(x)) {
                                    this.z4(x, c, d, e);
                                }
                                if (x.d2) {
                                    x.oy((y) => {
                                        if (this.vx(y)) {
                                            this.z4(y, c, d, e);
                                        }
                                        return true;
                                    });
                                }
                                return true;
                            });
                        }
                        if (w.d2) {
                            w.oy((x) => {
                                if (this.vx(x)) {
                                    this.z4(x, c, d, e);
                                }
                                return true;
                            });
                        }
                    }
                }
            }
        }
        vx(a) {
            if (!super.vx(a)) {
                return false;
            }
            if (this.za != null) {
                if (a.ew) {
                    let b = a.mg();
                    if (!Base.equalsStatic(this.za, b)) {
                        return false;
                    }
                }
                else {
                    if (!Base.equalsStatic(this.za, a.name)) {
                        return false;
                    }
                }
            }
            return true;
        }
        yk(a) {
            if (!a.cj) {
                return false;
            }
            if (this.yc != null && this.yc != a) {
                return false;
            }
            if (this.y7 != null && !Base.equalsStatic(this.y7, a.name)) {
                return false;
            }
            return true;
        }
        pl() {
            super.pl();
            if (!this.at.c && !this.dr()) {
                return;
            }
            if (this.dr()) {
                this.z6(this.vs, false);
            }
            else {
                this.z6(this.vq, false);
            }
        }
        yg() {
            if (this.yh == 0) {
                return 2;
            }
            return this.yh;
        }
        vh() {
            return 3;
        }
        v4() {
            return 0.3;
        }
        v7() {
            return -0.4;
        }
        v6() {
            return 0.5;
        }
        x3() {
            return this.ve == 3 ? this.abe() : null;
        }
        x4() {
            return this.vf == 3 ? this.abe() : null;
        }
        abe() {
            if (this.abd == null) {
                this.abd = new DoubleCollection();
                this.abd.add(DeviceUtils.g(5));
                this.abd.add(DeviceUtils.g(5));
            }
            return this.abd;
        }
        z5(a, b, c, d, e) {
            let f = false;
            let g = this.tw;
            if (g == null) {
                g = this.t2;
            }
            if (g == null) {
                g = a.tw;
                f = true;
            }
            let h = false;
            let i = this.aa7;
            if (i == null) {
                if (this.t2 != null) {
                    i = this.t2;
                }
                else {
                    i = a.tw;
                    h = true;
                }
            }
            let j = false;
            let k = this.aba;
            if (k == null) {
                if (this.t2 != null) {
                    k = this.t2;
                }
                else {
                    k = a.tw;
                    j = true;
                }
            }
            let l = g;
            let m = g;
            let n = i;
            let o = k;
            if (this.aa5 != null) {
                l = this.aa5;
            }
            else if (f) {
                switch (this.ve) {
                    case 1:
                        l = this.yi.ce(l, this.v1);
                        break;
                    case 2:
                        l = this.yi.cg(l, this.v1);
                        break;
                    case 4:
                        l = this.yi.cf(l, this.v1);
                        break;
                }
            }
            if (this.aa6 != null) {
                m = this.aa6;
            }
            else if (f) {
                switch (this.vf) {
                    case 1:
                        m = this.yi.ce(m, this.v3);
                        break;
                    case 2:
                        m = this.yi.cg(m, this.v3);
                        break;
                    case 4:
                        m = this.yi.cf(m, this.v3);
                        break;
                }
            }
            if (h) {
                switch (this.vf) {
                    case 1:
                        n = this.yi.ce(n, this.v3);
                        break;
                    case 2:
                        n = this.yi.cg(n, this.v3);
                        break;
                }
            }
            if (j) {
                switch (this.ve) {
                    case 1:
                        o = this.yi.ce(o, this.v1);
                        break;
                    case 2:
                        o = this.yi.cg(o, this.v1);
                        break;
                }
            }
            c.ae.add(l);
            c.ah.add(m);
            c.af.add(b.y);
            c.ag.add(b.x);
            if (this.yj) {
                AxisAnnotationFrameManager.c(c, b, a, this.c1, this.getEffectiveViewport(), g, n, this.yp, this.aa9, this.aa8, this.abf, this.yu, o, this.yv, this.abc, this.abb, this.abg, this.y0, this.abi == 0, this.abh == 0);
            }
        }
        z4(a, b, c, d) {
            let e = { $type: Point_$type, x: NaN, y: NaN };
            let f = this.yg();
            switch (f) {
                case 5:
                    e = a.ux(2);
                    break;
                case 4:
                    e = a.ux(1);
                    break;
                case 6:
                    e = a.ux(3);
                    break;
                default:
                    e = a.ux(f);
                    break;
            }
            let i = a.ag();
            for (let h = 0; h < i.length; h++) {
                let g = i[h];
                if (!this.yk(g)) {
                    continue;
                }
                if (g.cp) {
                    this.z5(a, { $type: Point_$type, x: NaN, y: e.y }, b, c, d);
                }
                else {
                    this.z5(a, { $type: Point_$type, x: e.x, y: NaN }, b, c, d);
                }
            }
        }
        z6(a, b) {
            let c = false;
            if (this.yn == null) {
                c = true;
                this.yo = new List$1(Axis.$, 0);
                this.yn = new Dictionary$2(Axis.$, Pool$1.$.specialize(AxisAnnotation.$), 0);
            }
            AxisAnnotationFrameManager.d(this, a, c, this.yn, this.yo, b, this.y1, this.y2, this.yd, this.ye);
        }
        z3(a, b, c, d, e) {
            let f = a.item(b);
            b++;
            if (e) {
                f._stroke = d.ah._inner[c];
                f._fill = d.ah._inner[c];
            }
            else {
                f._stroke = d.ae._inner[c];
                f._fill = d.ae._inner[c];
            }
            f.ad = this.hv;
            f.ai = e ? this.x2 : this.x1;
            f.am = this.un;
            f.al = this.um;
            f.ak = this.um;
            f.aj = this.ul;
            f.ac = this.ix;
            return new Tuple$2(Path.$, Number_$type, f, b);
        }
        w9(a, b) {
            super.w9(a, b);
            let c = this.yi.b8;
            let d = a;
            let e = d.af.count;
            let f = 0;
            let g = b.bx.left;
            let h = b.bx.right;
            let i = b.bx.top;
            let j = b.bx.bottom;
            let k = this.abi == 0;
            let l = this.abh == 0;
            for (let m = 0; m < e; m++) {
                let n = Math.floor(d.af._inner[m]);
                let o = Math.floor(d.ag._inner[m]);
                let p = null;
                if (k) {
                    if (!isNaN_(o)) {
                        let q = this.z3(c, f, m, d, true);
                        p = q.c;
                        f = q.d;
                        let r = new PathGeometry();
                        let s = new PathFigure();
                        s._startPoint = { $type: Point_$type, x: o, y: i };
                        let t = new LineSegment(1);
                        t.c = { $type: Point_$type, x: o, y: j };
                        s._segments.add(t);
                        r.c.add(s);
                        p.an = r;
                    }
                }
                if (l) {
                    if (!isNaN_(n)) {
                        let u = this.z3(c, f, m, d, false);
                        p = u.c;
                        f = u.d;
                        let v = new PathGeometry();
                        let w = new PathFigure();
                        w._startPoint = { $type: Point_$type, x: g, y: n };
                        let x = new LineSegment(1);
                        x.c = { $type: Point_$type, x: h, y: n };
                        w._segments.add(x);
                        v.c.add(w);
                        p.an = v;
                    }
                }
            }
            c.count = f;
            if (this.dr()) {
                this.z6(this.vs, true);
            }
            else {
                this.z6(this.vq, false);
            }
        }
        fu() {
            return true;
        }
        p5(a, b, c, d) {
            super.p5(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    if (d == null) {
                        if (this.yn != null && this.yn.count > 0) {
                            let e;
                            if (this.dr()) {
                                e = this.vs;
                            }
                            else {
                                e = this.vq;
                            }
                            AxisAnnotationFrameManager.b(e);
                            AxisAnnotationFrameManager.d(this, e, true, this.yn, this.yo, true, this.y1, this.y2, this.yd, this.ye);
                        }
                    }
                    break;
                case ValueLayer.$$p[1]:
                    this.qm(true);
                    break;
                case ValueLayer.$$p[11]:
                    this.qm(true);
                    break;
                case ValueLayer.$$p[6]:
                case ValueLayer.$$p[7]:
                    this.qm(true);
                    break;
                case ValueLayer.$$p[2]:
                case ValueLayer.$$p[13]:
                case ValueLayer.$$p[12]:
                case ValueLayer.$$p[16]:
                case ValueLayer.$$p[18]:
                case ValueLayer.$$p[20]:
                case ValueLayer.$$p[19]:
                case ValueLayer.$$p[17]:
                case ValueLayer.$$p[21]:
                case ValueLayer.$$p[22]:
                case ValueLayer.$$p[24]:
                case ValueLayer.$$p[27]:
                case ValueLayer.$$p[29]:
                case ValueLayer.$$p[31]:
                case ValueLayer.$$p[30]:
                case ValueLayer.$$p[28]:
                case ValueLayer.$$p[32]:
                case ValueLayer.$$p[33]:
                case ValueLayer.$$p[0]:
                case ValueLayer.$$p[10]:
                case ValueLayer.$$p[8]:
                    this.qm(true);
                    break;
            }
        }
    }
    ValueLayer.$t = /*@__PURE__*/ markType(ValueLayer, 'ValueLayer', AnnotationLayer.$);
    ValueLayer.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ValueLayer, 'raisePropertyChanged', ['HorizontalLineStroke:aa5:z7', [Brush.$, null], 'HorizontalLineVisibility:abh:z8', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'IsAxisAnnotationEnabled:yj:z9', [0, false], 'SkipUnknownValues:yl:aaa', [0, true], 'TargetAxisName:y7:aab', [2, null], 'TargetAxis:yc:aac', [Axis.$, null], 'TargetSeriesName:za:aad', [2, null], 'TargetSeries:yf:aae', [Series.$, null], 'UseInterpolation:ym:aaf', [0, true], 'ValueMode:yh:aag', [ValueLayerValueMode_$type, /*@__PURE__*/ enumGetBox(ValueLayerValueMode_$type, 2)], 'VerticalLineStroke:aa6:aah', [Brush.$, null], 'VerticalLineVisibility:abi:aai', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'XAxisAnnotationBackgroundCornerRadius:yp:aaj', [1, /*@__PURE__*/ DeviceUtils.g(3)], 'XAxisAnnotationBackground:aa7:aak', [Brush.$, null], 'XAxisAnnotationFormatLabel:yd:aal', [Delegate_$type], 'XAxisAnnotationInterpolatedValuePrecision:y1:aam', [1, -1], 'XAxisAnnotationOutline:aa8:aan', [Brush.$, null], 'XAxisAnnotationPaddingBottom:yq:aao', [1, NaN], 'XAxisAnnotationPaddingLeft:yr:aap', [1, NaN], 'XAxisAnnotationPaddingRight:ys:aaq', [1, NaN], 'XAxisAnnotationPaddingTop:yt:aar', [1, NaN], 'XAxisAnnotationStrokeThickness:yu:aas', [1, NaN], 'XAxisAnnotationTextColor:aa9:aat', [Brush.$, null], 'YAxisAnnotationBackgroundCornerRadius:yv:aau', [1, /*@__PURE__*/ DeviceUtils.g(3)], 'YAxisAnnotationBackground:aba:aav', [Brush.$, null], 'YAxisAnnotationFormatLabel:ye:aaw', [Delegate_$type], 'YAxisAnnotationInterpolatedValuePrecision:y2:aax', [1, -1], 'YAxisAnnotationOutline:abb:aay', [Brush.$, null], 'YAxisAnnotationPaddingBottom:yw:aaz', [1, NaN], 'YAxisAnnotationPaddingLeft:yx:aa0', [1, NaN], 'YAxisAnnotationPaddingRight:yy:aa1', [1, NaN], 'YAxisAnnotationPaddingTop:yz:aa2', [1, NaN], 'YAxisAnnotationStrokeThickness:y0:aa3', [1, NaN], 'YAxisAnnotationTextColor:abc:aa4', [Brush.$, null]]);
    return ValueLayer;
})();
/**
 * @hidden
 */
export let ValueLayerView = /*@__PURE__*/ (() => {
    class ValueLayerView extends AnnotationLayerView {
        constructor(a) {
            super(a);
            this.b7 = null;
            this.b8 = null;
            this.b9 = null;
            this.b7 = a;
            this.b9 = new List$1(Path.$, 0);
        }
        au() {
            super.au();
            this.b8 = ((() => {
                let $ret = new Pool$1(Path.$);
                $ret.create = runOn(this, this.ch);
                $ret.activate = runOn(this, this.ca);
                $ret.disactivate = runOn(this, this.cc);
                $ret.destroy = runOn(this, this.cb);
                return $ret;
            })());
            this.b7.i5 = Defaults.j;
        }
        ch() {
            let a = new Path();
            a.j = new TranslateTransform();
            this.b9.add(a);
            return a;
        }
        ca(a) {
            a._visibility = 0;
        }
        cc(a) {
            a._visibility = 1;
        }
        cb(a) {
            this.b9.remove(a);
        }
        cd(a, b, c, d) {
            if (a.an == null || a.an.c.x != d || a.an.d.x != c) {
                let e = ((() => {
                    let $ret = new LineGeometry();
                    $ret.d = { $type: Point_$type, x: c, y: b };
                    $ret.c = { $type: Point_$type, x: d, y: b };
                    return $ret;
                })());
                a.an = e;
            }
        }
        ce(a, b) {
            if (a == null) {
                return a;
            }
            return BrushUtil.m(a, b);
        }
        cg(a, b) {
            if (a == null) {
                return a;
            }
            return BrushUtil.o(a, b);
        }
        cf(a, b) {
            if (a == null) {
                return a;
            }
            let c = new Brush();
            c.color = Color.u(truncate((a.color.l * b)), a.color.o, a.color.n, a.color.m);
            return c;
        }
        a8(a, b) {
            super.a8(a, b);
            if (a.d && !b) {
                for (let c = 0; c < this.b9.count; c++) {
                    let d = this.b9._inner[c];
                    if (d._visibility == 0) {
                        a.t(d);
                    }
                }
            }
        }
        an(a) {
            super.an(a);
            for (let b = 0; b < this.b9.count; b++) {
                this.e.a4.exportPathData(a, this.b9._inner[b], "crosshairLine", ["Main", "Crosshair"]);
            }
        }
    }
    ValueLayerView.$t = /*@__PURE__*/ markType(ValueLayerView, 'ValueLayerView', AnnotationLayerView.$);
    return ValueLayerView;
})();
