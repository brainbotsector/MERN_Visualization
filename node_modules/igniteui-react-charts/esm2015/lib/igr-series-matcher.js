import { SeriesMatcher as SeriesMatcher_internal } from "./SeriesMatcher";
export class IgrSeriesMatcher {
    createImplementation() {
        return new SeriesMatcher_internal();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this.mounted = false;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    /**
     * If set, tries to match a series based on its name.
    */
    get name() {
        return this.i.d;
    }
    set name(v) {
        this.i.d = v;
    }
    /**
     * If set, tries to match a series based on its title.
    */
    get title() {
        return this.i.e;
    }
    set title(v) {
        this.i.e = v;
    }
    /**
     * If set, tries to match a series based on index
    */
    get index() {
        return this.i.a;
    }
    set index(v) {
        this.i.a = +v;
    }
    /**
     * Combined with MemberPath allows you to select a series by member path.
    */
    get memberPathType() {
        return this.i.c;
    }
    set memberPathType(v) {
        this.i.c = v;
    }
    /**
     * If set, tries to match a series based on a member path, combined with MemberPathType.
    */
    get memberPath() {
        return this.i.b;
    }
    set memberPath(v) {
        this.i.b = v;
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    }
}
