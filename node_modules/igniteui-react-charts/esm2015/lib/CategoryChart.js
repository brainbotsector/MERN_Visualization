/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { XYChart } from "./XYChart";
import { typeCast, runOn, delegateCombine, enumGetBox, markType, TypeRegistrar, getInstanceType } from "igniteui-react-core";
import { CategoryChartType_$type } from "./CategoryChartType";
import { CategorySeriesMarkerCollisionAvoidance_$type } from "./CategorySeriesMarkerCollisionAvoidance";
import { CategoryTransitionInMode_$type } from "./CategoryTransitionInMode";
import { TransitionInSpeedType_$type } from "./TransitionInSpeedType";
import { AutoMarginsAndAngleUpdateMode_$type } from "./AutoMarginsAndAngleUpdateMode";
import { AxisRangeBufferMode_$type } from "./AxisRangeBufferMode";
import { CategoryXAxis } from "./CategoryXAxis";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType_$type } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { IDataSeriesAdapterRule_$type } from "igniteui-react-core";
import { SimpleCategorySeriesRule } from "igniteui-react-core";
import { SubCollectionsRule } from "igniteui-react-core";
import { DVContainer } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { AxisDefaults } from "./AxisDefaults";
import { Defaults } from "./Defaults";
import { Series } from "./Series";
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { ArrayExtension } from "igniteui-react-core";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { DeviceUtils } from "igniteui-react-core";
import { CategoryChartMockDataGenerator } from "./CategoryChartMockDataGenerator";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let CategoryChart = /*@__PURE__*/ (() => {
    class CategoryChart extends XYChart {
        ti() {
            super.ti();
            if (this.dataChart == null) {
                return;
            }
            let a = this.dataChart.c8.j.e();
            this.aeo = a.d;
            this.aep = a.e;
            if (this.ady == null) {
                this.ady = a.k;
            }
            if (this.ad5 == null) {
                this.ad5 = a.k;
            }
            this.zx = 0;
            this.ad6 = AxisDefaults.h;
            this.ad9 = null;
            this.ad2 = AxisDefaults.g;
            this.adz = null;
            this.zg = AxisDefaults.f;
            this.ad3 = AxisDefaults.j;
            this.zh = AxisDefaults.e;
            this.gc = true;
            this.gd = true;
            this.bd = 0;
            this.i2 = Defaults.j;
            this.v3 = Defaults.ae;
            this.vy = Defaults.af;
            this.vz = Defaults.ag;
            this.afs = true;
        }
        tk(a, b) {
            super.tk(a, b);
            a.ju = this.aha;
            a.jv = this.ahb;
            a.c4 = this.afc;
            a.c5 = this.afd;
        }
        t8(a, b, c) {
            super.t8(a, b, c);
            switch (a) {
                case "TransitionInDuration":
                    this.s7((d) => d.ju = this.aha);
                    break;
                case "TransitionOutDuration":
                    this.s7((d) => d.jv = this.ahb);
                    break;
                case "TransitionInEasingFunction":
                    this.s7((d) => d.c4 = this.afc);
                    break;
                case "TransitionOutEasingFunction":
                    this.s7((d) => d.c5 = this.afd);
                    break;
            }
        }
        get aha() {
            return this.ag7;
        }
        set aha(a) {
            let b = this.aha;
            if (a != b) {
                this.ag7 = a;
                this.t5("TransitionInDuration", b, this.aha);
            }
        }
        get ahb() {
            return this.ag8;
        }
        set ahb(a) {
            let b = this.ahb;
            if (a != b) {
                this.ag8 = a;
                this.t5("TransitionOutDuration", b, this.ahb);
            }
        }
        get afc() {
            return this.afa;
        }
        set afc(a) {
            let b = this.afc;
            if (a != b) {
                this.afa = a;
                this.t5("TransitionInEasingFunction", b, this.afc);
            }
        }
        get afd() {
            return this.afb;
        }
        set afd(a) {
            let b = this.afd;
            if (a != b) {
                this.afb = a;
                this.t5("TransitionOutEasingFunction", b, this.afd);
            }
        }
        ahh() {
            let cvd_ = this.k0();
            cvd_.scaleByViewport();
            return (cvd_.serialize());
        }
        td(a) {
            super.td(a);
            a.eg = this.f7;
            a.wy = this.aft;
            a.w1 = this.afu;
            a.xo = this.agi;
            a.xp = this.agj;
            a.v3 = this.aer;
        }
        tj(a, b) {
            super.tj(a, b);
            let c = typeCast(HorizontalAnchoredCategorySeries.$, a);
            if (c == null) {
                return;
            }
            c.yx = this.aex;
            c.xt = this.afs;
            c.xd = this.aez;
            c.cv = this.ae9;
            c.trendLineBrush = ArrayExtension.getModulus$1(Brush.$, this.ah, b);
            c.trendLineType = this.d5;
            c.trendLineThickness = this.jy;
            c.vp = this.cw(a, b);
            if (a.e7) {
                a.qw(ArrayExtension.getModulus$1(Brush.$, this.aeo, b), ArrayExtension.getModulus$1(Brush.$, this.aep, b));
            }
        }
        ae0() {
            return new CategoryXAxis();
        }
        ae4() {
            return new NumericYAxis();
        }
        sw() {
            this.xAxis = this.ae0();
            this.xAxis.name = "xAxis";
            let a = this.xAxis;
            a.propertyChanged = delegateCombine(a.propertyChanged, runOn(this, this.ail));
            this.yAxis = this.ae4();
            this.yAxis.name = "yAxis";
            let b = this.yAxis;
            b.propertyChanged = delegateCombine(b.propertyChanged, runOn(this, this.aim));
            if (this.xAxis.az == null) {
                this.xAxis.az = new AxisLabelSettings();
            }
            if (this.yAxis.az == null) {
                this.yAxis.az = new AxisLabelSettings();
            }
        }
        acy(a) {
            super.acy(a);
            a.la = this.afw;
            a.ld = this.afy;
            a.b1 = this.afx;
        }
        acw(a) {
            super.acw(a);
            a.b1 = this.afv;
            a.zoomMaximumCategoryRange = this.agw;
            a.zoomToCategoryRange = this.agy;
            a.zoomToCategoryStart = this.agz;
            a.zoomMaximumItemSpan = this.agx;
            a.zoomToItemSpan = this.ag0;
        }
        get_b5() {
            return 0;
        }
        get b5() {
            return this.get_b5();
        }
        get aev() {
            return this.aeu;
        }
        set aev(a) {
            if (a != this.aeu) {
                let b = this.aev;
                this.aeu = a;
                this.t5("ChartType", enumGetBox(CategoryChartType_$type, b), enumGetBox(CategoryChartType_$type, this.aev));
            }
        }
        get aex() {
            return this.aew;
        }
        set aex(a) {
            let b = this.aex;
            if (a != b) {
                this.aew = a;
                this.t5("MarkerCollisionAvoidance", enumGetBox(CategorySeriesMarkerCollisionAvoidance_$type, b), enumGetBox(CategorySeriesMarkerCollisionAvoidance_$type, this.aex));
            }
        }
        get afr() {
            return this.afg;
        }
        set afr(a) {
            let b = this.afr;
            if (a != b) {
                this.afg = a;
                this.t5("IsSplineShapePartOfRange", b, this.afr);
            }
        }
        get afs() {
            return this.afh;
        }
        set afs(a) {
            let b = this.afs;
            if (a != b) {
                this.afh = a;
                this.t5("IsTransitionInEnabled", b, this.afs);
            }
        }
        get aez() {
            return this.aey;
        }
        set aez(a) {
            let b = this.aez;
            if (a != b) {
                this.aey = a;
                this.t5("TransitionInMode", enumGetBox(CategoryTransitionInMode_$type, b), enumGetBox(CategoryTransitionInMode_$type, this.aez));
            }
        }
        get ae9() {
            return this.ae8;
        }
        set ae9(a) {
            let b = this.ae9;
            if (a != b) {
                this.ae8 = a;
                this.t5("TransitionInSpeedType", enumGetBox(TransitionInSpeedType_$type, b), enumGetBox(TransitionInSpeedType_$type, this.ae9));
            }
        }
        get agr() {
            return this.af4;
        }
        set agr(a) {
            let b = this.agr;
            if (a != b) {
                this.af4 = a;
                this.t5("XAxisInterval", b, this.agr);
            }
        }
        get agu() {
            return this.af7;
        }
        set agu(a) {
            let b = this.agu;
            if (a != b) {
                this.af7 = a;
                this.t5("XAxisMinorInterval", b, this.agu);
            }
        }
        get agq() {
            return this.af3;
        }
        set agq(a) {
            let b = this.agq;
            if (a != b) {
                this.af3 = a;
                this.t5("XAxisGap", b, this.agq);
            }
        }
        get agt() {
            return this.af6;
        }
        set agt(a) {
            let b = this.agt;
            if (a != b) {
                this.af6 = a;
                this.t5("XAxisMinimumGapSize", b, this.agt);
            }
        }
        get ags() {
            return this.af5;
        }
        set ags(a) {
            let b = this.ags;
            if (a != b) {
                this.af5 = a;
                this.t5("XAxisMaximumGap", b, this.ags);
            }
        }
        get agv() {
            return this.af8;
        }
        set agv(a) {
            let b = this.agv;
            if (a != b) {
                this.af8 = a;
                this.t5("XAxisOverlap", b, this.agv);
            }
        }
        get ag3() {
            return this.age;
        }
        set ag3(a) {
            let b = this.ag3;
            if (a != b) {
                this.age = a;
                this.t5("YAxisInterval", b, this.ag3);
            }
        }
        get aer() {
            return this.aeq;
        }
        set aer(a) {
            let b = this.aer;
            if (a != b) {
                this.aeq = a;
                this.t5("AutoMarginAndAngleUpdateMode", enumGetBox(AutoMarginsAndAngleUpdateMode_$type, b), enumGetBox(AutoMarginsAndAngleUpdateMode_$type, this.aer));
            }
        }
        ain() {
            if (this.dataChart != null) {
                this.dataChart.y9();
            }
        }
        get aft() {
            return this.afi;
        }
        set aft(a) {
            let b = this.aft;
            if (a != b) {
                this.afi = a;
                this.t5("ShouldAutoExpandMarginForInitialLabels", b, this.aft);
            }
        }
        get afu() {
            return this.afj;
        }
        set afu(a) {
            let b = this.afu;
            if (a != b) {
                this.afj = a;
                this.t5(CategoryChart.ahq, b, this.afu);
            }
        }
        get agi() {
            return this.af1;
        }
        set agi(a) {
            let b = this.agi;
            if (a != b) {
                this.af1 = a;
                this.t5("AutoExpandMarginExtraPadding", b, this.agi);
            }
        }
        get agj() {
            return this.af2;
        }
        set agj(a) {
            let b = this.agj;
            if (a != b) {
                this.af2 = a;
                this.t5("AutoExpandMarginMaximumValue", b, this.agj);
            }
        }
        get afy() {
            return this.afn;
        }
        set afy(a) {
            let b = this.afy;
            if (a != b) {
                this.afn = a;
                this.t5("YAxisFavorLabellingScaleEnd", b, this.afy);
            }
        }
        get afv() {
            return this.afk;
        }
        set afv(a) {
            let b = this.afv;
            if (a != b) {
                this.afk = a;
                this.t5(CategoryChart.ahx, b, this.afv);
            }
        }
        get afx() {
            return this.afm;
        }
        set afx(a) {
            let b = this.afx;
            if (a != b) {
                this.afm = a;
                this.t5(CategoryChart.aib, b, this.afx);
            }
        }
        get aet() {
            return this.aes;
        }
        set aet(a) {
            let b = this.aet;
            if (a != b) {
                this.aes = a;
                this.t5("YAxisAutoRangeBufferMode", enumGetBox(AxisRangeBufferMode_$type, b), enumGetBox(AxisRangeBufferMode_$type, this.aet));
            }
        }
        get afz() {
            return this.afo;
        }
        set afz(a) {
            let b = this.afz;
            if (a != b) {
                this.afo = a;
                this.t5("YAxisIsLogarithmic", b, this.afz);
            }
        }
        get ahc() {
            return this.ag9;
        }
        set ahc(a) {
            let b = this.ahc;
            if (a != b) {
                this.ag9 = a;
                this.t5("YAxisLogarithmBase", b, this.ahc);
            }
        }
        get ag5() {
            return this.agg;
        }
        set ag5(a) {
            let b = this.ag5;
            if (a != b) {
                this.agg = a;
                this.t5("YAxisMinimumValue", b, this.ag5);
            }
        }
        get ag4() {
            return this.agf;
        }
        set ag4(a) {
            let b = this.ag4;
            if (a != b) {
                this.agf = a;
                this.t5("YAxisMaximumValue", b, this.ag4);
            }
        }
        get ag6() {
            return this.agh;
        }
        set ag6(a) {
            let b = this.ag6;
            if (a != b) {
                this.agh = a;
                this.t5("YAxisMinorInterval", b, this.ag6);
            }
        }
        get agp() {
            return this.xAxis.mw;
        }
        get ago() {
            return this.xAxis.mv;
        }
        agl() {
            return this.agp;
        }
        agn() {
            return this.ag2;
        }
        agk() {
            return this.ago;
        }
        agm() {
            return this.ag1;
        }
        get ag2() {
            return this.yAxis.lx;
        }
        get ag1() {
            return this.yAxis.lw;
        }
        get aeo() {
            return this.aem;
        }
        set aeo(a) {
            let b = this.aeo;
            if (a != b) {
                this.aem = a;
                this.t5("NegativeBrushes", b, this.aeo);
            }
        }
        get aep() {
            return this.aen;
        }
        set aep(a) {
            let b = this.aep;
            if (a != b) {
                this.aen = a;
                this.t5("NegativeOutlines", b, this.aep);
            }
        }
        get afw() {
            return this.afl;
        }
        set afw(a) {
            let b = this.afw;
            if (a != b) {
                this.afl = a;
                this.t5("YAxisAbbreviateLargeNumbers", b, this.afw);
            }
        }
        get agw() {
            return this.af9;
        }
        set agw(a) {
            let b = this.agw;
            if (a != b) {
                this.af9 = a;
                this.t5("XAxisZoomMaximumCategoryRange", b, this.agw);
            }
        }
        get agx() {
            return this.aga;
        }
        set agx(a) {
            let b = this.agx;
            if (a != b) {
                this.aga = a;
                this.t5("XAxisZoomMaximumItemSpan", b, this.agx);
            }
        }
        get agy() {
            return this.agb;
        }
        set agy(a) {
            let b = this.agy;
            if (a != b) {
                this.agb = a;
                this.t5("XAxisZoomToCategoryRange", b, this.agy);
            }
        }
        get agz() {
            return this.agc;
        }
        set agz(a) {
            let b = this.agz;
            if (a != b) {
                this.agc = a;
                this.t5("XAxisZoomToCategoryStart", b, this.agz);
            }
        }
        get ag0() {
            return this.agd;
        }
        set ag0(a) {
            let b = this.ag0;
            if (a != b) {
                this.agd = a;
                this.t5("XAxisZoomToItemSpan", b, this.ag0);
            }
        }
        get afp() {
            return this.afe;
        }
        set afp(a) {
            let b = this.afp;
            if (a != b) {
                this.afe = a;
                this.t5("IsCategoryHighlightingEnabled", b, this.afp);
            }
        }
        get afq() {
            return this.aff;
        }
        set afq(a) {
            let b = this.afq;
            if (a != b) {
                this.aff = a;
                this.t5("IsItemHighlightingEnabled", b, this.afq);
            }
        }
        constructor() {
            super();
            this.ag7 = 1000;
            this.ag8 = 1000;
            this.afa = null;
            this.afb = null;
            this.aeu = 9;
            this.aew = 1;
            this.afg = false;
            this.afh = true;
            this.aey = 0;
            this.ae8 = 0;
            this.af4 = 0;
            this.af7 = 0;
            this.af3 = 0;
            this.af6 = 0;
            this.af5 = 1;
            this.af8 = 0;
            this.age = NaN;
            this.aeq = 1;
            this.afi = true;
            this.afj = true;
            this.af1 = DeviceUtils.g(2);
            this.af2 = DeviceUtils.g(60);
            this.afn = true;
            this.afk = true;
            this.afm = false;
            this.aes = 0;
            this.afo = false;
            this.ag9 = 10;
            this.agg = NaN;
            this.agf = NaN;
            this.agh = 0;
            this.aem = null;
            this.aen = null;
            this.afl = true;
            this.af9 = 3;
            this.aga = NaN;
            this.agb = NaN;
            this.agc = NaN;
            this.agd = NaN;
            this.afe = false;
            this.aff = false;
            this.af0 = null;
            DVContainer.instance.registerIfLoaded("CategoryChartToolbarFactoryManager");
            this.s0();
        }
        get_hi() {
            let a = new List$1(DataSeriesType_$type, 0);
            if (TypeRegistrar.isRegistered("AreaSeries")) {
                a.add(2);
            }
            if (TypeRegistrar.isRegistered("ColumnSeries")) {
                a.add(1);
            }
            if (TypeRegistrar.isRegistered("LineSeries")) {
                a.add(0);
            }
            if (TypeRegistrar.isRegistered("PointSeries")) {
                a.add(10);
            }
            if (TypeRegistrar.isRegistered("SplineSeries")) {
                a.add(6);
            }
            if (TypeRegistrar.isRegistered("SplineAreaSeries")) {
                a.add(7);
            }
            if (TypeRegistrar.isRegistered("StepAreaSeries")) {
                a.add(5);
            }
            if (TypeRegistrar.isRegistered("StepLineSeries")) {
                a.add(4);
            }
            if (TypeRegistrar.isRegistered("WaterfallSeries")) {
                a.add(8);
            }
            return a;
        }
        get hi() {
            return this.get_hi();
        }
        hm() {
            if (this.af0 == null) {
                this.af0 = CategoryChartMockDataGenerator.a();
            }
            return this.af0;
        }
        cv(a) {
            if (a != null) {
                let b = super.cv(a);
                if (b == 2) {
                    if (a.e6 && this.go) {
                        return 13;
                    }
                }
            }
            return super.cv(a);
        }
        cx(a) {
            if (a != null) {
                let b = super.cv(a);
                if (b == 2) {
                    if (a.e6 && this.go) {
                        return 13;
                    }
                }
            }
            return super.cx(a);
        }
        get_g5() {
            return this.xAxis != null && this.xAxis.categoryMode != 0;
        }
        ail(a, b) {
            switch (b.propertyName) {
                case "ActualMinimum":
                    this.ug("XAxisActualMinimum");
                    break;
                case "ActualMaximum":
                    this.ug("XAxisActualMaximum");
                    break;
            }
        }
        aim(a, b) {
            switch (b.propertyName) {
                case "ActualMinimumValue":
                    this.ug("YAxisActualMinimum");
                    break;
                case "ActualMaximumValue":
                    this.ug("YAxisActualMaximum");
                    break;
            }
        }
        ut() {
            super.ut();
            this.xAxis.f0 = this.z7 == null ? XYChart.aaj(this.xAxis, this.bh.dataSeries) : this.z7;
            this.xAxis.itemsSource = this.dataChart != null && this.dataChart.series.count > 0 ? this.dataChart.series._inner[0].itemsSource : null;
            if (this.aft) {
                this.tx((a) => a.y9());
            }
        }
        get xAxis() {
            return this._xAxis;
        }
        set xAxis(a) {
            this._xAxis = a;
        }
        get yAxis() {
            return this._yAxis;
        }
        set yAxis(a) {
            this._yAxis = a;
        }
        ae3(a, b) {
            switch (a) {
                case 2: return this.c8(1);
                case 3: return this.c8(10);
                case 0: return this.c8(0);
                case 1: return this.c8(2);
                case 6: return this.c8(6);
                case 7: return this.c8(7);
                case 4: return this.c8(4);
                case 5: return this.c8(5);
                case 8: return this.c8(8);
                case 9: return this.ae2(b);
                default: return this.c8(1);
            }
        }
        ae2(a) {
            return this.c8(a);
        }
        bg(a) {
            switch (this.aev) {
                case 1: return 2;
                case 0: return 0;
                case 3: return 10;
                case 6: return 6;
                case 7: return 7;
                case 5: return 5;
                case 4: return 4;
                case 8: return 8;
                case 9: return a.suggestedSeries;
                default:
                case 2: return 1;
            }
        }
        c6(a, b) {
            let c = this.ae3(this.aev, a.suggestedSeries);
            c.zl = a.findMatchingHint(0).path;
            c.xAxis = this.xAxis;
            c.yAxis = this.yAxis;
            return c;
        }
        ur(a) {
            if (a.suggestedSecondaryAxis == 2) {
                this.yAxis.li = true;
                this.yAxis.l9 = 10;
            }
        }
        uu() {
            this.yAxis.li = this.afz;
            this.yAxis.l9 = this.ahc;
        }
        get_hh() {
            return ((() => {
                let $ret = new List$1(IDataSeriesAdapterRule_$type, 0);
                $ret.add(new SimpleCategorySeriesRule());
                $ret.add(new SubCollectionsRule());
                return $ret;
            })());
        }
        get hh() {
            return this.get_hh();
        }
        ss(a, b) {
            let c = typeCast(HorizontalAnchoredCategorySeries.$, a);
            if (c != null) {
                c.yx = this.aex;
                c.vp = this.cw(a, b);
            }
        }
        aij(a) {
            this.aik((b, c) => a(b));
        }
        aik(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = typeCast(HorizontalAnchoredCategorySeries.$, this.dataChart.series._inner[b]);
                if (c == null) {
                    continue;
                }
                a(c, b);
            }
        }
        xp() {
            return this.xAxis;
        }
        xq() {
            return this.yAxis;
        }
        ae6() {
            return this.c8(30);
        }
        ae7() {
            return this.c8(31);
        }
        he(a, b) {
            let c = super.he(a, b);
            if (c != null) {
                let d = new List$1(Series.$, 0);
                if (this.afe) {
                    d.add(this.ae6());
                }
                if (this.aff) {
                    d.add(this.ae7());
                }
                for (let e = 0; e < d.count; e++) {
                    let f = d._inner[e];
                    f.name = a + getInstanceType(f).typeName;
                    c.add(f);
                }
            }
            return c;
        }
        bb() {
            if (this.ba == 0) {
                return 1;
            }
            else {
                return this.ba;
            }
        }
        uz(a, b, c) {
            super.uz(a, b, c);
            if (this.bh.dataSeries.count > 0) {
                if (stringIsNullOrEmpty(this.mf)) {
                    this.b8.setXMemberPath(a, c.getMemberPathFor(16));
                }
                if (stringIsNullOrEmpty(this.mh)) {
                    this.b8.setYMemberPath(a, c.getMemberPathFor(0));
                }
                if (stringIsNullOrEmpty(this.mb)) {
                    this.b8.setLabelMemberPath(a, c.getMemberPathFor(0));
                }
                if (stringIsNullOrEmpty(this.l8)) {
                    this.b8.setContentMemberPath(a, c.getMemberPathFor(0));
                }
            }
        }
        gr() {
            if (this.bd == 4 || this.bd == 3) {
                return true;
            }
            else if (this.bd == 0) {
                if (this.aev == 2 || this.aev == 8) {
                    return false;
                }
                else if (this.aev == 9 && this.bh != null && this.bh.dataSeries != null && this.bh.dataSeries.count > 0) {
                    let a = this.bh.dataSeries._inner[0].suggestedSeries;
                    if (a == 1 || a == 8) {
                        return false;
                    }
                }
                return true;
            }
            return false;
        }
        get_gx() {
            return DVContainer.instance.checkLoaded("CategoryChartToolbarFactoryManager");
        }
        t5(a, b, c) {
            super.t5(a, b, c);
            switch (a) {
                case "ChartType":
                    this.ut();
                    break;
                case "MarkerCollisionAvoidance":
                    this.aij((d) => d.yx = this.aex);
                    break;
                case "IsTransitionInEnabled":
                    this.aij((d) => d.xt = this.afs);
                    break;
                case "IsSplineShapePartOfRange":
                    this.aij((d) => {
                        if (d.fl) {
                            d.qx(this.afr);
                        }
                    });
                    break;
                case "TransitionInMode":
                    this.aij((d) => d.xd = this.aez);
                    break;
                case "TransitionInSpeedType":
                    this.aij((d) => d.cv = this.ae9);
                    break;
                case "XAxisInterval":
                    this.xAxis.mr = this.agr;
                    break;
                case "XAxisMinorInterval":
                    this.xAxis.ms = this.agu;
                    break;
                case "XAxisGap":
                    this.xAxis.k1 = this.agq;
                    break;
                case "XAxisOverlap":
                    this.xAxis.la = this.agv;
                    break;
                case "XAxisMinimumGapSize":
                    this.xAxis.k9 = this.agt;
                    break;
                case "XAxisMaximumGap":
                    this.xAxis.k8 = this.ags;
                    break;
                case "XAxisZoomMaximumCategoryRange":
                    this.xAxis.zoomMaximumCategoryRange = this.agw;
                    break;
                case "XAxisZoomMaximumItemSpan":
                    this.xAxis.zoomMaximumItemSpan = this.agx;
                    break;
                case "XAxisZoomToCategoryRange":
                    this.xAxis.zoomToCategoryRange = this.agy;
                    break;
                case "XAxisZoomToCategoryStart":
                    this.xAxis.zoomToCategoryStart = this.agz;
                    break;
                case "XAxisZoomToItemSpan":
                    this.xAxis.zoomToItemSpan = this.ag0;
                    break;
                case "YAxisInterval":
                    this.yAxis.l1 = this.ag3;
                    break;
                case "YAxisFavorLabellingScaleEnd":
                    this.yAxis.ld = this.afy;
                    break;
                case "YAxisAutoRangeBufferMode":
                    this.yAxis.ku = this.aet;
                    break;
                case "YAxisIsLogarithmic":
                    this.yAxis.li = this.afz;
                    break;
                case "YAxisLogarithmBase":
                    this.yAxis.l9 = this.ahc;
                    break;
                case "YAxisMinimumValue":
                    this.yAxis.l5 = this.ag5;
                    break;
                case "YAxisMaximumValue":
                    this.yAxis.l4 = this.ag4;
                    break;
                case "YAxisMinorInterval":
                    this.yAxis.l6 = this.ag6;
                    break;
                case "NegativeBrushes":
                case "NegativeOutlines":
                    this.aik((d, e) => {
                        if (d.e7) {
                            d.qw(ArrayExtension.getModulus$1(Brush.$, this.aeo, e), ArrayExtension.getModulus$1(Brush.$, this.aep, e));
                        }
                    });
                    break;
                case "YAxisAbbreviateLargeNumbers":
                    this.ac5((d) => d.la = this.afw);
                    break;
                case "IsCategoryHighlightingEnabled":
                case "IsItemHighlightingEnabled":
                    this.ut();
                    break;
                case "AutoMarginAndAngleUpdateMode":
                    this.tx((d) => d.v3 = this.aer);
                    break;
                case "ShouldAutoExpandMarginForInitialLabels":
                    this.tx((d) => d.wy = this.aft);
                    break;
                case CategoryChart.ahq:
                    this.tx((d) => d.w1 = this.afu);
                    break;
                case "AutoExpandMarginExtraPadding":
                    this.tx((d) => d.xo = this.agi);
                    break;
                case "AutoExpandMarginMaximumValue":
                    this.tx((d) => d.xp = this.agj);
                    break;
                case CategoryChart.ahx:
                    this.ac1((d) => d.b1 = this.afv, a);
                    break;
                case CategoryChart.aib:
                    this.ac5((d) => d.b1 = this.afx);
                    break;
            }
        }
    }
    CategoryChart.$t = /*@__PURE__*/ markType(CategoryChart, 'CategoryChart', XYChart.$);
    CategoryChart.ahq = "ShouldConsiderAutoRotationForInitialLabels";
    CategoryChart.ahx = "XAxisEnhancedIntervalPreferMoreCategoryLabels";
    CategoryChart.aib = "YAxisEnhancedIntervalPreferMoreCategoryLabels";
    return CategoryChart;
})();
