/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnnotationLayer } from "./AnnotationLayer";
import { DependencyProperty } from "igniteui-react-core";
import { Series } from "./Series";
import { FinalValueSelectionMode_$type } from "./FinalValueSelectionMode";
import { Brush } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { FinalValueLayerFrame } from "./FinalValueLayerFrame";
import { List$1 } from "igniteui-react-core";
import { Axis } from "./Axis";
import { Dictionary$2 } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { AxisAnnotation } from "./AxisAnnotation";
import { Base, enumGetBox, fromEnum, Point_$type, markType, markDep } from "igniteui-react-core";
import { AxisAnnotationFrameManager } from "./AxisAnnotationFrameManager";
import { PropertyMetadata } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { BrushUtil } from "igniteui-react-core";
/**
 * @hidden
 */
export let FinalValueLayer = /*@__PURE__*/ (() => {
    class FinalValueLayer extends AnnotationLayer {
        bb() {
            return new FinalValueLayer();
        }
        get_eb() {
            return true;
        }
        constructor() {
            super();
            this.axisAnnotationFormatLabel = null;
            this.yi = null;
            this.yh = null;
            let a = new FinalValueLayerFrame();
            let b = new FinalValueLayerFrame();
            let c = new FinalValueLayerFrame();
            let d = this.jt / 1000;
            this.vr = a;
            this.vq = b;
            this.vs = c;
            this.ab = FinalValueLayer.$;
        }
        ci() {
            return new FinalValueLayerView(this);
        }
        px(a) {
            super.px(a);
            this.yd = a;
        }
        get zn() {
            return new Thickness(1, this.yl, this.yn, this.ym, this.yk);
        }
        yg() {
            return this.axisAnnotationFormatLabel != null;
        }
        w4(a, b) {
            if (this.yf == null || this.yf == a) {
                if (!this.at.c) {
                    this.qm(b);
                }
            }
        }
        w6(a, b) {
            super.w6(a, b);
            let c = a;
            c.f.clear();
            c.r.clear();
            c.q.clear();
            c.ac.clear();
            c.p.clear();
            c.ab.clear();
            c.h.clear();
            c.g.clear();
            c.i.clear();
            c.k.clear();
            c.m.clear();
            c.l.clear();
            c.j.clear();
            c.n.clear();
            c.o.clear();
            c.t.clear();
            c.s.clear();
            c.u.clear();
            c.w.clear();
            c.y.clear();
            c.x.clear();
            c.v.clear();
            c.z.clear();
            c.aa.clear();
            if (this.vx(this.yf)) {
                this.y4(this.yf, c);
            }
            else {
                for (let d of fromEnum(this.c1.series)) {
                    if (this.vx(d)) {
                        this.y4(d, c);
                    }
                    if (d.isStacked) {
                        d.o0((e) => {
                            if (this.vx(e)) {
                                this.y4(e, c);
                            }
                            if (e.d2) {
                                e.oy((f) => {
                                    if (this.vx(f)) {
                                        this.y4(f, c);
                                    }
                                    return true;
                                });
                            }
                            return true;
                        });
                    }
                    if (d.d2) {
                        d.oy((e) => {
                            if (this.vx(e)) {
                                this.y4(e, c);
                            }
                            return true;
                        });
                    }
                }
            }
        }
        vx(a) {
            if (!super.vx(a)) {
                return false;
            }
            if (this.y1 != null) {
                if (a.ew) {
                    let b = a.mg();
                    if (!Base.equalsStatic(this.y1, b)) {
                        return false;
                    }
                }
                else {
                    if (!Base.equalsStatic(this.y1, a.name)) {
                        return false;
                    }
                }
            }
            return true;
        }
        pl() {
            super.pl();
            if (!this.at.c && !this.dr()) {
                return;
            }
            if (this.dr()) {
                this.y5(this.vs, false);
            }
            else {
                this.y5(this.vq, false);
            }
        }
        zm(a) {
            let b = NaN;
            let c = NaN;
            let d = this.ye;
            if (d == 0) {
                d = 1;
            }
            let e = false;
            if (d == 2) {
                e = true;
            }
            if (a.isVertical) {
                let f = a.as();
                if (f != null) {
                    if (d == 1 || d == 2) {
                        let g = this.u1(this.cl);
                        if (f.ch) {
                            c = a.uz({ $type: Point_$type, x: g.right, y: g.bottom }).y;
                        }
                        else {
                            c = a.uz({ $type: Point_$type, x: g.right, y: g.top }).y;
                        }
                    }
                    else {
                        if (f.ch) {
                            c = 1;
                        }
                        else {
                            c = 0;
                        }
                    }
                }
                return a.uu({ $type: Point_$type, x: 0, y: c }, e, true);
            }
            else {
                let h = a.as();
                if (h != null) {
                    if (d == 1 || d == 2) {
                        let i = this.u1(this.cl);
                        if (h.ch) {
                            b = a.uz({ $type: Point_$type, x: i.left, y: i.top }).x;
                        }
                        else {
                            b = a.uz({ $type: Point_$type, x: i.right, y: i.top }).x;
                        }
                    }
                    else {
                        if (h.ch) {
                            b = 0;
                        }
                        else {
                            b = 1;
                        }
                    }
                }
                if (a.er) {
                    return a.uu({ $type: Point_$type, x: b, y: 0 }, e, true);
                }
                else {
                    return a.uu({ $type: Point_$type, x: b, y: 0 }, e, true);
                }
            }
        }
        y4(a, b) {
            let c = this.zm(a);
            let d = this.uz(c);
            let e = this.tw;
            if (e == null) {
                e = this.t2;
            }
            if (e == null) {
                e = a.tw;
                if (e != null) {
                    e = this.yd.b8(e);
                }
            }
            AxisAnnotationFrameManager.c(b, c, a, this.c1, this.getEffectiveViewport(), e, this.zj, this.yj, this.zl, this.zk, this.zn, this.yo, this.zj, this.yj, this.zl, this.zk, this.zn, this.yo, a.isVertical, !a.isVertical);
        }
        y5(a, b) {
            let c = false;
            if (this.yh == null) {
                c = true;
                this.yi = new List$1(Axis.$, 0);
                this.yh = new Dictionary$2(Axis.$, Pool$1.$.specialize(AxisAnnotation.$), 0);
            }
            AxisAnnotationFrameManager.d(this, a, c, this.yh, this.yi, b, this.yp, this.yp, this.axisAnnotationFormatLabel, this.axisAnnotationFormatLabel);
        }
        w9(a, b) {
            super.w9(a, b);
            if (this.dr()) {
                this.y5(this.vs, true);
            }
            else {
                this.y5(this.vq, false);
            }
        }
        fu() {
            return true;
        }
        p5(a, b, c, d) {
            super.p5(a, b, c, d);
            switch (b) {
                case FinalValueLayer.$$p[11]:
                case FinalValueLayer.$$p[12]:
                    this.qm(true);
                    break;
                case FinalValueLayer.$$p[1]:
                case FinalValueLayer.$$p[0]:
                case FinalValueLayer.$$p[3]:
                case FinalValueLayer.$$p[5]:
                case FinalValueLayer.$$p[7]:
                case FinalValueLayer.$$p[6]:
                case FinalValueLayer.$$p[4]:
                case FinalValueLayer.$$p[8]:
                case FinalValueLayer.$$p[9]:
                case FinalValueLayer.$$p[10]:
                    this.qm(true);
                    break;
                case "SeriesViewer":
                    let e = this.yi;
                    let f = this.yh;
                    if (f != null) {
                        for (let g of fromEnum(f)) {
                            let h = g.value;
                            h.c((i) => g.key.an.remove(i));
                            h.clear();
                        }
                        e.clear();
                        f.clear();
                    }
                    break;
            }
        }
    }
    FinalValueLayer.$t = /*@__PURE__*/ markType(FinalValueLayer, 'FinalValueLayer', AnnotationLayer.$);
    FinalValueLayer.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, FinalValueLayer, 'raisePropertyChanged', ['AxisAnnotationBackgroundCornerRadius:yj:y6', [1, /*@__PURE__*/ DeviceUtils.g(3)], 'AxisAnnotationBackground:zj:y7', [Brush.$, null], 'AxisAnnotationInterpolatedValuePrecision:yp:y8', [1, -1], 'AxisAnnotationOutline:zk:y9', [Brush.$, null], 'AxisAnnotationPaddingBottom:yk:za', [1, NaN], 'AxisAnnotationPaddingLeft:yl:zb', [1, NaN], 'AxisAnnotationPaddingRight:ym:zc', [1, NaN], 'AxisAnnotationPaddingTop:yn:zd', [1, NaN], 'AxisAnnotationStrokeThickness:yo:ze', [1, NaN], 'AxisAnnotationTextColor:zl:zf', [Brush.$, null], 'FinalValueSelectionMode:ye:zg', [FinalValueSelectionMode_$type, /*@__PURE__*/ enumGetBox(FinalValueSelectionMode_$type, 0)], 'TargetSeriesName:y1:zh', [2, null], 'TargetSeries:yf:zi', [Series.$, null]]);
    return FinalValueLayer;
})();
/**
 * @hidden
 */
export let FinalValueLayerView = /*@__PURE__*/ (() => {
    class FinalValueLayerView extends AnnotationLayerView {
        constructor(a) {
            super(a);
            this.b7 = null;
            this.b7 = a;
        }
        au() {
            super.au();
        }
        b8(a) {
            if (a == null) {
                return a;
            }
            return BrushUtil.m(a, 0.1);
        }
        an(a) {
            super.an(a);
        }
    }
    FinalValueLayerView.$t = /*@__PURE__*/ markType(FinalValueLayerView, 'FinalValueLayerView', AnnotationLayerView.$);
    return FinalValueLayerView;
})();
