/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { RangeCategorySeries } from "./RangeCategorySeries";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { Axis } from "./Axis";
import { Point_$type, runOn, typeCast, markType, markDep } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { RangeValueList } from "./RangeValueList";
import { ScalerParams } from "./ScalerParams";
import { CategoryXAxis } from "./CategoryXAxis";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
/**
 * @hidden
 */
export let HorizontalRangeCategorySeries = /*@__PURE__*/ (() => {
    class HorizontalRangeCategorySeries extends RangeCategorySeries {
        fetchXAxis() {
            return this.xAxis;
        }
        fetchYAxis() {
            return this.yAxis;
        }
        n4() {
            super.n4();
            this.xAxis = null;
            this.yAxis = null;
        }
        ah(a) {
            let b = this.aj(this.w1(), this.w2.f, this.x3(this.cl), this.x4(this.cl), this.uz(a), true);
            if (b == null) {
                return null;
            }
            let c = b[0];
            let d = b[1];
            let e = new Array(1);
            let f = new Array(2);
            f[0] = { $type: Point_$type, x: c[0], y: c[2] };
            f[1] = { $type: Point_$type, x: d[0], y: d[2] };
            e[0] = f;
            return e;
        }
        ai(a) {
            let b = this.aj(this.w1(), this.w2.f, this.x3(this.cl), this.x4(this.cl), this.uz(a), true);
            if (b == null) {
                return null;
            }
            let c = b[0];
            let d = b[1];
            let e = new Array(1);
            let f = new Array(2);
            f[0] = { $type: Point_$type, x: c[0], y: c[1] };
            f[1] = { $type: Point_$type, x: d[0], y: d[1] };
            e[0] = f;
            return e;
        }
        get_ff() {
            return true;
        }
        bt() {
            if (this.bu == 0) {
                return 1;
            }
            else {
                return super.bt();
            }
        }
        getOffsetValue() {
            return this.RangeFramePreparer.r(this.xAxis, this.cl.by, this.cl.bx, this.getEffectiveViewport1(this.cl));
        }
        getCategoryWidth() {
            return this.xAxis.getCategorySize(this.cl.by, this.cl.bx, this.getEffectiveViewport1(this.cl));
        }
        jo(a, b) {
            return this.jp(a, b, this.xAxis, runOn(this, this.x1), new RangeValueList(this.highColumn, this.lowColumn));
        }
        jq(a, b) {
            return this.jr(a, b, this.xAxis, runOn(this, this.x1), new RangeValueList(this.highColumn, this.lowColumn));
        }
        h4(a, b, c, d, e) {
            if (c == null) {
                return Number.POSITIVE_INFINITY;
            }
            let f = this.xAxis.lf;
            return this.h5(a, b, this.xAxis, d, e, f, runOn(this, this.x1));
        }
        il(a, b, c) {
            if (this.c1 == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.cl);
            let e = new ScalerParams(0, this.c1.vh, this.cl.bx, this.xAxis.ch, d);
            let f = this.RangeFramePreparer.r(this.xAxis, this.c1.vh, this.cl.bx, d);
            return this.io(new RangeValueList(this.highColumn, this.lowColumn), a, this.xAxis, e, f, runOn(this, this.x1), b, c);
        }
        ij(a, b, c) {
            if (this.c1 == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.cl);
            let e = new ScalerParams(0, this.c1.vh, this.cl.bx, this.xAxis.ch, d);
            let f = this.RangeFramePreparer.r(this.xAxis, this.c1.vh, this.cl.bx, d);
            return this.io(this.lowColumn, a, this.xAxis, e, f, runOn(this, this.x1), b, c);
        }
        ih(a, b, c) {
            if (this.c1 == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.cl);
            let e = new ScalerParams(0, this.c1.vh, this.cl.bx, this.xAxis.ch, d);
            let f = this.RangeFramePreparer.r(this.xAxis, this.c1.vh, this.cl.bx, d);
            return this.io(this.highColumn, a, this.xAxis, e, f, runOn(this, this.x1), b, c);
        }
        uq(a, b, c) {
            return this.uw(a, b, c, this.RangeFramePreparer.r(this.xAxis, this.cl.by, this.cl.bx, this.getEffectiveViewport1(this.cl)), this.yAxis, this.xAxis, runOn(this, this.ih), (d, e) => this.jr(d, e, this.xAxis, runOn(this, this.x1), this.highColumn), (d, e) => this.jp(d, e, this.xAxis, runOn(this, this.x1), this.highColumn));
        }
        us(a, b, c) {
            return this.uw(a, b, c, this.RangeFramePreparer.r(this.xAxis, this.cl.by, this.cl.bx, this.getEffectiveViewport1(this.cl)), this.yAxis, this.xAxis, runOn(this, this.ij), (d, e) => this.jr(d, e, this.xAxis, runOn(this, this.x1), this.lowColumn), (d, e) => this.jp(d, e, this.xAxis, runOn(this, this.x1), this.lowColumn));
        }
        uu(a, b, c) {
            return this.uw(a, b, c, this.RangeFramePreparer.r(this.xAxis, this.cl.by, this.cl.bx, this.getEffectiveViewport1(this.cl)), this.yAxis, this.xAxis, null, null, null);
        }
        xx() {
            return this.yAxis != null && this.yAxis.c1();
        }
        p5(a, b, c, d) {
            super.p5(a, b, c, d);
            switch (b) {
                case HorizontalRangeCategorySeries.$$p[0]:
                case HorizontalRangeCategorySeries.$$p[1]:
                case HorizontalRangeCategorySeries.$$p[2]:
                case HorizontalRangeCategorySeries.$$p[3]:
                    this.pb();
                    break;
                case HorizontalRangeCategorySeries.$$p[4]:
                    this.od(typeCast(Axis.$, c));
                    this.qc(typeCast(Axis.$, d));
                    this.xb.cu.g(this.hu);
                    this.qm(false);
                    this.ph();
                    break;
                case HorizontalRangeCategorySeries.$$p[5]:
                    this.od(typeCast(Axis.$, c));
                    this.qc(typeCast(Axis.$, d));
                    this.xb.cu.g(this.hu);
                    this.xx();
                    this.qm(false);
                    this.ph();
                    break;
            }
        }
        zj(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        zi(a) {
            if (typeCast(CategoryXAxis.$, a) !== null || a.ce) {
                return true;
            }
            return false;
        }
        getDataLegendSeriesContextAt(a, b) {
            let c = { $type: Point_$type, x: a, y: b };
            let d = this.ij(c, false, false);
            let e = this.ih(c, false, false);
            let f = new DataLegendSeriesValueInfo();
            f.a = 1;
            f.l = e > d ? d : e;
            f.q = "Low";
            f.r = this.y7 != null ? this.y7 : "Low";
            f.s = this.zo != null ? this.zo : "L:";
            f.t = this.zq != null ? this.zq : "";
            let g = new DataLegendSeriesValueInfo();
            g.a = 2;
            g.l = e > d ? e : d;
            g.q = "High";
            g.r = this.y4 != null ? this.y4 : "High";
            g.s = this.zk != null ? this.zk : "H:";
            g.t = this.zm != null ? this.zm : "";
            let h = new DataLegendSeriesValueInfo();
            h.a = 7;
            h.l = Math.abs(g.l - f.l);
            h.q = "Range";
            h.r = "Range";
            h.s = "R:";
            h.k = true;
            let i = new DataLegendSeriesValueInfo();
            i.a = 6;
            i.l = f.l + (h.l / 2);
            i.q = "Average";
            i.r = "Average";
            i.s = "A:";
            i.k = true;
            let j = new DataLegendSeriesContext();
            j.e = ((() => {
                let $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
                $ret.add(g);
                $ret.add(f);
                $ret.add(h);
                $ret.add(i);
                return $ret;
            })());
            j.h = this.lh();
            return j;
        }
        get useHighMarkerFidelity() {
            return this.xy;
        }
    }
    HorizontalRangeCategorySeries.$t = /*@__PURE__*/ markType(HorizontalRangeCategorySeries, 'HorizontalRangeCategorySeries', RangeCategorySeries.$);
    HorizontalRangeCategorySeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, HorizontalRangeCategorySeries, 'raisePropertyChanged', ['HighMemberAsLegendLabel:zk:zu', [2, null], 'HighMemberAsLegendUnit:zm:zv', [2, null], 'LowMemberAsLegendLabel:zo:zw', [2, null], 'LowMemberAsLegendUnit:zq:zx', [2, null], 'XAxis::zy', [CategoryAxisBase.$, null], 'YAxis::zz', [NumericYAxis.$, null]]);
    return HorizontalRangeCategorySeries;
})();
