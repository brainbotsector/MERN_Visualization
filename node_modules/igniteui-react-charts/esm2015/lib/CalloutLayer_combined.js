/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnnotationLayer } from "./AnnotationLayer";
import { DependencyProperty } from "igniteui-react-core";
import { Base, runOn, delegateCombine, String_$type, enumGetBox, EnumUtil, typeCast, fromEnum, delegateRemove, Point_$type, Date_$type, markType, markDep } from "igniteui-react-core";
import { Series } from "./Series";
import { CalloutPlacementPositionsCollection } from "./CalloutPlacementPositionsCollection";
import { HighlightedValueLabelMode_$type } from "igniteui-react-core";
import { AutoCalloutVisibilityMode_$type } from "./AutoCalloutVisibilityMode";
import { Brush } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { CalloutCollisionMode_$type } from "./CalloutCollisionMode";
import { FontUtil } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { CalloutLayerFrame } from "./CalloutLayerFrame";
import { HashSet$1 } from "igniteui-react-core";
import { CalloutAnnotationWrapper } from "./CalloutAnnotationWrapper";
import { List$1 } from "igniteui-react-core";
import { LinkedList$1 } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { LinkedListNode$1 } from "igniteui-react-core";
import { LabelCollisionManager } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { CalloutAnnotation } from "./CalloutAnnotation";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { CalloutLabelUpdatingEventArgs } from "./CalloutLabelUpdatingEventArgs";
import { CalloutSeriesSelectingEventArgs } from "./CalloutSeriesSelectingEventArgs";
import { CalloutStyleUpdatingEventArgs } from "./CalloutStyleUpdatingEventArgs";
import { DeviceUtils } from "igniteui-react-core";
import { CalloutRenderStyleUpdatingEventArgs } from "./CalloutRenderStyleUpdatingEventArgs";
import { LabelCollisionInfo } from "igniteui-react-core";
import { QuadTreeBoundingBox } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { ViewportUtils } from "./ViewportUtils";
import { Size } from "igniteui-react-core";
import { CalloutContentUpdatingEventArgs } from "./CalloutContentUpdatingEventArgs";
import { CalloutKey } from "./CalloutKey";
import { DataContext } from "igniteui-react-core";
import { HashPool$2 } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
import { FastItemObjectColumn } from "igniteui-react-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { BrushUtil } from "igniteui-react-core";
import { TextBlock } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
import { Line } from "igniteui-react-core";
import { CalloutViewHelper } from "./CalloutViewHelper";
import { Rectangle } from "igniteui-react-core";
import { TranslateTransform } from "igniteui-react-core";
/**
 * @hidden
 */
export let CalloutLayer = /*@__PURE__*/ (() => {
    class CalloutLayer extends AnnotationLayer {
        bb() {
            return new CalloutLayer();
        }
        get_d9() {
            return true;
        }
        constructor() {
            super();
            this.calloutStyleUpdating = null;
            this.calloutRenderStyleUpdating = null;
            this.yx = null;
            this.yy = null;
            this.yz = null;
            this.yw = null;
            this.yv = null;
            this.zp = new HashSet$1(CalloutAnnotationWrapper.$, 0);
            this.zs = new List$1(CalloutAnnotationWrapper.$, 0);
            this.zt = new List$1(CalloutAnnotationWrapper.$, 0);
            this.ym = null;
            this.yc = null;
            this.yt = null;
            this.zq = new LinkedList$1(CalloutAnnotationWrapper.$);
            this.zn = new Dictionary$2(CalloutAnnotationWrapper.$, LinkedListNode$1.$.specialize(CalloutAnnotationWrapper.$), 0);
            this.y5 = null;
            this.ac1 = new Rect(0, 0, 0, 1, 1);
            this.zc = false;
            this.z4 = 0;
            this.ac0 = Rect.empty;
            this.za = false;
            this.zb = false;
            this.calloutContentUpdating = null;
            this.calloutLabelUpdating = null;
            this.calloutSeriesSelecting = null;
            this.zr = new List$1(SeriesPointOfInterest.$, 0);
            this.ze = false;
            this.zf = false;
            this.zv = 0;
            this.zd = false;
            this.y9 = true;
            this.ye = 1;
            FastItemObjectColumn.m();
            this.yc = null;
            this.ym = new CalloutPlacementPositionsCollection();
            let a = this.ym;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.abk));
            this.vz = true;
            let b = new CalloutLayerFrame();
            let c = new CalloutLayerFrame();
            let d = new CalloutLayerFrame();
            let e = this.jt / 1000;
            this.vr = b;
            this.vq = c;
            this.vs = d;
            this.ab = CalloutLayer.$;
        }
        abk(a, b) {
            this.abt();
        }
        abt() {
            this.yc = this.yd(this.yn);
            this.abq();
        }
        abl(a, b) {
            this.zt.clear();
            this.qm(false);
        }
        oc(a, b, c, d) {
            super.oc(a, b, c, d);
            let e = this.zo();
            switch (a) {
                case 3:
                    this.aby(b, e);
                    break;
                case 1:
                    for (let f = b; f < b + c; f++) {
                        let g = new CalloutAnnotation();
                        let h = new CalloutAnnotationWrapper();
                        h.b = g;
                        h.b.series = this.ys;
                        this.zt.insert(f, h);
                        this.aby(f, e);
                    }
                    break;
                case 0:
                    this.zt.v(b, c);
                    break;
                case 2:
                    for (let i = b; i < b + c; i++) {
                        this.aby(i, e);
                    }
                    break;
                case 4:
                    this.zt.clear();
                    for (let j = 0; j < this.dd.count; j++) {
                        let k = new CalloutAnnotation();
                        let l = new CalloutAnnotationWrapper();
                        l.b = k;
                        l.b.series = this.ys;
                        this.zt.add(l);
                        this.aby(j, e);
                    }
                    break;
            }
            this.qm(true);
        }
        fz(a) {
            return false;
        }
        zo() {
            let a = new Dictionary$2(String_$type, Series.$, 0);
            if (this.c1 != null) {
                for (let b = 0; b < this.c1.series.count; b++) {
                    let c = this.c1.series._inner[b];
                    if (c.name != null && !a.containsKey(c.name)) {
                        a.addItem(c.name, c);
                    }
                }
            }
            return a;
        }
        aby(a, b) {
            if (this.y4 == null || this.y2 == null) {
                return;
            }
            let c = a;
            if (this.y3 != null) {
                c = this.y3.item(a);
            }
            let d = this.y4.item(a);
            let e = this.y2.item(a);
            let f = this.zt._inner[a];
            if (this.y1 != null) {
                if (f.b.ab != this.y1.item(a)) {
                    f.b.key = this.y1.item(a);
                }
            }
            if (this.zn.containsKey(f)) {
                f.b = this.zn.item(f).c.b;
            }
            f.b.xValue = c;
            f.b.yValue = d;
            if (this.calloutLabelUpdating != null) {
                let g = ((() => {
                    let $ret = new CalloutLabelUpdatingEventArgs();
                    $ret.d = c;
                    $ret.e = d;
                    $ret.item = this.dd.item(a);
                    return $ret;
                })());
                this.calloutLabelUpdating(this, g);
                if (g.c != null && !Base.equalsStatic(g.c, f.b.ao)) {
                    let h = g.c;
                    f.b.text = h != null ? h.toString() : "";
                }
            }
            else {
                f.b.text = e != null ? e.toString() : "";
            }
            if (this.y0 != null) {
                f.b.content = this.y0.item(a);
            }
            else {
                f.b.content = this.dd.item(a);
            }
            if (this.calloutSeriesSelecting != null) {
                let i = ((() => {
                    let $ret = new CalloutSeriesSelectingEventArgs();
                    $ret.c = c;
                    $ret.d = d;
                    $ret.item = this.dd.item(a);
                    return $ret;
                })());
                this.calloutSeriesSelecting(this, i);
                if (i.a != null) {
                    f.b.series = i.a;
                }
                else if (i.e != null) {
                    if (b.containsKey(i.e)) {
                        f.b.series = b.item(i.e);
                    }
                }
            }
            this.abz(f);
        }
        abz(a) {
            let b = new Thickness(0, DeviceUtils.g(3));
            if (isNaN_(this.ac3.left) || isNaN_(this.ac3.top) || isNaN_(this.ac3.right) || isNaN_(this.ac3.bottom)) {
                b = new Thickness(0, DeviceUtils.g(3));
            }
            else {
                b = this.ac3;
            }
            let c = DeviceUtils.g(3);
            if (isNaN_(this.zw)) {
                c = DeviceUtils.g(3);
            }
            else {
                c = this.zw;
            }
            let d = this.acw != null ? this.acw : this.yl.cl(a.b.l);
            let e = this.acz != null ? this.acz : this.yl.co();
            let f = this.acy != null ? this.acy : this.yl.cn(a.b.l);
            let g = this.acx != null ? this.acx : this.yl.cm(a.b.l);
            let h = isNaN_(this.z2) ? 0 : this.z2;
            if (this.zj && this.calloutStyleUpdating != null) {
                let i = new CalloutStyleUpdatingEventArgs();
                i.item = a.b.aa;
                i.xValue = a.b.ac;
                i.yValue = a.b.ad;
                i.series = a.b.l;
                i.background = d;
                i.textColor = e;
                i.outline = f;
                i.leaderBrush = g;
                i.strokeThickness = h;
                this.calloutStyleUpdating(this, i);
                d = i.background;
                e = i.textColor;
                f = i.outline;
                g = i.leaderBrush;
                h = i.strokeThickness;
            }
            a.b.backgroundPadding = b;
            a.b.backgroundCornerRadius = c;
            a.b.background = d;
            a.b.textColor = e;
            a.b.outline = f;
            a.b.leaderBrush = g;
            a.b.strokeThickness = h;
        }
        j5(a, b) {
            let c = this.mh(b);
            if (c == CalloutLayer.$$p[22]) {
                return this.j6(a, b, this.aa4);
            }
            if (c == CalloutLayer.$$p[29]) {
                return this.j6(a, b, this.abf);
            }
            if (c == CalloutLayer.$$p[30]) {
                return this.j6(a, b, this.abi);
            }
            if (c == CalloutLayer.$$p[21]) {
                return this.j6(a, b, this.aa1);
            }
            if (c == CalloutLayer.$$p[15]) {
                return this.j6(a, b, this.aat);
            }
            return super.j5(a, b);
        }
        li(a) {
            let b = this.mh(a);
            if (b == CalloutLayer.$$p[22]) {
                return this.aa4;
            }
            if (b == CalloutLayer.$$p[29]) {
                return this.abf;
            }
            if (b == CalloutLayer.$$p[30]) {
                return this.abi;
            }
            if (b == CalloutLayer.$$p[21]) {
                return this.aa1;
            }
            if (b == CalloutLayer.$$p[15]) {
                return this.aat;
            }
            return super.li(a);
        }
        get y2() {
            return this.yx;
        }
        set y2(a) {
            if (this.yx != a) {
                let b = this.yx;
                this.yx = a;
                this.raisePropertyChanged("LabelColumn", b, this.yx);
            }
        }
        get y3() {
            return this.yy;
        }
        set y3(a) {
            if (this.yy != a) {
                let b = this.yy;
                this.yy = a;
                this.raisePropertyChanged("XColumn", b, this.yy);
            }
        }
        get y4() {
            return this.yz;
        }
        set y4(a) {
            if (this.yz != a) {
                let b = this.yz;
                this.yz = a;
                this.raisePropertyChanged("YColumn", b, this.yz);
            }
        }
        get y1() {
            return this.yw;
        }
        set y1(a) {
            if (this.yw != a) {
                let b = this.yw;
                this.yw = a;
                this.raisePropertyChanged("KeyColumn", b, this.yw);
            }
        }
        get y0() {
            return this.yv;
        }
        set y0(a) {
            if (this.yv != a) {
                let b = this.yv;
                this.yv = a;
                this.raisePropertyChanged("ContentColumn", b, this.yv);
            }
        }
        abn(a, b) {
            if (b.propertyName == CalloutAnnotation.$$p[14] || b.propertyName == CalloutAnnotation.$$p[15]) {
                let c = a.k;
                if (!this.zp.contains(c)) {
                    this.zp.add_1(c);
                    this.zs.add(c);
                    this.qm(false);
                }
            }
        }
        ci() {
            return new CalloutLayerView(this);
        }
        px(a) {
            super.px(a);
            this.yl = a;
        }
        get yn() {
            return this.ym;
        }
        set yn(a) {
            let b = this.yn;
            if (a != b) {
                this.ym = a;
                this.raisePropertyChanged("AllowedPositions", b, this.yn);
            }
        }
        get yg() {
            return EnumUtil.getEnumValue(AutoCalloutVisibilityMode_$type, this.c(CalloutLayer.ace));
        }
        set yg(a) {
            this.h(CalloutLayer.ace, enumGetBox(AutoCalloutVisibilityMode_$type, a));
        }
        get yf() {
            return this.ye;
        }
        set yf(a) {
            this.ye = a;
        }
        get ac3() {
            return new Thickness(1, this.zy, this.z0, this.zz, this.zx);
        }
        get yu() {
            if (this.yt == null) {
                this.yt = FontUtil.toFontInfo(this.jf, this.aa9);
            }
            return this.yt;
        }
        w4(a, b) {
            if (this.ys == null || this.ys == a) {
                if (!this.at.c) {
                    this.qm(b);
                }
            }
        }
        w6(a, b) {
            super.w6(a, b);
            let c = a;
            c.q.clear();
            c.r.clear();
            c.n.clear();
            c.f.clear();
            c.i.clear();
            c.h.clear();
            c.k.clear();
            c.m.clear();
            c.l.clear();
            c.j.clear();
            c.g.clear();
            c.o.clear();
            c.p.clear();
            c.u.clear();
            c.v.clear();
            c.s.clear();
            c.t.clear();
            let d = this.zu();
            let e = new List$1(CalloutAnnotationWrapper.$, 0);
            let f = true;
            if (this.zg) {
                if (this.vx(this.ys)) {
                    this.abv(this.ys, c, e);
                }
                else {
                    for (let g of fromEnum(this.c1.series)) {
                        if (this.vx(g)) {
                            if (!g.ed) {
                                if (!g.isVertical) {
                                    f = false;
                                }
                            }
                            let h = false;
                            if (g.d2 && this.yr == 0 || this.yr == 3 || this.yr == 2) {
                                if (this.yr == 0 || this.yr == 2) {
                                    h = true;
                                }
                                g.oy((i) => {
                                    this.abv(i, c, e);
                                    return true;
                                });
                            }
                            if (!h) {
                                this.abv(g, c, e);
                            }
                        }
                    }
                }
            }
            if (this.zg && this.yf == 2) {
                let i = 0;
                let j = 0;
                let k = 1.7976931348623157E+308;
                let l = 1.7976931348623157E+308;
                let m = -1.7976931348623157E+308;
                let n = -1.7976931348623157E+308;
                if (e.count > 0) {
                    if (e._inner[0].c != null) {
                        i = e._inner[0].e;
                        j = e._inner[0].f;
                    }
                    for (let o = 0; o < e.count; o++) {
                        let p = e._inner[o];
                        if (p.c != null) {
                            let q = p.e;
                            let r = p.f;
                            if (q != i) {
                                k = Math.min(k, Math.abs(q - i));
                            }
                            if (r != j) {
                                l = Math.min(l, Math.abs(r - j));
                            }
                            m = Math.max(p.c.l + p.c.l, m);
                            n = Math.max(p.c.k + p.c.k, n);
                        }
                    }
                    if (f) {
                        if (n > l) {
                            e.clear();
                        }
                    }
                    else {
                        if (m > k) {
                            e.clear();
                        }
                    }
                }
            }
            this.abu(c, d, e);
        }
        rk(a, b) {
            super.rk(a, b);
            let c = b.width - this.ac1.width;
            let d = b.height - this.ac1.height;
            let e = 0;
            if (Math.abs(c) > Math.abs(d)) {
                e = c;
                this.zv = c * this.u9.width;
            }
            else {
                e = d;
                this.zv = d * this.u9.height;
            }
            if (e > 0 && this.zv > 5) {
                this.zf = true;
            }
            if (e < 0 && this.zv > 5) {
                this.ze = true;
            }
        }
        rj(a, b) {
            super.rj(a, b);
            if (!a.equals1(b)) {
                this.zd = true;
            }
        }
        get ac2() {
            return this.ac0;
        }
        set ac2(a) {
            this.ac0 = a;
        }
        abu(a, b, c) {
            if (this.c1 != null) {
                this.ac1 = this.c1.vh;
            }
            if (this.u9.isEmpty) {
                return;
            }
            this.ac2 = new Rect(0, this.u9.left, this.u9.top, this.u9.width, this.u9.height);
            if (this.y5 != null && this.aaq != null && this.aaq != this.y5.ap) {
                this.abp();
            }
            if (this.y5 == null) {
                let d = this.y6();
                if (d != null) {
                    this.y5 = d;
                    let e = this.y5;
                    e.labelsMoved = delegateCombine(e.labelsMoved, runOn(this, this.abm));
                }
                else {
                    let f = this.u1(this.cl);
                    let g = new Array(2);
                    g[0] = 0;
                    g[1] = 3;
                    if (this.ys != null) {
                        if (this.ys.isVertical) {
                            g = new Array(2);
                            g[0] = 2;
                            g[1] = 1;
                        }
                    }
                    else {
                        let h = false;
                        if (this.c1 != null && this.c1.series.count > 0) {
                            h = true;
                            for (let i of fromEnum(this.c1.series)) {
                                if (!i.ed) {
                                    if (!i.isVertical) {
                                        h = false;
                                    }
                                }
                            }
                        }
                        if (h) {
                            g = new Array(2);
                            g[0] = 2;
                            g[1] = 1;
                        }
                    }
                    this.y5 = new LabelCollisionManager(this.u9.right, this.u9.bottom, this.u9, this.yl.j(), this.z1, this.y7(), g, this.z8(), this.z7(), this.zh, this.yc);
                    if (this.aaq != null) {
                        this.y5.ap = this.aaq;
                        this.y5.an = this;
                    }
                    let j = this.y5;
                    j.labelsMoved = delegateCombine(j.labelsMoved, runOn(this, this.abm));
                }
            }
            if (this.ze) {
                this.ze = false;
                if (this.y5.al > 2) {
                    this.zc = true;
                }
            }
            if (this.zf) {
                this.zf = false;
                if (this.zv > 5) {
                    this.zc = true;
                }
            }
            if (this.zd) {
                this.zd = false;
                this.y5.a3(this.u9.right, this.u9.bottom, this.u9);
                this.zc = true;
            }
            let k = new HashSet$1(CalloutAnnotationWrapper.$, 0);
            let l = new HashSet$1(CalloutAnnotationWrapper.$, 0);
            let m = new List$1(CalloutAnnotationWrapper.$, 0);
            let n = new List$1(CalloutAnnotationWrapper.$, 0);
            let o = new HashSet$1(CalloutAnnotationWrapper.$, 0);
            for (let p = 0; p < b.count; p++) {
                o.add_1(b._inner[p]);
            }
            for (let q = 0; q < c.count; q++) {
                o.add_1(c._inner[q]);
            }
            let r = this.zq.c;
            while (r != null) {
                let s = r.a;
                if (!o.contains(r.c)) {
                    n.add(r.c);
                    l.add_1(r.c);
                    let t = r.c.b;
                    t.propertyChanged = delegateRemove(t.propertyChanged, runOn(this, this.abn));
                    this.zq.h(r);
                    this.zn.removeItem(r.c);
                    this.y5.a2(r.c.c);
                }
                r = s;
            }
            for (let u = 0; u < b.count; u++) {
                if (!this.zn.containsKey(b._inner[u])) {
                    this.zq.f(b._inner[u]);
                    let v = b._inner[u].b;
                    v.propertyChanged = delegateCombine(v.propertyChanged, runOn(this, this.abn));
                    this.zn.addItem(b._inner[u], this.zq.d);
                    m.add(b._inner[u]);
                    k.add_1(b._inner[u]);
                    this.zc = true;
                }
            }
            for (let w = 0; w < c.count; w++) {
                if (!this.zn.containsKey(c._inner[w])) {
                    this.zq.f(c._inner[w]);
                    this.zn.addItem(c._inner[w], this.zq.d);
                    let x = c._inner[w].b;
                    x.propertyChanged = delegateCombine(x.propertyChanged, runOn(this, this.abn));
                    m.add(c._inner[w]);
                    k.add_1(c._inner[w]);
                    this.zc = true;
                }
            }
            if (this.za == true) {
                this.za = false;
                this.zc = true;
            }
            if (this.zs.count > 0) {
                this.zc = true;
                this.zs.clear();
                this.zp.clear();
            }
            r = this.zq.c;
            while (r != null) {
                let y = this.y8(r.c);
                if (y == null) {
                    return;
                }
                if (!Base.equalsStatic(y, r.c.c.c)) {
                    let z = false;
                    if (r.c.c.c == null) {
                        z = true;
                    }
                    let aa = r.c.c;
                    aa.o = y.b;
                    aa.p = y.c;
                    if (!isNaN_(aa.o) && !isNaN_(aa.p)) {
                        aa.n = y.e;
                        aa.m = y.d;
                        if (aa.b == null) {
                            this.y5.t(aa, false);
                        }
                        if (z) {
                            this.y5.aq(aa);
                        }
                        else {
                            this.y5.az(aa);
                        }
                    }
                }
                r = r.a;
            }
            let ab = this.y5.am();
            let ac = this.y5.u();
            if (ac) {
                if (this.y5.q()) {
                    this.zc = true;
                }
            }
            if (this.zc && (ab != 0 || ac)) {
                this.zc = false;
                this.z4 = 0x7FFFFFFF;
                if (this.aaq != null) {
                    let ad = true;
                    for (let ae = 0; ae < this.c1.series.count; ae++) {
                        let af = this.c1.series._inner[ae];
                        if (af.ed && typeCast(CalloutLayer.$, af) !== null) {
                            let ag = af;
                            if (ag.aaq == this.aaq) {
                                if (!ag.ac2.equals1(this.y5.a5)) {
                                    ad = false;
                                    break;
                                }
                            }
                        }
                    }
                    if (ad) {
                        this.y5.a4();
                    }
                    else {
                        this.y5.ar();
                        this.y5.as();
                    }
                }
                else {
                    this.y5.a4();
                }
            }
            else {
                this.y5.as();
            }
            let ah = this.zq.c;
            let ai;
            let aj;
            let ak;
            let al;
            let am;
            let an;
            let ao;
            let ap;
            let aq;
            let ar;
            let as;
            let at;
            let au;
            let av;
            let aw;
            let ax;
            let ay = this.zi;
            while (ah != null) {
                let az = ah.c;
                let a0 = az.b;
                ai = a0.bk;
                aj = a0.bm;
                ak = a0.bl;
                al = a0.backgroundPadding.left;
                am = a0.backgroundPadding.top;
                an = a0.backgroundPadding.right;
                ao = a0.backgroundPadding.bottom;
                aq = a0.backgroundCornerRadius;
                ap = a0.y;
                ar = a0.bn;
                as = a0.ao;
                at = a0.aa;
                let a1 = az.c;
                au = a1.o - (a1.g - a1.l);
                av = a1.p - (a1.h - a1.k);
                aw = a1.g - a1.l;
                ax = a1.h - a1.k;
                if (ay) {
                    let a2 = new CalloutRenderStyleUpdatingEventArgs();
                    a2.background = ai;
                    a2.outline = aj;
                    a2.leaderBrush = ak;
                    a2.strokeThickness = ap;
                    a2.textColor = ar;
                    a2.item = at;
                    a2.series = a0.l;
                    a2.actualPosition = a1.a;
                    a2.xValue = a0.ac;
                    a2.yValue = a0.ad;
                    if (this.calloutRenderStyleUpdating != null) {
                        this.calloutRenderStyleUpdating(this, a2);
                        ai = a2.background;
                        aj = a2.outline;
                        ak = a2.leaderBrush;
                        ap = a2.strokeThickness;
                        ar = a2.textColor;
                    }
                }
                a.n.add1(az);
                a.f.add(ai);
                a.i.add(aj);
                a.h.add(ak);
                a.k.add(al);
                a.m.add(am);
                a.l.add(an);
                a.j.add(ao);
                a.g.add(aq);
                a.o.add(ap);
                a.p.add(ar);
                a.q.add1(as);
                a.r.add1(at);
                a.u.add(au);
                a.v.add(av);
                a.s.add(aw);
                a.t.add(ax);
                ah = ah.a;
            }
        }
        abp() {
            if (this.y5 != null) {
                let a = this.zq.c;
                while (a != null) {
                    let b = a.c.c;
                    if (b != null) {
                        this.y5.a2(b);
                    }
                    a = a.a;
                }
                let c = this.y5;
                c.labelsMoved = delegateRemove(c.labelsMoved, runOn(this, this.abm));
                this.y5 = null;
            }
            this.abo();
        }
        y6() {
            if (this.c1 == null) {
                return null;
            }
            for (let a = 0; a < this.c1.series.count; a++) {
                let b = this.c1.series._inner[a];
                if (b.ed && typeCast(CalloutLayer.$, b) !== null) {
                    let c = b;
                    if (c != this) {
                        if (c.aaq != null && c.aaq == this.aaq) {
                            if (c.y5 != null) {
                                return c.y5;
                            }
                        }
                    }
                }
            }
            return null;
        }
        z7() {
            return 20000;
        }
        z8() {
            return 300;
        }
        y7() {
            switch (this.yi) {
                case 0: return 2;
                case 2: return 1;
                case 3: return 2;
                case 1: return 0;
            }
            return 2;
        }
        abm(a) {
            let b = this.y5.am();
            if (b < this.z4) {
                this.z4 = b;
                this.qm(false);
            }
        }
        y8(a) {
            let b = this.ys;
            if (a.b.l != null) {
                b = a.b.l;
            }
            if (b == null) {
                for (let c = 0; c < this.c1.series.count; c++) {
                    let d = this.c1.series._inner[c];
                    if (!d.ed) {
                        b = d;
                        break;
                    }
                }
            }
            if (b == null) {
                return null;
            }
            let e = b.ag();
            let f = b.id();
            let g = null;
            let h = null;
            let i = false;
            for (let j = 0; j < e.length; j++) {
                if (e[j].b9) {
                    i = true;
                    g = e[j];
                }
                else if (e[j].cm) {
                    i = true;
                    h = e[j];
                }
                else if (e[j].cp) {
                    h = e[j];
                }
                else {
                    g = e[j];
                }
            }
            if (g == null || h == null) {
                return null;
            }
            if (!g.co() || !h.co()) {
                return null;
            }
            let k = 0;
            let l = 0;
            if (g.cb && g.categoryMode != 0) {
                if (b.er) {
                    k = b.getOffsetValue();
                }
                else if (b.ej) {
                    k = b.getOffsetValue();
                }
            }
            if (h.cb && h.categoryMode != 0) {
                if (b.ej) {
                    l = b.getOffsetValue();
                }
            }
            let m = new ScalerParams(0, this.c1.vh, g.kd, g.ch, g.j8());
            m.b = f;
            let n = new ScalerParams(0, this.c1.vh, h.kd, h.ch, h.j8());
            n.b = f;
            let o = 0;
            let p = 0;
            if (i) {
                o = g.ej(this.z3(a.b.ac), m) + k;
                p = h.ej(this.z3(a.b.ad), n) + l;
                let q = o;
                let r = p;
                let s = { $type: Point_$type, x: 0.5, y: 0.5 };
                let t = s.x + (r * Math.cos(q));
                o = ViewportUtils.c(t, m.e, m.d);
                let u = s.y + (r * Math.sin(q));
                p = ViewportUtils.f(u, n.e, n.d);
            }
            else {
                o = g.ej(this.z3(a.b.ac), m) + k;
                p = h.ej(this.z3(a.b.ad), n) + l;
            }
            let v = new QuadTreeBoundingBox();
            v.b = o;
            v.c = p;
            v.e = 3;
            v.d = 3;
            v.g = a.b;
            return v;
        }
        z3(a) {
            if (typeCast(Date_$type, a) !== null) {
                return a.getTime();
            }
            if (a == null) {
                return 0;
            }
            return a;
        }
        zu() {
            let a = new List$1(CalloutAnnotationWrapper.$, 0);
            for (let b = 0; b < this.zt.count; b++) {
                if (stringIsNullOrEmpty(this.zt._inner[b].b.ao)) {
                    continue;
                }
                if (this.zt._inner[b].c == null) {
                    let c = new LabelCollisionInfo();
                    this.zt._inner[b].c = c;
                    let d = this.yl.cq(this.z9(this.zt._inner[b]), this.zt._inner[b].b.backgroundPadding);
                    c.k = d.height / 2;
                    c.l = d.width / 2;
                }
                let e = this.y8(this.zt._inner[b]);
                if (e == null || e.b < this.u9.left || e.b > this.u9.right || e.c < this.u9.top || e.c > this.u9.bottom) {
                    continue;
                }
                a.add(this.zt._inner[b]);
            }
            return a;
        }
        z9(a) {
            return a.b.ao;
        }
        vx(a) {
            if (!super.vx(a)) {
                return false;
            }
            if (this.aa6 != null) {
                if (a.ew) {
                    let b = a.mg();
                    if (!Base.equalsStatic(this.aa6, b)) {
                        return false;
                    }
                }
                else {
                    if (!Base.equalsStatic(this.aa6, a.name)) {
                        return false;
                    }
                }
            }
            return true;
        }
        pl() {
            super.pl();
            if (!this.at.c && !this.dr()) {
                return;
            }
            if (this.y9) {
                this.y9 = false;
                this.abr();
            }
            if (this.dr()) {
                this.abx(this.vs, false);
            }
            else {
                this.abx(this.vq, false);
            }
        }
        abs() {
            if (!this.zb) {
                this.zb = true;
                this.qm(true);
            }
        }
        abv(a, b, c) {
            let d = false;
            if (this.zb) {
                this.zb = false;
                d = true;
            }
            if (!a.f2 && a.dz(this.zr, this.zm, this.zk, this.z5)) {
                let e = this.zr;
                for (let f = 0; f < this.zr.count; f++) {
                    let g = e._inner[f];
                    let h = g.a != null ? g.a.item : null;
                    let i = g.a.item != null ? g.a.item : g.a;
                    let j = a;
                    let k = new CalloutKey(i, j);
                    let l = new CalloutAnnotationWrapper();
                    let m = new CalloutAnnotation();
                    l.b = m;
                    m.key = k;
                    let n = false;
                    if (this.zn.containsKey(l)) {
                        l = this.zn.item(l).c;
                        m = l.b;
                        n = d;
                    }
                    else {
                        n = true;
                    }
                    let o = m.ac;
                    let p = m.ad;
                    if (this.z3(o) != this.z3(g.b)) {
                        m.xValue = g.b;
                    }
                    if (this.z3(p) != this.z3(g.c)) {
                        m.yValue = g.c;
                    }
                    m.series = a;
                    let q = false;
                    if (g.d != m.ay) {
                        m.ay = g.d;
                        q = true;
                    }
                    if (n || q) {
                        if (this.calloutLabelUpdating != null) {
                            let r = ((() => {
                                let $ret = new CalloutLabelUpdatingEventArgs();
                                $ret.d = m.ac;
                                $ret.e = m.ad;
                                $ret.item = h;
                                $ret.a = a;
                                $ret.f = a.name;
                                return $ret;
                            })());
                            this.calloutLabelUpdating(this, r);
                            if (r.c != null && !Base.equalsStatic(r.c, l.b.ao)) {
                                let s = r.c;
                                l.b.text = s != null ? s.toString() : "";
                            }
                        }
                        else {
                            if (g.d != null) {
                                m.text = g.d;
                            }
                        }
                    }
                    if (m.ao == null) {
                        continue;
                    }
                    if (n || q) {
                        if (this.calloutContentUpdating != null) {
                            let t = ((() => {
                                let $ret = new CalloutContentUpdatingEventArgs();
                                $ret.c = m.ac;
                                $ret.d = m.ad;
                                $ret.item = h;
                                $ret.a = i;
                                return $ret;
                            })());
                            this.calloutContentUpdating(this, t);
                            if (t.a != null && t.a != l.b.aa) {
                                l.b.content = t.a;
                            }
                        }
                        else {
                            if (i != null && i != l.b.aa) {
                                l.b.content = i;
                            }
                        }
                    }
                    if (n) {
                        this.abz(l);
                    }
                    if (l.c == null) {
                        let u = new LabelCollisionInfo();
                        l.c = u;
                        let v = this.yl.cq(this.z9(l), l.b.backgroundPadding);
                        u.k = v.height / 2;
                        u.l = v.width / 2;
                    }
                    let w = this.y8(l);
                    if (w == null || w.b < this.u9.left || w.b > this.u9.right || w.c < this.u9.top || w.c > this.u9.bottom) {
                        continue;
                    }
                    l.e = w.b;
                    l.f = w.c;
                    c.add(l);
                }
            }
        }
        bt() {
            return 1;
        }
        au(a, b) {
            let c = this.y5.f(a, b);
            if (c == null) {
                return null;
            }
            return c.u;
        }
        gf(a, b) {
            if (this.y5 == null) {
                return false;
            }
            return this.y5.f(a, b) != null;
        }
        abx(a, b) {
            let c = 0;
            let d = new HashSet$1(CalloutAnnotationWrapper.$, 0);
            for (c = 0; c < a.q.count; c++) {
                let e = a.n._inner[c];
                if (isNaN_(a.u._inner[c]) || isNaN_(a.v._inner[c])) {
                    continue;
                }
                let f = this.yl.cb.item(e);
                d.add_1(e);
                if (f.h != a.q._inner[c]) {
                    f.h = a.q._inner[c];
                    let g = f.u();
                }
                f.e = a.o._inner[c];
                f.m = a.f._inner[c];
                f.p = a.p._inner[c];
                f.o = f.e > 0 ? a.i._inner[c] : this.cl.bt();
                f.n = a.h._inner[c];
                f.x = new Thickness(1, a.k._inner[c], a.m._inner[c], a.l._inner[c], a.j._inner[c]);
                f.d = a.g._inner[c];
                this.yl.cj(f, Math.min(a.s._inner[c], a.s._inner[c] + a.u._inner[c]), Math.min(a.t._inner[c], a.t._inner[c] + a.v._inner[c]));
                this.yl.ck(f, e, a.r._inner[c]);
                f.r = { $type: Point_$type, x: a.u._inner[c], y: a.v._inner[c] };
            }
            let h = new List$1(CalloutAnnotationWrapper.$, 0);
            for (let i of fromEnum(this.yl.cb.c)) {
                if (!d.contains(i)) {
                    h.add(i);
                }
            }
            for (let j = 0; j < h.count; j++) {
                this.yl.cb.h(h._inner[j]);
            }
        }
        w9(a, b) {
            super.w9(a, b);
            if (this.dr()) {
                this.abx(this.vs, true);
            }
            else {
                this.abx(this.vq, false);
            }
        }
        fu() {
            return true;
        }
        p5(a, b, c, d) {
            super.p5(a, b, c, d);
            switch (b) {
                case CalloutLayer.$$p[25]:
                    this.yt = null;
                    this.yl.ci();
                    this.qm(true);
                    break;
                case CalloutLayer.$$p[23]:
                case CalloutLayer.$$p[24]:
                    this.qm(true);
                    break;
                case CalloutLayer.$$p[14]:
                case CalloutLayer.$$p[16]:
                    this.qm(true);
                    break;
                case "SeriesViewer":
                    if (c != null) {
                        let e = c;
                        e.seriesAnimating = delegateRemove(e.seriesAnimating, runOn(this, this.abw));
                    }
                    if (d != null) {
                        let f = d;
                        f.seriesAnimating = delegateCombine(f.seriesAnimating, runOn(this, this.abw));
                    }
                    if (d == null) {
                        this.abp();
                    }
                    break;
                case "AutoCalloutVisibilityMode":
                    this.yf = this.yh();
                    this.abq();
                    break;
                case "AllowedPositions":
                    if (c != null) {
                        let g = c;
                        g.collectionChanged = delegateRemove(g.collectionChanged, runOn(this, this.abk));
                    }
                    if (d != null) {
                        let h = d;
                        h.collectionChanged = delegateCombine(h.collectionChanged, runOn(this, this.abk));
                    }
                    this.yc = this.yd(this.yn);
                    this.abq();
                    break;
                case CalloutLayer.$$p[17]:
                case CalloutLayer.$$p[18]:
                case CalloutLayer.$$p[1]:
                case CalloutLayer.$$p[6]:
                case CalloutLayer.$$p[5]:
                case CalloutLayer.$$p[26]:
                case CalloutLayer.$$p[27]:
                case CalloutLayer.$$p[20]:
                case CalloutLayer.$$p[19]:
                case CalloutLayer.$$p[8]:
                case CalloutLayer.$$p[10]:
                case CalloutLayer.$$p[9]:
                case CalloutLayer.$$p[7]:
                case CalloutLayer.$$p[12]:
                case CalloutLayer.$$p[13]:
                    this.abq();
                    break;
                case CalloutLayer.$$p[22]:
                    if (this.dd != null) {
                        this.dd.deregisterColumn(this.y2);
                        this.y2 = this.dc(this.aa4);
                    }
                    break;
                case "LabelColumn":
                    this.abq();
                    break;
                case CalloutLayer.$$p[15]:
                    if (this.dd != null) {
                        this.dd.deregisterColumn(this.y0);
                        this.y0 = this.dc(this.aat);
                    }
                    break;
                case "ContentColumn":
                    this.abq();
                    break;
                case CalloutLayer.$$p[29]:
                    if (this.dd != null) {
                        this.dd.deregisterColumn(this.y3);
                        this.y3 = stringIsNullOrEmpty(this.abf) == false ? this.dc(this.abf) : null;
                    }
                    break;
                case "XColumn":
                    this.abq();
                    break;
                case CalloutLayer.$$p[30]:
                    if (this.dd != null) {
                        this.dd.deregisterColumn(this.y4);
                        this.y4 = this.dc(this.abi);
                    }
                    break;
                case "YColumn":
                    this.abq();
                    break;
                case CalloutLayer.$$p[21]:
                    if (this.dd != null) {
                        this.dd.deregisterColumn(this.y1);
                        this.y1 = this.dc(this.aa1);
                    }
                    break;
                case "KeyColumn":
                    this.abq();
                    break;
                case "FastItemsSource":
                    this.za = true;
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        c.deregisterColumn(this.y2);
                        c.deregisterColumn(this.y0);
                        c.deregisterColumn(this.y3);
                        c.deregisterColumn(this.y4);
                        c.deregisterColumn(this.y1);
                        this.y2 = null;
                        this.y0 = null;
                        this.y3 = null;
                        this.y4 = null;
                        this.y1 = null;
                        this.zt.clear();
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        this.y2 = this.dc(this.aa4);
                        this.y0 = this.dc(this.aat);
                        if (stringIsNullOrEmpty(this.abf) == false) {
                            this.y3 = this.dc(this.abf);
                        }
                        this.y4 = this.dc(this.abi);
                        this.y1 = this.dc(this.aa1);
                    }
                    this.abq();
                    break;
            }
        }
        yh() {
            if (this.yg == 0) {
                return 1;
            }
            return this.yg;
        }
        yd(a) {
            if (a == null || a.count == 0) {
                return null;
            }
            let b = new Array(a.count);
            for (let c = 0; c < a.count; c++) {
                b[c] = a._inner[c];
            }
            return b;
        }
        abw(a) {
            if (a.ed) {
                return;
            }
            if ((a == this.ys || this.ys == null) && this.zg) {
                this.qm(false);
            }
        }
        abq() {
            if (this.y9 == false) {
                this.y9 = true;
                this.qm(false);
            }
        }
        abo() {
            this.yl.cb.clear();
            this.zq.g();
            this.zn.clear();
        }
        abr() {
            if (this.y4 == null || this.y2 == null) {
                let a = this.zq.c;
                while (a != null) {
                    this.abz(a.c);
                    a = a.a;
                }
                return;
            }
            let b = this.zo();
            for (let c = 0; c < this.y4.count; c++) {
                let d;
                if (this.zt.count <= c) {
                    let e = new CalloutAnnotation();
                    d = new CalloutAnnotationWrapper();
                    d.b = e;
                    d.b.series = this.ys;
                    this.zt.add(d);
                }
                else {
                    d = this.zt._inner[c];
                }
                this.aby(c, b);
            }
        }
    }
    CalloutLayer.$t = /*@__PURE__*/ markType(CalloutLayer, 'CalloutLayer', AnnotationLayer.$);
    CalloutLayer.ace = /*@__PURE__*/ DependencyProperty.i("AutoCalloutVisibilityMode", AutoCalloutVisibilityMode_$type, CalloutLayer.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(AutoCalloutVisibilityMode_$type, 0), (a, b) => a.raisePropertyChanged("AutoCalloutVisibilityMode", b.oldValue, b.newValue)));
    CalloutLayer.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, CalloutLayer, 'raisePropertyChanged', ['AutoCalloutLabelPrecision:z5:ab0', [1, 5], 'CalloutBackground:acw:ab1', [Brush.$, null], 'CalloutCollisionMode:yi:ab2', [CalloutCollisionMode_$type, /*@__PURE__*/ enumGetBox(CalloutCollisionMode_$type, 3)], 'CalloutCornerRadius:zw:ab3', [1, NaN], 'CalloutInterpolatedValuePrecision:z6:ab4', [1, -1], 'CalloutLeaderBrush:acx:ab5', [Brush.$, null], 'CalloutOutline:acy:ab6', [Brush.$, null], 'CalloutPaddingBottom:zx:ab7', [1, NaN], 'CalloutPaddingLeft:zy:ab8', [1, NaN], 'CalloutPaddingRight:zz:ab9', [1, NaN], 'CalloutPaddingTop:z0:aca', [1, NaN], 'CalloutPositionPadding:z1:acb', [1, 10], 'CalloutStrokeThickness:z2:acc', [1, NaN], 'CalloutTextColor:acz:acd', [Brush.$, null], 'CollisionChannel:aaq:acf', [2, null], 'ContentMemberPath:aat:acg', [2, null], 'HighlightedValueLabelMode:yr:ach', [HighlightedValueLabelMode_$type, /*@__PURE__*/ enumGetBox(HighlightedValueLabelMode_$type, 0)], 'IsAutoCalloutBehaviorEnabled:zg:aci', [0, false], 'IsCalloutOffsettingEnabled:zh:acj', [0, true], 'IsCustomCalloutRenderStyleEnabled:zi:ack', [0, false], 'IsCustomCalloutStyleEnabled:zj:acl', [0, false], 'KeyMemberPath:aa1:acm', [2, null], 'LabelMemberPath:aa4:acn', [2, null], 'TargetSeriesName:aa6:aco', [2, null], 'TargetSeries:ys:acp', [Series.$, null], 'TextStyle:aa9:acq', [2, null], 'UseInterpolatedValueForAutoCalloutLabels:zk:acr', [0, false], 'UseSeriesColorForOutline:zl:acs', [0, false], 'UseValueForAutoCalloutLabels:zm:act', [0, true], 'XMemberPath:abf:acu', [2, null], 'YMemberPath:abi:acv', [2, null]]);
    return CalloutLayer;
})();
/**
 * @hidden
 */
export let CalloutLayerView = /*@__PURE__*/ (() => {
    class CalloutLayerView extends AnnotationLayerView {
        constructor(a) {
            super(a);
            this.b7 = null;
            this.cc = null;
            this.cb = null;
            this.cd = NaN;
            this.b8 = null;
            this.b7 = a;
            this.cc = new List$1(CalloutView.$, 0);
        }
        au() {
            super.au();
            this.cb = ((() => {
                let $ret = new HashPool$2(CalloutAnnotationWrapper.$, CalloutView.$);
                $ret.create = runOn(this, this.b9);
                $ret.activate = runOn(this, this.cf);
                $ret.disactivate = runOn(this, this.ch);
                $ret.destroy = runOn(this, this.cg);
                return $ret;
            })());
        }
        b9() {
            let a = new CalloutView(this);
            this.cc.add(a);
            return a;
        }
        cf(a) {
            a.y = 0;
        }
        ch(a) {
            a.y = 1;
        }
        cg(a) {
            this.cc.remove(a);
        }
        cp(a) {
            if (a == null) {
                return a;
            }
            return BrushUtil.m(a, 0.1);
        }
        a8(a, b) {
            super.a8(a, b);
            a.ad(this.ca());
            if (a.d && !b) {
                for (let c = 0; c < this.cc.count; c++) {
                    let d = this.cc._inner[c];
                    if (d.y == 0) {
                        d.j(a);
                    }
                }
            }
        }
        ca() {
            if (this.b7.yu != null) {
                return this.b7.yu;
            }
            return this.e.c1.getFontInfo();
        }
        an(a) {
            super.an(a);
            for (let b = 0; b < this.cc.count; b++) {
                let c = this.cc._inner[b];
                if (c.y != 0) {
                    continue;
                }
                c.i(this.b7, this.ca(), a);
            }
        }
        cr(a) {
            this.k.ad(this.ca());
            this.cd = this.ce();
            let b = this.k.ah(a, this.cd, true);
            return new Size(1, b.c, b.b);
        }
        ce() {
            let a = this.ca();
            if (isNaN_(this.cd)) {
                let b = FontUtil.getCurrentFontHeight(this.e.c1.c8.j.ae, a);
                this.cd = b;
            }
            return this.cd;
        }
        cq(a, b) {
            if (this.b8 == null) {
                this.b8 = new CalloutView(this);
            }
            this.b8.h = a;
            this.b8.x = b;
            let c = this.b8.u();
            this.b8.h = null;
            return c;
        }
        cj(a, b, c) {
            a.f = b;
            a.g = c;
        }
        ck(a, b, c) {
            a.k(this.e, b, c);
        }
        cl(a) {
            if (a != null) {
                return this.cp(a.t3);
            }
            return this.e.t3;
        }
        co() {
            return ((() => {
                let $ret = new Brush();
                $ret.color = Color.u(255, 255, 255, 255);
                return $ret;
            })());
        }
        cn(a) {
            if (this.b7.zl) {
                if (a != null) {
                    return this.cp(a.t3);
                }
            }
            return ((() => {
                let $ret = new Brush();
                $ret.color = Color.u(255, 255, 255, 255);
                return $ret;
            })());
        }
        cm(a) {
            if (a != null) {
                return this.cp(a.tw);
            }
            return this.e.tw;
        }
        ci() {
            this.cd = NaN;
        }
    }
    CalloutLayerView.$t = /*@__PURE__*/ markType(CalloutLayerView, 'CalloutLayerView', AnnotationLayerView.$);
    return CalloutLayerView;
})();
/**
 * @hidden
 */
export let CalloutView = /*@__PURE__*/ (() => {
    class CalloutView extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.y = 0;
            this.l = null;
            this.t = null;
            this.q = { $type: Point_$type, x: 0, y: 0 };
            this.s = null;
            this.w = new Thickness(0, 0);
            this.v = null;
            this.c = 0;
            this.f = 0;
            this.g = 0;
            this.b = null;
            this.s = new Line();
            this.s.ab = false;
            this.s._stroke = ((() => {
                let $ret = new Brush();
                $ret.color = Color.u(255, 0, 0, 0);
                return $ret;
            })());
            this.s.ad = 2;
            this.l = new TextBlock();
            this.t = new Rectangle();
            this.t.ad = 0;
            this.a = a;
            this.y = 0;
        }
        j(a) {
            a.aa();
            a.ag(this.f, this.g);
            let b = new TranslateTransform();
            b.j = this.v.left;
            b.k = this.v.top;
            this.t.j = b;
            a.s(this.s);
            a.aa();
            this.t.width = this.l.m + this.w.left + this.w.right;
            this.t.height = this.l.l + this.w.top + this.w.bottom;
            this.t.ap = this.c;
            this.t.aq = this.c;
            a.k(this.t.j);
            a.w(this.t);
            this.l.ag = true;
            this.l.o = this.w.top;
            this.l.n = this.w.left;
            a.x(this.l);
            a.z();
            a.z();
        }
        get r() {
            return this.q;
        }
        set r(a) {
            if (this.q.x != a.x || this.q.y != a.y) {
                let b = this.u();
                let c = b.height;
                let d = b.width;
                this.q = a;
                let e = CalloutViewHelper.b(this.r, d, c, this.s);
                this.v = e;
            }
        }
        get p() {
            return this.l.ao;
        }
        set p(a) {
            this.l.ao = a;
        }
        get o() {
            return this.t._stroke;
        }
        set o(a) {
            this.t._stroke = a;
        }
        get n() {
            return this.s._stroke;
        }
        set n(a) {
            this.s._stroke = a;
        }
        get m() {
            return this.t._fill;
        }
        set m(a) {
            this.t._fill = a;
        }
        get e() {
            return this.t.ad;
        }
        set e(a) {
            this.t.ad = a;
        }
        get x() {
            return this.w;
        }
        set x(a) {
            this.w = a;
        }
        get d() {
            return this.c;
        }
        set d(a) {
            this.c = a;
        }
        get h() {
            return this.l.al;
        }
        set h(a) {
            if (a == null) {
                this.l.al = "";
            }
            else {
                this.l.al = a.toString();
            }
            let b = this.u();
            let c = b.height;
            let d = b.width;
            let e = CalloutViewHelper.b(this.r, d, c, this.s);
            this.v = e;
        }
        u() {
            let a = this.a.cr(this.l);
            this.l.m = a.width;
            this.l.l = a.height;
            return new Size(1, a.width + this.w.left + this.w.right, a.height + this.w.top + this.w.bottom);
        }
        k(a, b, c) {
            if (this.b == null) {
                this.b = new DataContext();
            }
            this.b.series = a;
            this.b.item = c;
            if (b.c != null) {
                b.c.u = this.b;
            }
        }
        i(a, b, c) {
            a.a4.exportCalloutData(this.f, this.g, this.v.left, this.v.top, c, this.t, this.l, b, this.s, "callout", ["Main", "Callout"]);
        }
    }
    CalloutView.$t = /*@__PURE__*/ markType(CalloutView, 'CalloutView');
    return CalloutView;
})();
