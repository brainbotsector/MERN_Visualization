/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Brush } from "igniteui-react-core";
import { XYChart } from "./XYChart";
import { IndicatorPane } from "./IndicatorPane";
import { Base, BaseError, EventArgs, runOn, delegateRemove, delegateCombine, fromEnum, typeCast, EnumUtil, Number_$type, String_$type, enumGetBox, markType, TypeRegistrar, fromEn } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType_$type } from "igniteui-react-core";
import { IDataSeriesAdapterRule_$type } from "igniteui-react-core";
import { SimpleFinancialPriceSeriesRule } from "igniteui-react-core";
import { SubCollectionsRule } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { FinancialChartVolumeType_$type } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode_$type } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode_$type } from "./FinancialChartYAxisMode";
import { FinancialChartType_$type } from "./FinancialChartType";
import { NumericYAxis } from "./NumericYAxis";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { FinancialChartZoomSliderType_$type } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-react-core";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { ObservableCollection$1 } from "igniteui-react-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartViewModel } from "./FinancialChartViewModel";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { AxisDefaults } from "./AxisDefaults";
import { Defaults } from "./Defaults";
import { BrushUtil } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { MarkerSeries } from "./MarkerSeries";
import { IZoomableCategoryAxis_$type } from "./IZoomableCategoryAxis";
import { SyncSettings } from "./SyncSettings";
import { SyncManager } from "./SyncManager";
import { FinancialOverlayType_$type } from "./FinancialOverlayType";
import { ArrayExtension } from "igniteui-react-core";
import { FinancialIndicatorType_$type } from "./FinancialIndicatorType";
import { IndicatorDisplayType_$type } from "./IndicatorDisplayType";
import { ITimeRangeSelectorAxis_$type } from "./ITimeRangeSelectorAxis";
import { FinancialChartVisualData } from "./FinancialChartVisualData";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { ScalerParams } from "./ScalerParams";
import { stringReplace, stringJoin, stringIsNullOrEmpty } from "igniteui-react-core";
import { timeSpanFromDays } from "igniteui-react-core";
import { dateMaxValue, dateMinValue } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType_$type } from "igniteui-react-core";
import { FinancialChartIndicatorMenuContext } from "./FinancialChartIndicatorMenuContext";
import { FinancialChartTypePickerContext } from "./FinancialChartTypePickerContext";
import { FinancialChartRangeSelectorContext } from "./FinancialChartRangeSelectorContext";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorView } from "./FinancialChartRangeSelectorView";
/**
 * @hidden
 */
export let FinancialChart = /*@__PURE__*/ (() => {
    class FinancialChart extends XYChart {
        t9(a, b, c) {
            super.t9(a, b, c);
            switch (a) {
                case "ToolbarTemplate":
                case "RangeSelectorTemplate":
                    this.afl = new FinancialChartToolbar(this, this.aj2);
                    break;
                case "Toolbar":
                    let d = b;
                    if (d != null) {
                        d.chartTypeChanged = delegateRemove(d.chartTypeChanged, runOn(this, this.amw));
                        d.trendLineTypeChanged = delegateRemove(d.trendLineTypeChanged, runOn(this, this.amz));
                        d.volumeTypeChanged = delegateRemove(d.volumeTypeChanged, runOn(this, this.am0));
                        d.l(null);
                    }
                    if (this.afl != null) {
                        this.afl.ac = this.afs;
                        this.afl.ai = this.d5;
                        this.afl.y = this.afn;
                        this.afl.al = this.ahl;
                        if (this.ai9 != null) {
                            this.afl.l(this.ai9);
                        }
                        let e = this.afl;
                        e.chartTypeChanged = delegateCombine(e.chartTypeChanged, runOn(this, this.amw));
                        ;
                        let f = this.afl;
                        f.trendLineTypeChanged = delegateCombine(f.trendLineTypeChanged, runOn(this, this.amz));
                        let g = this.afl;
                        g.volumeTypeChanged = delegateCombine(g.volumeTypeChanged, runOn(this, this.am0));
                    }
                    break;
                case "ChartType":
                    if (this.afl != null) {
                        this.afl.y = this.afn;
                    }
                    break;
                case "VolumeType":
                    if (this.afl != null) {
                        this.afl.ac = this.afs;
                    }
                    break;
                case "TrendLineType":
                    if (this.afl != null) {
                        this.afl.ai = this.d5;
                    }
                    break;
                case "IsToolbarVisible":
                    if (this.afl == null) {
                        break;
                    }
                    this.afl.al = this.ahl;
                    this.setGridRows();
                    break;
            }
        }
        am0(a, b) {
            this.afs = this.afl.ac;
        }
        amz(a, b) {
            this.d5 = this.afl.ai;
        }
        amw(a, b) {
            this.afn = this.afl.y;
        }
        am9() {
            this.age = new IndicatorPane();
            this.af5 = TypeRegistrar.create("FinancialLegend");
        }
        provideGrid(a) {
            this.ajc = a;
            this.anu();
            this.setGridRows();
            if (this.afl != null) {
                this.afl.bg(a);
            }
        }
        onDocumentClick(a) {
            if (this.afl != null) {
                this.afl.bl(a);
            }
        }
        getContext() {
            let a = this.afl.v();
            let b = new FinancialChartContext();
            b.vm = new FinancialChartViewModel();
            b.vm.toolbar = a;
            b.container = this.kz;
            b.toolbarContainer = this.ai9;
            b.legendContainer = this.ai8;
            b.indicatorsContainer = this.ai7;
            b.volumeContainer = this.aja;
            b.zoomContainer = this.ajb;
            return b;
        }
        provideContainer(a) {
            let b = a;
            if (b != null) {
                let c = "financialChartMainGrid";
                let d = b.createElement("div");
                d.setStyleProperty("width", "100%");
                d.setStyleProperty("height", "100%");
                if (this.afl == null) {
                    this.afl = new FinancialChartToolbar(this, this.aj2);
                }
                this.afl.w.isIndicatorMenuVisible = this.ahc && this.ahd;
                this.ai9 = b.getSubRenderer(d);
                this.afl.l(this.ai9);
                let e = b.createElement("div");
                e.setStyleProperty("width", "100%");
                e.setStyleProperty("height", "100%");
                let f = b.createElement("div");
                f.setStyleProperty("width", "100%");
                f.setStyleProperty("height", "100%");
                this.ai8 = b.getSubRenderer(f);
                let g = b.createElement("div");
                g.setStyleProperty("width", "100%");
                g.setStyleProperty("height", "100%");
                this.ai7 = b.getSubRenderer(g);
                let h = b.createElement("div");
                h.setStyleProperty("width", "100%");
                h.setStyleProperty("height", "100%");
                this.aja = b.getSubRenderer(h);
                let i = b.createElement("div");
                i.setStyleProperty("width", "100%");
                i.setStyleProperty("height", "100%");
                this.ajb = b.getSubRenderer(i);
                a = b.getSubRenderer(e);
            }
            else {
                this.ai9 = null;
                if (this.afl != null) {
                    this.afl.l(null);
                }
                if (this.ag3 != null) {
                    this.ag3.provideContainer(null);
                    this.ag3 = null;
                }
                if (this.af5 != null) {
                    this.af5.provideContainer(null);
                }
            }
            super.provideContainer(a);
            if (b != null) {
                if (this.volumeChart != null) {
                    this.volumeChart.provideContainer(this.aja);
                }
                if (this.age != null) {
                    this.age.h(this.ai7);
                }
                if (this.zoomSliderChart != null) {
                    this.zoomSliderChart.provideContainer(this.ajb);
                    if (a != null) {
                        this.amg();
                    }
                    else {
                        this.ag3 = null;
                    }
                }
                if (this.af5 != null) {
                    this.af5.provideContainer(this.ai8);
                }
                this.setGridRows();
            }
        }
        ank(a, b, c) {
            if (a != null) {
                a.provideContainer(null);
            }
            if (b != null) {
                b.provideContainer(c);
            }
            this.setGridRows();
        }
        any(a, b) {
            this.ank(a, b, this.ajb);
            if (b == null) {
                return;
            }
            this.amg();
        }
        amg() {
            if (this.ajb == null) {
                return;
            }
            if (this.ag3 != null) {
                this.ag3.provideContainer(null);
            }
            this.ag3 = TypeRegistrar.create("ZoomSlider");
            this.ag3.provideContainer(this.ajb);
            let a = this.ag3;
            a.windowRectChanged = delegateCombine(a.windowRectChanged, (a, b) => {
                if (this.dataChart != null) {
                    this.dataChart.vx = new Rect(0, this.ag3.windowRect.left, this.dataChart.vh.top, this.ag3.windowRect.width, this.dataChart.vh.height);
                }
            });
            this.amh();
        }
        anw(a, b) {
            this.ank(a, b, this.aja);
        }
        setGridRows() {
            if (this.ajc == null) {
                return;
            }
            let a = new Array(6);
            a[0] = (this.ahl ? this.ait : 0) + "px";
            a[1] = this.ahh ? "min-content" : "0px";
            a[2] = "auto";
            a[3] = this.indicatorCharts == null || this.indicatorCharts.count == 0 ? "0px" : this.indicatorCharts.count * 150 + "px";
            a[4] = this.volumeChart == null ? "0px" : "100px";
            a[5] = this.zoomSliderChart == null ? "0px" : "100px";
            if (this.ag3 != null) {
                if (a[5] == "0px") {
                    this.ag3.hide();
                }
                else {
                    this.ag3.show();
                }
            }
            this.ajc.setStyleProperty("-ms-grid-rows", stringReplace(stringJoin(" ", ...a), "auto", "1fr"));
            this.ajc.setStyleProperty("grid-template-rows", stringJoin(" ", ...a));
            if (this.kz == null) {
                return;
            }
            if (this.dataChart != null) {
                this.dataChart.notifyContainerResized();
            }
            if (this.age != null) {
                this.age.f();
            }
            if (this.volumeChart != null) {
                this.volumeChart.notifyContainerResized();
            }
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.notifyContainerResized();
            }
            if (this.ag3 != null) {
                this.ag3.notifySizeChanged();
            }
        }
        ti() {
            super.ti();
            this.x0 = 1;
            this.adf = 0;
            this.zx = 0;
            this.ad9 = null;
            this.ad2 = AxisDefaults.g;
            this.zh = AxisDefaults.e;
            this.zg = AxisDefaults.f;
            this.ad3 = AxisDefaults.j;
            this.adz = null;
            this.an0 = AxisDefaults.h;
            this.ai6 = AxisDefaults.b;
            this.gk = true;
            this.gc = true;
            this.gd = false;
            this.bd = 0;
            this.i2 = Defaults.j;
            this.v3 = Defaults.ae;
            this.vy = Defaults.af;
            this.vz = Defaults.ag;
            this.jm = NaN;
            this.je = 40;
            this.gt = true;
            this.g0 = false;
            if (this.dataChart != null) {
                let a = this.dataChart.c8.j.e();
                this.aew = a.d;
                this.aex = a.e;
                this.aev = a.d;
                this.an0 = this.dataChart.z2;
            }
            let b = new BrushCollection();
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#8BDC5C";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#8961A9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#6DB1FF";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#82E9D9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#EA3C63";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#735656";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#F8CE4F";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#A8A8B7";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#E051A9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#FF903B";
                return $ret;
            })()));
            let c = new BrushCollection();
            for (let d of fromEnum(b)) {
                c.add(BrushUtil.n(d, 0.3));
            }
            this.aey = c;
            this.aez = b;
        }
        ang() {
            if (this.age != null) {
                this.age.b = null;
                this.age.b = this.indicatorCharts;
            }
            this.setGridRows();
        }
        anh() {
            this.setGridRows();
        }
        anq() {
            this.ang();
        }
        amf() {
            if (this.ag3 == null || this.zoomSliderChart == null || this.dataChart == null || this.dataChart.series.count == 0) {
                return;
            }
            let a = this.kz.rootWrapper.width();
            let b = this.dataChart.vw.left + this.dataChart.vw.width;
            let c = this.dataChart.vw.left;
            let d = a - b;
            this.ag3.startInset = c - this.ag3.trackStartInset;
            this.ag3.endInset = d - this.ag3.trackEndInset;
            if (this.ag3.endInset < 0) {
                let e = this.ag3.endInset;
                this.ag3.endInset = 0;
                this.dataChart.hy += (e * -1);
            }
            if (this.ag3.startInset < 0) {
                let f = this.ag3.startInset;
                this.ag3.startInset = 0;
                this.dataChart.ht += (f * -1);
            }
            this.zoomSliderChart.ht = c;
            this.zoomSliderChart.hy = d;
            this.zoomSliderChart.hg = this.ag3.barExtent;
        }
        am6() {
            this.amf();
        }
        tf(a) {
            super.tf(a);
            if (a != null) {
                a.hf = 0;
            }
        }
        an1(a) {
            return a.va();
        }
        an4() {
            return this.ai8 == null ? null : this.an3(this.ai8.rootWrapper);
        }
        an2(a) {
            if (a == null || a.d == null) {
                return null;
            }
            return this.an3(a.d.rootWrapper);
        }
        an3(a) {
            if (a == null) {
                return null;
            }
            let b = a.getOffset();
            return new Rect(0, b.left, b.top, a.width(), a.height());
        }
        aio() {
            if (this.ajc == null) {
                return NaN;
            }
            let a = this.ajc.getOffset();
            return this.ajc.width() + (a == null ? 0 : a.left);
        }
        tr(source_, a, b) {
            super.tr(source_, a, b);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.ny(source_, a, b);
            }
        }
        ts(source_, a, b) {
            super.ts(source_, a, b);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.nz(source_, a, b);
            }
        }
        tq(source_) {
            super.tq(source_);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.nr(source_);
            }
        }
        tu(source_, a, b, c) {
            super.tu(source_, a, b, c);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.n0(source_, a, b, c);
            }
        }
        tl(a, b) {
            super.tl(a, b);
            if (this.ahi(a)) {
                a.toolTip = null;
            }
        }
        get afl() {
            return this.afk;
        }
        set afl(a) {
            let b = this.afl;
            if (a != b) {
                this.afk = a;
                this.t5("Toolbar", b, this.afl);
            }
        }
        get aj1() {
            return this.aju;
        }
        set aj1(a) {
            let b = this.aj1;
            if (a != b) {
                this.aju = a;
                this.t5("RangeSelectorTemplate", b, this.aj1);
            }
        }
        get aj2() {
            return this.ajv;
        }
        set aj2(a) {
            let b = this.aj2;
            if (a != b) {
                this.ajv = a;
                this.t5("ToolbarTemplate", b, this.aj2);
            }
        }
        get ajy() {
            return this.ajr;
        }
        set ajy(a) {
            let b = this.ajy;
            if (a != b) {
                this.ajr = a;
                this.t5("ChartTypePickerTemplate", b, this.ajy);
            }
        }
        get aj3() {
            return this.ajw;
        }
        set aj3(a) {
            let b = this.aj3;
            if (a != b) {
                this.ajw = a;
                this.t5("TrendLineTypePickerTemplate", b, this.aj3);
            }
        }
        get aj4() {
            return this.ajx;
        }
        set aj4(a) {
            let b = this.aj4;
            if (a != b) {
                this.ajx = a;
                this.t5("VolumeTypePickerTemplate", b, this.aj4);
            }
        }
        get ajz() {
            return this.ajs;
        }
        set ajz(a) {
            let b = this.ajz;
            if (a != b) {
                this.ajs = a;
                this.t5("IndicatorMenuTemplate", b, this.ajz);
            }
        }
        get aj0() {
            return this.ajt;
        }
        set aj0(a) {
            let b = this.aj0;
            if (a != b) {
                this.ajt = a;
                this.t5("OverlayPickerTemplate", b, this.aj0);
            }
        }
        get ag3() {
            return this.ag2;
        }
        set ag3(a) {
            let b = this.ag3;
            if (a != b) {
                this.ag2 = a;
                this.t5("ZoomSlider", b, this.ag3);
            }
        }
        get_je() {
            return super.get_je();
        }
        set_je(a) {
            super.set_je(a);
        }
        get_gt() {
            return super.get_gt();
        }
        set_gt(a) {
            super.set_gt(a);
        }
        get ait() {
            return this.aic;
        }
        set ait(a) {
            let b = this.ait;
            if (a != b) {
                this.aic = a;
                this.t5("ToolbarHeight", b, this.ait);
            }
        }
        constructor() {
            super();
            this.age = null;
            this.ajc = null;
            this.aja = null;
            this.ai7 = null;
            this.ai9 = null;
            this.ajb = null;
            this.ai8 = null;
            this.afk = null;
            this.aju = null;
            this.ajv = null;
            this.ajr = null;
            this.ajw = null;
            this.ajx = null;
            this.ajs = null;
            this.ajt = null;
            this.ag2 = null;
            this.aic = 40;
            this.af8 = null;
            this.af6 = null;
            this.aga = null;
            this.agf = null;
            this.aj5 = null;
            this.agy = null;
            this.aho = false;
            this.ahn = false;
            this.ahv = false;
            this.aha = false;
            this.aji = 10;
            this.aij = NaN;
            this.ail = NaN;
            this.aik = NaN;
            this.aim = 0;
            this.afq = 0;
            this.aft = 0;
            this.aie = 3;
            this.aih = NaN;
            this.aif = NaN;
            this.aig = NaN;
            this.aii = NaN;
            this.afv = 0;
            this.ag5 = true;
            this.afm = 0;
            this.ag6 = false;
            this.af0 = null;
            this.af2 = null;
            this.ahx = null;
            this.ag8 = true;
            this.ag7 = false;
            this.ag9 = false;
            this.agz = null;
            this.afx = 1;
            this.aeo = null;
            this.aep = null;
            this.aeq = null;
            this.aer = null;
            this.aet = null;
            this.aes = null;
            this.aen = null;
            this.aem = null;
            this.aid = 1;
            this.aib = 1;
            this.aia = 2;
            this.ah9 = 1;
            this.agc = null;
            this.aje = -2147483648;
            this.ah8 = 2;
            this.ajh = 3;
            this.ajf = 10;
            this.ajd = 30;
            this.ajg = 9;
            this.afh = null;
            this.afi = null;
            this.afd = null;
            this.applyCustomIndicators = null;
            this.anz = null;
            this.ain = 1;
            this.ag4 = false;
            this.af4 = null;
            this.ah5 = dateMinValue();
            this.ah4 = dateMaxValue();
            this.ah2 = null;
            this.s0();
            this.ah2 = new ObservableCollection$1(Base.$, 0);
            if (this.xAxisBreaks != null) {
                let a = this.xAxisBreaks;
                a.collectionChanged = delegateCombine(a.collectionChanged, (a, b) => this.ano());
            }
            this.am9();
        }
        xp() {
            return this.xAxis;
        }
        xq() {
            return this.yAxis;
        }
        onAttachedToUI() {
            super.onAttachedToUI();
            if (this.ag3 != null) {
                this.ag3.onAttachedToUI();
            }
        }
        onDetachedFromUI() {
            super.onDetachedFromUI();
            if (this.ag3 != null) {
                this.ag3.onDetachedFromUI();
            }
        }
        bg(a) {
            return 20;
        }
        get_hi() {
            return ((() => {
                let $ret = new List$1(DataSeriesType_$type, 0);
                $ret.add(20);
                return $ret;
            })());
        }
        get hi() {
            return this.get_hi();
        }
        get_hh() {
            return ((() => {
                let $ret = new List$1(IDataSeriesAdapterRule_$type, 0);
                $ret.add(new SimpleFinancialPriceSeriesRule());
                $ret.add(new SubCollectionsRule());
                return $ret;
            })());
        }
        get hh() {
            return this.get_hh();
        }
        ae7(a) {
            return this.ae8(a);
        }
        agl(a) {
            return this.agm(a);
        }
        ae6(a) {
            let b = this.ae7(0);
            b.name = a;
            return b;
        }
        sw() {
            this.xAxis = this.ae6("xAxis");
            this.yAxis = this.agl(0);
            this.yAxis.name = "yAxis";
            this.volumeAxis = this.agl(0);
            this.volumeAxis.name = "volumeAxis";
            this.volumeXAxis = this.ae6("volumeXAxis");
            this.ahz = new List$1(NumericYAxis.$, 0);
            this.ah1 = new List$1(CategoryAxisBase.$, 0);
            this.indicatorAxis = this.agl(0);
            this.indicatorAxis.name = "indicatorAxis";
            this.indicatorXAxis = this.ae6("indicatorXAxis_0");
            this.ahz.add(this.indicatorAxis);
            this.ah1.add(this.indicatorXAxis);
            if (this.xAxis.az == null) {
                this.xAxis.az = new AxisLabelSettings();
            }
            if (this.yAxis.az == null) {
                this.yAxis.az = new AxisLabelSettings();
            }
            if (this.volumeAxis.az == null) {
                this.volumeAxis.az = new AxisLabelSettings();
            }
            if (this.volumeXAxis.az == null) {
                this.volumeAxis.az = new AxisLabelSettings();
            }
            if (this.indicatorAxis.az == null) {
                this.indicatorAxis.az = new AxisLabelSettings();
            }
            if (this.indicatorXAxis.az == null) {
                this.indicatorXAxis.az = new AxisLabelSettings();
            }
            this.zoomSliderAxis = this.agl(0);
            this.zoomSliderAxis.name = "zoomSliderAxis";
            this.zoomSliderXAxis = this.ae6("zoomSliderXAxis");
            if (this.zoomSliderAxis.az == null) {
                this.zoomSliderAxis.az = new AxisLabelSettings();
            }
            if (this.zoomSliderXAxis.az == null) {
                this.zoomSliderXAxis.az = new AxisLabelSettings();
            }
        }
        ss(a, b) {
            let c = typeCast(MarkerSeries.$, a);
            if (c != null) {
                c.vp = this.cw(a, b);
            }
        }
        cv(a) {
            if (a != null) {
                return 1;
            }
            return super.cv(a);
        }
        ur(a) {
            if (a.suggestedSecondaryAxis == 2) {
                this.yAxis.li = true;
                this.yAxis.l9 = 10;
            }
        }
        uu() {
            this.yAxis.li = this.ahs;
            this.yAxis.l9 = this.ajq;
        }
        afp(a) {
            let b;
            if (this.afn == 0) {
                if (a == null || a.index > 0 || stringIsNullOrEmpty(a.getMemberPathFor(12))) {
                    b = 4;
                }
                else {
                    b = 2;
                }
            }
            else {
                b = this.afn;
            }
            b = this.afo(b);
            return b;
        }
        afo(a) {
            if ((a == 1 || a == 2)) {
                if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                    return a;
                }
                a = 4;
            }
            if (a == 4) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 3;
            }
            if (a == 3) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        afy(a) {
            if ((a == 2 || a == 3)) {
                if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                    return a;
                }
                a = 5;
            }
            if (a == 5) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 6;
            }
            if (a == 6) {
                if (TypeRegistrar.isRegistered("AreaSeries")) {
                    return a;
                }
                a = 4;
            }
            if (a == 4) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        afr(a) {
            if (a == 2) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 3;
            }
            if (a == 3) {
                if (TypeRegistrar.isRegistered("AreaSeries")) {
                    return a;
                }
                a = 1;
            }
            if (a == 1) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        akd(a) {
            let b = a.getMemberPathFor(14);
            if (stringIsNullOrEmpty(b)) {
                b = a.getMemberPathFor(11);
            }
            return b;
        }
        ae8(axisType_) {
            if ((this.externalObject)) {
                return (this.externalObject.createXAxis(axisType_).i);
            }
            else {
                let a;
                switch (axisType_) {
                    case 0:
                        if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                            a = TypeRegistrar.create("OrdinalTimeXAxis");
                        }
                        else if (TypeRegistrar.isRegistered("TimeXAxis")) {
                            a = TypeRegistrar.create("TimeXAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                    case 1:
                        if (TypeRegistrar.isRegistered("TimeXAxis")) {
                            a = TypeRegistrar.create("TimeXAxis");
                        }
                        else if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                            a = TypeRegistrar.create("OrdinalTimeXAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                }
                return null;
            }
        }
        agm(axisType_) {
            if ((this.externalObject)) {
                return (this.externalObject.createYAxis(axisType_).i);
            }
            else {
                let a;
                switch (axisType_) {
                    case 0:
                        if (TypeRegistrar.isRegistered("NumericYAxis")) {
                            a = TypeRegistrar.create("NumericYAxis");
                        }
                        else if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                            a = TypeRegistrar.create("PercentChangeYAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                    case 1:
                        if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                            a = TypeRegistrar.create("PercentChangeYAxis");
                        }
                        else if (TypeRegistrar.isRegistered("NumericYAxis")) {
                            a = TypeRegistrar.create("NumericYAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                }
                return null;
            }
        }
        ags() {
            return this.c8(1);
        }
        agt() {
            return this.c8(0);
        }
        agr() {
            return this.c8(2);
        }
        agu() {
            return this.c8(20);
        }
        get ahb() {
            return (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy"));
        }
        get af9() {
            if (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy")) {
                return TypeRegistrar.create("HorizontalAnchoredCategorySeriesProxy");
            }
            else {
                throw new BaseError(1, "horizontal series module is not loaded, but is required.");
            }
        }
        get ahe() {
            return (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy"));
        }
        get af7() {
            if (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy")) {
                return TypeRegistrar.create("FinancialPriceSeriesProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        }
        get ahc() {
            return (TypeRegistrar.isRegistered("IndicatorProxy"));
        }
        get agb() {
            if (TypeRegistrar.isRegistered("IndicatorProxy")) {
                return TypeRegistrar.create("IndicatorProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        }
        get ahd() {
            return (TypeRegistrar.isRegistered("OverlayProxy"));
        }
        get agg() {
            if (TypeRegistrar.isRegistered("OverlayProxy")) {
                return TypeRegistrar.create("OverlayProxy");
            }
            else {
                throw new BaseError(1, "overlay series module is not loaded, but is required.");
            }
        }
        c6(a, b) {
            let c = this.akd(a);
            switch (this.afp(a)) {
                case 3:
                    let d = this.ags();
                    this.af9.setValueMemberPath(d, c);
                    this.af9.setXAxis(d, this.xAxis);
                    this.af9.setYAxis(d, this.yAxis);
                    this.af9.setCategoryMode(d, 1);
                    return d;
                case 4:
                    let e = this.agt();
                    this.af9.setValueMemberPath(e, c);
                    this.af9.setXAxis(e, this.xAxis);
                    this.af9.setYAxis(e, this.yAxis);
                    this.af9.setCategoryMode(e, 1);
                    return e;
                default:
                case 1:
                case 2:
                    let f = this.agu();
                    this.af7.setOpenMemberPath(f, a.getMemberPathFor(11));
                    this.af7.setHighMemberPath(f, a.getMemberPathFor(12));
                    this.af7.setLowMemberPath(f, a.getMemberPathFor(13));
                    this.af7.setCloseMemberPath(f, a.getMemberPathFor(14));
                    this.af7.setVolumeMemberPath(f, a.getMemberPathFor(15));
                    this.af7.setXAxis(f, this.xAxis);
                    this.af7.setYAxis(f, this.yAxis);
                    this.af7.setDisplayType(f, this.afn == 1 ? 1 : 0);
                    this.af7.setCategoryMode(f, 1);
                    return f;
            }
        }
        ut() {
            super.ut();
            this.am4(this.xAxis);
            this.ans(false);
            if (this.afs != 0 && this.volumeChart != null) {
                this.anb();
            }
            this.am4(this.volumeXAxis);
            this.am4(this.indicatorXAxis);
            this.anp();
            this.anr();
            if (this.afz != 0) {
                this.anc();
                this.am4(this.zoomSliderXAxis);
            }
        }
        ac1(a, b) {
            super.ac1(a, b);
            a(this.volumeXAxis);
            if (this.ah1 != null) {
                for (let c of fromEnum(this.ah1)) {
                    a(c);
                }
            }
            let d = true;
            switch (b) {
                case "XAxisMajorStroke":
                case "XAxisMajorStrokeThickness":
                    d = false;
                    break;
            }
            if (d) {
                a(this.zoomSliderXAxis);
            }
        }
        ac6(a, b) {
            super.ac6(a, b);
            if (b) {
                a(this.volumeAxis);
                if (this.ahz != null) {
                    for (let c of fromEnum(this.ahz)) {
                        a(c);
                    }
                }
                a(this.zoomSliderAxis);
            }
        }
        am8(a) {
            let b = typeCast(IZoomableCategoryAxis_$type, this.xAxis);
            if (b != null) {
                a(b);
            }
        }
        ac4(a) {
            super.ac4(a);
            this.acv(this.volumeXAxis, a);
            this.acv(this.indicatorXAxis, a);
            this.acv(this.zoomSliderXAxis, a);
        }
        ac9(a) {
            super.ac9(a);
            this.acv(this.volumeAxis, a);
            this.acv(this.indicatorAxis, a);
            this.acv(this.zoomSliderAxis, a);
        }
        ac7(a) {
            super.ac7(a);
            this.acu(this.volumeAxis, a);
            this.acu(this.indicatorAxis, a);
            this.acu(this.zoomSliderAxis, a);
        }
        ac2(a) {
            super.ac2(a);
            this.acu(this.volumeXAxis, a);
            this.acu(this.indicatorXAxis, a);
            this.acu(this.zoomSliderXAxis, a);
        }
        te(a) {
            super.te(a);
            if (a == null) {
                return;
            }
            if (a == this.zoomSliderChart) {
                a.ws = a.wv = false;
                a.legend = null;
                if (this.dataChart != null) {
                    a.ag = this.dataChart.ag;
                    a.aj = this.dataChart.aj;
                }
            }
            else {
                SyncManager.d(a, ((() => {
                    let $ret = new SyncSettings();
                    $ret.syncChannel = this.ak8();
                    $ret.synchronizeHorizontally = true;
                    $ret.synchronizeVertically = false;
                    return $ret;
                })()));
                SyncManager.c(a);
            }
            a.cw = 2;
        }
        ak8() {
            if (this.aj5 == null) {
                FinancialChart.ajp++;
                this.aj5 = FinancialChart.ajp.toString();
            }
            return this.aj5;
        }
        amq(a, b) {
            this.amc();
            this.am6();
        }
        amc() {
            if (this.yAxis.b8()) {
                return;
            }
            let a = this.yAxis.aw.bd;
            if (this.afs != 0) {
                a = Math.max(a, this.volumeAxis.aw.bd);
            }
            for (let b of fromEnum(this.ahz)) {
                a = Math.max(a, b.aw.bd);
            }
            this.amd(a);
        }
        amd(a) {
            if (this.yAxis.b8()) {
                return;
            }
            this.yAxis.es = this.volumeAxis.es = a;
            for (let b of fromEnum(this.ahz)) {
                b.es = a;
            }
            this.zoomSliderAxis.es = this.yAxis.es;
        }
        ami(a) {
            if (this.indicatorCharts == null) {
                return;
            }
            for (let b = 0; b < this.indicatorCharts.count; b++) {
                let c = this.indicatorCharts._inner[b];
                for (let d = 0; d < c.series.count; d++) {
                    let e = c.series._inner[d];
                    if (!(this.ahg(e))) {
                        continue;
                    }
                    a(c.series._inner[d], b);
                }
            }
        }
        aml(a) {
            if (this.volumeChart == null) {
                return;
            }
            for (let b = 0; b < this.volumeChart.series.count; b++) {
                let c = this.volumeChart.series._inner[b];
                if (c.ed) {
                    continue;
                }
                a(this.volumeChart.series._inner[b], b);
            }
        }
        amj(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (!this.ahi(c)) {
                    continue;
                }
                a(c, b);
            }
        }
        amk(a, b) {
            if (this.dataChart == null) {
                return;
            }
            for (let c = 0; c < this.dataChart.series.count; c++) {
                let d = this.dataChart.series._inner[c];
                if (this.ahi(d)) {
                    continue;
                }
                let e = this.ajj(d, c);
                a(d, e);
            }
            if (b) {
                this.amm(a);
            }
        }
        amm(a) {
            if (this.zoomSliderChart == null) {
                return;
            }
            for (let b = 0; b < this.zoomSliderChart.series.count; b++) {
                let c = this.zoomSliderChart.series._inner[b];
                if (c.ed) {
                    continue;
                }
                a(this.zoomSliderChart.series._inner[b], b);
            }
        }
        ajj(a, b) {
            if (a.cz != this.dataChart) {
                return b;
            }
            let c = this.bh == null || this.bh.dataSeries == null ? 0 : this.bh.dataSeries.count;
            let d = this.af3 == null ? 0 : this.af3.count;
            return b - (c * d);
        }
        s4(a) {
            super.s4(a);
            this.aml(a);
            this.ami(a);
            this.amm(a);
        }
        get volumeChart() {
            return this.agy;
        }
        set volumeChart(a) {
            let b = this.volumeChart;
            if (a != b) {
                this.agy = a;
                this.t5("VolumeChart", b, this.volumeChart);
            }
        }
        anb() {
            if (this.dataChart == null) {
                return;
            }
            this.volumeChart.series.clear();
            let a = new List$1(Series.$, 0);
            let b = -1;
            for (let c = 0; c < this.dataChart.series.count; c++) {
                let d = this.dataChart.series._inner[c];
                if (this.ahi(d) || d.ed) {
                    continue;
                }
                b++;
                let e;
                let f = this.afs;
                f = this.afr(f);
                switch (f) {
                    case 2:
                        e = this.agt();
                        break;
                    case 3:
                        e = this.agr();
                        break;
                    default:
                    case 1:
                        e = this.ags();
                        break;
                }
                this.af9.setCategoryMode(e, 1);
                e.name = "volumeSeries_" + b;
                e.itemsSource = d.itemsSource;
                this.af9.setXAxis(e, this.volumeXAxis);
                this.af9.setYAxis(e, this.volumeAxis);
                this.af9.setValueMemberPath(e, this.bh != null && this.bh.dataSeries != null && this.bh.dataSeries.count > b ? this.bh.dataSeries._inner[b].getMemberPathFor(15) : null);
                e.title = d.title + " Volume";
                e.t2 = ArrayExtension.getModulus$1(Brush.$, this.ae0, b);
                e.ud = ArrayExtension.getModulus$1(Brush.$, this.ae1, b);
                e.i5 = this.aiu;
                a.add(e);
            }
            let g = this.he("volume", false);
            if (g != null) {
                a.o(g);
            }
            for (let h = 0; h < a.count; h++) {
                let i = a._inner[h];
                this.volumeChart.series.add(i);
                this.tj(i, h);
            }
        }
        ahf(a) {
            if (!this.ahb) {
                return false;
            }
            return this.af9.matchesType(a);
        }
        ahj(a) {
            if (!this.ahe) {
                return false;
            }
            return this.af7.matchesType(a);
        }
        ahg(a) {
            if (!this.ahc) {
                return false;
            }
            return this.agb.matchesType(a);
        }
        ahi(a) {
            if (!this.ahd) {
                return false;
            }
            return this.agg.matchesType(a);
        }
        ana() {
            if (this.dataChart == null) {
                return;
            }
            let a = 0;
            let b = this.af1 == null ? 0 : this.af1.count;
            let c = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
            let d = b + c;
            for (let e = 0; e < d; e++) {
                let f = new List$1(Series.$, 0);
                let g = this.indicatorCharts._inner[e];
                let h = e >= b;
                let i = h ? this.customIndicatorNames._inner[e - b] : EnumUtil.getName(FinancialIndicatorType_$type, this.af1._inner[e]);
                let j = -1;
                for (let k = 0; k < this.dataChart.series.count; k++) {
                    let l = this.dataChart.series._inner[k];
                    if (this.ahi(l) || l.ed) {
                        continue;
                    }
                    j++;
                    let m;
                    if (h) {
                        let n = this.agv("Custom");
                        this.agb.handleCustomIndicatorEvent(n, runOn(this, this.amo));
                        m = n;
                    }
                    else {
                        m = this.agx(this.af1._inner[e]);
                    }
                    if (m == null) {
                        continue;
                    }
                    m.name = "indicator_" + a++;
                    this.agb.setXAxis(m, this.ah1._inner[e]);
                    this.agb.setYAxis(m, this.ahz._inner[e]);
                    m.itemsSource = l.itemsSource;
                    this.agb.setOpenMemberPath(m, this.bh.dataSeries._inner[j].getMemberPathFor(11));
                    this.agb.setHighMemberPath(m, this.bh.dataSeries._inner[j].getMemberPathFor(12));
                    this.agb.setLowMemberPath(m, this.bh.dataSeries._inner[j].getMemberPathFor(13));
                    this.agb.setCloseMemberPath(m, this.bh.dataSeries._inner[j].getMemberPathFor(14));
                    this.agb.setVolumeMemberPath(m, this.bh.dataSeries._inner[j].getMemberPathFor(15));
                    m.title = l.title + " " + i;
                    m.t2 = ArrayExtension.getModulus$1(Brush.$, this.aeu, e);
                    m.i5 = this.aiq;
                    if (this.ahg(m)) {
                        this.agb.setNegativeBrush(m, ArrayExtension.getModulus$1(Brush.$, this.aev, e));
                        this.agb.setDisplayType(m, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.agd, e));
                    }
                    if (this.ajl != -2147483648 && this.ahg(m)) {
                        this.agb.setPeriodOverride(m, this.ajl);
                    }
                    if (this.ahg(m)) {
                        this.agb.setSmoothingPeriod(m, this.ajo);
                    }
                    if (this.ahg(m)) {
                        this.agb.setSignalPeriod(m, this.ajn);
                    }
                    if (this.ahg(m)) {
                        this.agb.setShortPeriod(m, this.ajm);
                        this.agb.setLongPeriod(m, this.ajk);
                    }
                    this.tj(m, e);
                    f.add(m);
                }
                let o = this.he(i, false);
                for (let p = 0; p < f.count; p++) {
                    let q = f._inner[p];
                    g.series.add(q);
                }
                if (o != null) {
                    for (let r = 0; r < o.count; r++) {
                        let s = o._inner[r];
                        g.series.add(s);
                        this.tj(s, r);
                    }
                }
            }
        }
        agv(indicatorName_) {
            return (this.externalObject.createIndicator(indicatorName_ + 'Indicator').i);
        }
        agx(a) {
            return this.agv(EnumUtil.getName(FinancialIndicatorType_$type, a));
        }
        ans(a) {
            if (this.afl == null) {
                return;
            }
            let b = this.xAxis;
            if (b.actualMinimumValue > b.actualMaximumValue) {
                return;
            }
            this.afl.as = b.actualMinimumValue;
            this.afl.ar = b.actualMaximumValue;
            if (a) {
                this.afl.au = b.visibleMinimum;
                this.afl.at = b.visibleMaximum;
            }
            this.afl.bn();
        }
        k0() {
            let a = ((() => {
                let $ret = new FinancialChartVisualData();
                $ret.mainChart = super.k0();
                $ret.volumeChart = this.volumeChart == null ? null : this.volumeChart.x4();
                $ret.toolbar = this.afl == null ? null : this.afl.aj();
                $ret.zoomChart = this.zoomSliderChart == null ? null : this.zoomSliderChart.x4();
                return $ret;
            })());
            if (this.indicatorCharts != null) {
                a.indicatorCharts = new List$1(Base.$, 0);
                for (let b of fromEnum(this.indicatorCharts)) {
                    a.indicatorCharts.add1(b.x4());
                }
            }
            if (this.dataChart != null) {
                a.mainChartLeft = this.an1(this.dataChart).x;
                a.mainChartTop = this.an1(this.dataChart).y;
            }
            if (this.volumeChart != null) {
                a.volumeChartLeft = this.an1(this.volumeChart).x;
                a.volumeChartTop = this.an1(this.volumeChart).y;
            }
            if (this.zoomSliderChart != null) {
                a.zoomChartLeft = this.an1(this.zoomSliderChart).x;
                a.zoomChartTop = this.an1(this.zoomSliderChart).y;
            }
            if (this.afl != null) {
                let c = this.an2(this.afl);
                a.toolbarLeft = c.left;
                a.toolbarTop = c.top;
                a.toolbarWidth = c.width;
                a.toolbarHeight = c.height;
            }
            if (this.indicatorCharts != null) {
                a.indicatorChartLefts = new List$1(Number_$type, 0);
                a.indicatorChartTops = new List$1(Number_$type, 0);
                for (let d of fromEnum(this.indicatorCharts)) {
                    a.indicatorChartLefts.add(this.an1(d).x);
                    a.indicatorChartTops.add(this.an1(d).y);
                }
            }
            let e = this.an4();
            a.legendLeft = e.left;
            a.legendTop = e.top;
            a.legendWidth = e.width;
            a.legendHeight = e.height;
            a.legend = this.af5 == null ? null : this.af5.exportVisualData();
            return a;
        }
        aka() {
            let a = this.k0();
            a.scaleByViewport();
            return a.serialize();
        }
        agw(overlayName_) {
            return (this.externalObject.createOverlay(overlayName_ + 'Overlay').i);
        }
        anr() {
            if (this.dataChart == null) {
                return;
            }
            let a = new List$1(Series.$, 0);
            for (let b of fromEnum(this.dataChart.series)) {
                if (this.ahi(b)) {
                    a.add(b);
                }
            }
            for (let c of fromEnum(a)) {
                this.dataChart.series.remove(c);
            }
            if (this.af3 == null) {
                return;
            }
            let d = new List$1(Series.$, 0);
            let e = -1;
            for (let f = 0; f < this.dataChart.series.count; f++) {
                let g = this.dataChart.series._inner[f];
                if (this.ahi(g) || g.ed) {
                    continue;
                }
                e++;
                for (let h = 0; h < this.af3.count; h++) {
                    let i = this.af3._inner[h];
                    let j;
                    switch (i) {
                        case 1:
                            j = this.agw(EnumUtil.getName(FinancialOverlayType_$type, i));
                            break;
                        default:
                        case 0:
                            j = this.agw(EnumUtil.getName(FinancialOverlayType_$type, i));
                            break;
                    }
                    j.name = g.name + "_" + EnumUtil.getName(FinancialOverlayType_$type, i);
                    this.agg.setXAxis(j, this.xAxis);
                    this.agg.setYAxis(j, this.yAxis);
                    j.itemsSource = g.itemsSource;
                    let k = e * this.af3.count + h;
                    j.t2 = ArrayExtension.getModulus$1(Brush.$, this.aey, k);
                    j.ud = ArrayExtension.getModulus$1(Brush.$, this.aez, k);
                    j.i5 = this.ais;
                    j.title = g.title + " " + EnumUtil.getName(FinancialOverlayType_$type, i);
                    let l = g;
                    if (l == null) {
                        continue;
                    }
                    let m = this.bh.dataSeries._inner[e];
                    this.agg.setOpenMemberPath(j, m.getMemberPathFor(11));
                    this.agg.setHighMemberPath(j, m.getMemberPathFor(12));
                    this.agg.setLowMemberPath(j, m.getMemberPathFor(13));
                    this.agg.setCloseMemberPath(j, m.getMemberPathFor(14));
                    this.agg.setVolumeMemberPath(j, m.getMemberPathFor(15));
                    d.add(j);
                }
            }
            let n = new Array(this.dataChart.series.count);
            this.dataChart.series.copyTo(n, 0);
            this.dataChart.skipDataCleanup = true;
            this.dataChart.series.clear();
            this.dataChart.skipDataCleanup = false;
            for (let o = 0; o < n.length; o++) {
                n[o].index = -1;
            }
            d.o(n);
            for (let p = 0; p < d.count; p++) {
                let q = d._inner[p];
                this.dataChart.series.add(q);
                this.tj(q, p);
            }
        }
        anp() {
            if (this.aho) {
                return;
            }
            this.aho = true;
            if (this.indicatorCharts != null) {
                let a = this.indicatorCharts;
                this.indicatorCharts = null;
                for (let b of fromEnum(a)) {
                    this.am5(b);
                }
            }
            if ((this.af1 == null || this.af1.count == 0) && (this.customIndicatorNames == null || this.customIndicatorNames.count == 0)) {
                this.indicatorCharts = null;
                if (this.ahz != null) {
                    this.ahz.clear();
                }
                if (this.ah1 != null) {
                    this.ah1.clear();
                }
                this.ang();
                this.anq();
                this.aho = false;
                return;
            }
            if (this.indicatorCharts == null) {
                this.indicatorCharts = new List$1(XamDataChart.$, 0);
            }
            this.indicatorCharts.clear();
            this.ahz.clear();
            this.ah1.clear();
            let c = this.af1 == null ? 0 : this.af1.count;
            let d = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
            let e = c + d;
            for (let f = 0; f < e; f++) {
                let g = new XamDataChart();
                this.indicatorCharts.add(g);
                this.am3(g);
                let h = f >= c;
                if (h) {
                    g.lo = this.customIndicatorNames._inner[f - c];
                }
                else {
                    g.lo = this.akc(this.af1._inner[f]);
                }
                if (this.indicatorAxis != null) {
                    let i;
                    let j;
                    if (f == 0) {
                        i = this.indicatorAxis;
                        j = this.indicatorXAxis;
                    }
                    else {
                        i = new NumericYAxis();
                        if (!this.indicatorXAxis.ce) {
                            j = this.ae7(0);
                        }
                        else {
                            j = this.ae7(1);
                        }
                    }
                    j.name = "indicatorXAxis_" + f;
                    i.name = "indicatorAxis_" + f;
                    g.axes.add(i);
                    g.axes.add(j);
                    this.ahz.add(i);
                    this.ah1.add(j);
                    if (this.f8) {
                        this.acy(i);
                    }
                    if (this.f8) {
                        this.acw(j);
                    }
                }
            }
            this.ana();
            this.ang();
            if (this.afl != null) {
                this.afl.ae = this.af1;
            }
            this.ame();
            this.anq();
            this.aho = false;
        }
        tb() {
            super.tb();
            this.acw(this.xAxis);
            this.acw(this.volumeXAxis);
            if (this.ah1 != null) {
                for (let a of fromEnum(this.ah1)) {
                    this.acw(a);
                }
            }
            this.acy(this.yAxis);
            this.acy(this.volumeAxis);
            if (this.ahz != null) {
                for (let b of fromEnum(this.ahz)) {
                    this.acy(b);
                }
            }
            this.acw(this.zoomSliderXAxis);
            this.acy(this.zoomSliderAxis);
        }
        get_gz() {
            return !this.ahm;
        }
        get ahu() {
            return (this.externalObject._dynamicContent);
        }
        anx(a, b) {
            this.anj(a, b);
            this.ame();
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                this.zoomSliderChart.axes.add(this.zoomSliderXAxis);
            }
            this.anc();
            this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
            this.anh();
            this.any(a, b);
        }
        anc() {
            if (this.dataChart == null || this.zoomSliderChart == null) {
                return;
            }
            this.zoomSliderChart.series.clear();
            let a = new List$1(Series.$, 0);
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (this.ahi(c) || c.ed) {
                    continue;
                }
                let d;
                let e = this.afz;
                e = this.afy(e);
                let f = this.ajj(c, b);
                if (e == 1) {
                    switch (this.afp(this.bh != null && this.bh.dataSeries != null && this.bh.dataSeries.count > f ? this.bh.dataSeries._inner[f] : null)) {
                        case 1:
                            e = 2;
                            break;
                        case 2:
                            e = 3;
                            break;
                        case 3:
                            e = 4;
                            break;
                        case 4:
                            e = 5;
                            break;
                    }
                }
                switch (e) {
                    case 2:
                        d = this.agu();
                        this.af7.setDisplayType(d, 1);
                        break;
                    case 3:
                        d = this.agu();
                        this.af7.setDisplayType(d, 0);
                        break;
                    case 5:
                        d = this.agt();
                        break;
                    case 6:
                        d = this.agr();
                        break;
                    default:
                    case 4:
                        d = this.ags();
                        break;
                }
                let g = this.bh != null && this.bh.dataSeries != null && this.bh.dataSeries.count > f ? this.bh.dataSeries._inner[f] : null;
                if (d.ej && !d.er) {
                    this.af9.setCategoryMode(d, 1);
                    this.af9.setXAxis(d, this.zoomSliderXAxis);
                    this.af9.setYAxis(d, this.zoomSliderAxis);
                    this.af9.setValueMemberPath(d, g == null ? null : this.akd(g));
                }
                else if (d.er) {
                    this.af7.setCategoryMode(d, 1);
                    this.af7.setXAxis(d, this.zoomSliderXAxis);
                    this.af7.setYAxis(d, this.zoomSliderAxis);
                    if (g != null) {
                        this.af7.setOpenMemberPath(d, g.getMemberPathFor(11));
                        this.af7.setHighMemberPath(d, g.getMemberPathFor(12));
                        this.af7.setLowMemberPath(d, g.getMemberPathFor(13));
                        this.af7.setCloseMemberPath(d, g.getMemberPathFor(14));
                        this.af7.setVolumeMemberPath(d, g.getMemberPathFor(15));
                    }
                }
                d.name = "zoomSliderSeries_" + f;
                d.itemsSource = c.itemsSource;
                d.title = c.title;
                d.i5 = this.js;
                a.add(d);
            }
            for (let h = 0; h < a.count; h++) {
                let i = a._inner[h];
                this.zoomSliderChart.series.add(i);
                this.tj(i, h);
            }
        }
        tz(a, b, c) {
            super.tz(a, b, c);
            if (a == null || !b) {
                return;
            }
            let d = true;
            let e = true;
            switch (c) {
                case "Brushes":
                case "Outlines":
                    d = e = false;
                    break;
            }
            if (this.indicatorCharts != null && d) {
                for (let f of fromEnum(this.indicatorCharts)) {
                    a(f);
                }
            }
            if (this.volumeChart != null && e) {
                a(this.volumeChart);
            }
            if (this.zoomSliderChart != null) {
                a(this.zoomSliderChart);
            }
        }
        amo(a, b) {
            let c = b;
            let d = a;
            let e = -1;
            if (this.indicatorCharts != null) {
                e = this.indicatorCharts.indexOf(d.cz);
            }
            e -= this.af1 == null ? 0 : this.af1.count;
            if (this.applyCustomIndicators != null) {
                this.applyCustomIndicators(this, new FinancialChartCustomIndicatorArgs(c, d, e));
            }
        }
        anl(a, b, c) {
            if (a != null) {
                if (b != null) {
                    a.axes.remove(b);
                }
                a.axes.add(c);
            }
            if (this.f8) {
                this.acw(c);
            }
        }
        get aht() {
            return TypeRegistrar.isRegistered("IgxZoomSliderComponent");
        }
        amp(a, b) {
            this.anp();
        }
        ahk(a, b) {
            if (b <= (0)) {
                return false;
            }
            switch (a) {
                case 5: return true;
                case 4:
                case 3: return b >= timeSpanFromDays(365);
                case 2: return b >= timeSpanFromDays(180);
                case 1: return b >= timeSpanFromDays(90);
                case 0: return b >= timeSpanFromDays(30);
            }
            return false;
        }
        anf() {
            let a = this.afj != null ? this.afj : new FinancialChartRangeSelectorOptionCollection(1, [5, 4, 3, 2, 1, 0]);
            let b = new FinancialChartRangeSelectorOptionCollection(0);
            let c = this.xAxis;
            let d = +(c.actualMaximumValue) - +(c.actualMinimumValue);
            for (let e of fromEnum(a)) {
                if (this.ahk(e, d)) {
                    b.add(e);
                }
            }
            this.afi = b;
            if (this.afl != null) {
                this.afl.u = this.afi;
            }
        }
        amt(a, b) {
            this.anf();
        }
        amy(a, b) {
            this.af3 = this.afl.ag;
        }
        amx(a, b) {
            this.af1 = this.afl.ae;
        }
        amr(a, b) {
            this.anp();
        }
        ams(a, b) {
            this.anr();
        }
        am2(a, b) {
            let c = a;
            if (c.bg == null) {
                return;
            }
            if (this.ahm) {
                this.ane(c.bg);
            }
        }
        am5(a) {
            SyncManager.e(a);
            a.axes.clear();
            a.series.clear();
            a.gridAreaRectChanged = delegateRemove(a.gridAreaRectChanged, runOn(this, this.amq));
            a.provideContainer(null);
            if (this.volumeChart == null && this.indicatorCharts == null) {
                this.yAxis.es = this.volumeAxis.es = this.indicatorAxis.es = 0;
                this.xAxis.az.visibility = this.aek;
            }
        }
        am3(a) {
            let b = a != this.zoomSliderChart;
            if (b) {
                if (this.dataChart != null) {
                    a.vx = new Rect(0, this.dataChart.vh.x, a.vx.y, this.dataChart.vh.width, a.vx.height);
                }
                let c = ((() => {
                    let $ret = new SyncSettings();
                    $ret.syncChannel = "one";
                    $ret.synchronizeHorizontally = true;
                    $ret.synchronizeVertically = false;
                    return $ret;
                })());
                SyncManager.d(a, c);
                SyncManager.c(a);
            }
            a.gridAreaRectChanged = delegateCombine(a.gridAreaRectChanged, runOn(this, this.amq));
            this.td(a);
        }
        ame() {
            if (this.indicatorCharts != null || this.volumeChart != null) {
                this.acu(this.xAxis, (a) => a.visibility = 1);
            }
            for (let a = 0; a < this.ah1.count; a++) {
                let b = this.ah1._inner[a];
                let c = a < this.ah1.count - 1 || this.volumeChart != null;
                this.acu(b, (d) => d.visibility = c ? 1 : 0);
            }
        }
        anj(a, b) {
            if (a != null) {
                this.am5(a);
            }
            if (b != null) {
                this.am3(b);
            }
        }
        anv(a, b) {
            this.anj(a, b);
            this.ame();
            if (this.volumeChart != null) {
                if (this.volumeAxis != null) {
                    this.volumeChart.axes.add(this.volumeAxis);
                    this.volumeChart.axes.add(this.volumeXAxis);
                }
                this.anb();
                this.volumeXAxis.itemsSource = this.xAxis.itemsSource;
            }
            this.anw(a, b);
        }
        amu(a, b) {
            this.ant();
        }
        ant() {
            if (this.afl == null || +(this.afl.au) == +(dateMaxValue()) || +(this.afl.at) == +(dateMinValue()) || this.dataChart == null) {
                return;
            }
            let a = this.xAxis;
            let b = a.getWindowRectForSelection(this.afl.au, this.afl.at);
            if (b.width == 0 || isNaN_(b.width) || isInfinity(b.width)) {
                return;
            }
            this.ahn = true;
            this.dataChart.vx = new Rect(0, b.left, this.dataChart.vx.top, b.width, this.dataChart.vx.height);
            if (this.ag3 != null) {
                this.ag3.windowRect = this.dataChart.vh;
            }
            if (this.ahm) {
                this.ane(this.dataChart);
            }
            this.ahn = false;
        }
        am1(a, b) {
            this.anf();
            this.ans(!this.ahn);
        }
        amn(a, b) {
            if (!this.ahn) {
                if (this.ahm) {
                    this.ane(a);
                }
                let c = false;
                let d = this.uc(() => this.ans(true), c);
                c = d.p1;
                if (this.ag3 != null) {
                    this.ag3.windowRect = this.dataChart.vh;
                }
            }
        }
        ann(a, b, c, d) {
            if (a == null || b == null) {
                return;
            }
            if (c != -1) {
                this.ahn = true;
                a.vx = new Rect(0, d, a.vh.top, c, a.vh.height);
                this.ahn = false;
            }
            let e = 1.7976931348623157E+308;
            let f = -1.7976931348623157E+308;
            let g = new Rect(0, 0, 0, 1, 1);
            let h = new ScalerParams(0, g, g, this.yAxis.ch, a.vl);
            for (let i of fromEnum(a.series)) {
                h.b = i.id();
                let j = i.ar(a.vh);
                let k = j == null || j.c == 1.7976931348623157E+308 || isNaN_(j.c);
                if (k) {
                    continue;
                }
                let l = b.ej(j.c, h);
                let m = b.ej(j.b, h);
                f = Math.max(f, l);
                e = Math.min(e, m);
            }
            let n = a.vh.width;
            if (c != -1) {
                n = c;
            }
            let o = a.vh.left;
            if (d != -1) {
                o = d;
            }
            if (e == 1.7976931348623157E+308 || f == -1.7976931348623157E+308 || isNaN_(e) || isNaN_(f)) {
                return;
            }
            this.ahn = true;
            let p = new Rect(0, o, e, n, f - e);
            a.vx = p;
            this.ahn = false;
        }
        anm(a) {
            if (a == null) {
                return;
            }
            if (a == this.dataChart) {
                this.ann(this.dataChart, this.yAxis, -1, -1);
                if (this.volumeChart != null) {
                    this.ann(this.volumeChart, this.volumeAxis, this.dataChart.vh.width, this.dataChart.vh.left);
                }
            }
            else if (a == this.volumeChart) {
                this.ann(this.volumeChart, this.volumeAxis, -1, -1);
                this.ann(this.dataChart, this.yAxis, this.volumeChart.vh.width, this.volumeChart.vh.left);
            }
        }
        ane(a) {
            this.ub(() => this.anm(a));
        }
        amv(a, b) {
            if (this.ahm) {
                this.ane(a);
            }
        }
        anu() {
            if (!this.ahu) {
                return;
            }
            this.amh();
            if (this.afz == 0) {
                this.uy();
                this.zoomSliderChart = null;
                this.ajb.rootWrapper.removeChildren();
            }
            else if (this.zoomSliderChart == null) {
                this.zoomSliderChart = ((() => {
                    let $ret = new XamDataChart();
                    $ret.name = "ZoomSliderChart";
                    return $ret;
                })());
                this.anh();
            }
            else {
                this.anc();
            }
        }
        amh() {
            let container_ = this.ajb.rootWrapper.getNativeElement();
            let containerParent_ = container_.parentElement;
            if (this.ag3 != null && containerParent_ != null && !this.ahv) {
                this.ahv = true;
                if (TypeRegistrar.isRegistered("IgxZoomSliderComponent")) {
                    let z_ = this.ag3;
                    let f_ = this.externalObject;
                    let sliderComponent_ = TypeRegistrar.get("IgxZoomSliderComponent");
                    let sliderInstance_ = TypeRegistrar.create("IgxZoomSliderComponent");
                    sliderInstance_._implementation = z_;
                    sliderComponent_._staticStyling(container_, sliderInstance_, f_);
                }
            }
        }
        ano() {
            if (this.afu != 1) {
                return;
            }
            this.ac0((a) => {
                let b;
                b = a.breaks;
                b.clear();
                if (this.xAxisBreaks == null) {
                    return;
                }
                for (let c of fromEnum(this.xAxisBreaks)) {
                    b.add(c);
                }
            });
        }
        uz(a, b, c) {
            super.uz(a, b, c);
            if (this.bh.dataSeries.count > 0) {
                if (this.afu == 1 && stringIsNullOrEmpty(this.mf)) {
                    this.b8.setXMemberPath(a, c.getMemberPathFor(17));
                }
                if (stringIsNullOrEmpty(this.mh)) {
                    this.b8.setYMemberPath(a, this.akd(c));
                }
                if (stringIsNullOrEmpty(this.mb)) {
                    this.b8.setLabelMemberPath(a, this.akd(c));
                }
                if (stringIsNullOrEmpty(this.l8)) {
                    this.b8.setContentMemberPath(a, this.akd(c));
                }
            }
        }
        akc(a) {
            switch (a) {
                case 0: return "Absolute Volume Oscillator";
                case 1: return "Accumulation/Distribution Indicator";
                case 2: return "Average Directional Index";
                case 3: return "Average True Range Indicator";
                case 4: return "Bollinger Bandwidth";
                case 5: return "Chaikin Oscillator";
                case 6: return "Chaikin Volatility Indicator";
                case 7: return "Commodity Channel Index";
                case 8: return "Detrended Price Oscillator";
                case 9: return "Ease of Movement Indicator";
                case 10: return "Fast Stochastic Oscillator";
                case 11: return "Force Index Indicator";
                case 12: return "Full Stochastic Oscillator";
                case 13: return "Market Facilitation Index";
                case 14: return "Mass Index Indicator";
                case 15: return "Median Price Indicator";
                case 16: return "Money Flow Index";
                case 17: return "MACD Indicator";
                case 18: return "Negative Volume Index";
                case 19: return "On Balance Volume Indicator";
                case 20: return "Percentage Price Oscillator";
                case 21: return "Percentage Volume Oscillator";
                case 22: return "Positive Volume Index";
                case 23: return "Price Volume Trend";
                case 24: return "ROC - Rate of Change Indicator";
                case 25: return "RSI - Relative Strength Index";
                case 26: return "Slow Stochastic Oscillator";
                case 27: return "Standard Deviation Indicator";
                case 28: return "Stoch RSI";
                case 29: return "TRIX Indicator";
                case 30: return "Typical Price Indicator";
                case 31: return "Ultimate Oscillator";
                case 32: return "Weighted Close Indicator";
                case 33: return "Williams %R Indicator";
                default: return "Unknown";
            }
        }
        acw(a) {
            super.acw(a);
            let b = a;
            this.am4(b);
            if (a.bg != null) {
                for (let c of fromEnum(a.bg.series)) {
                    if (this.ahf(c)) {
                        this.af9.setXAxis(c, b);
                    }
                    else if (this.ahj(c)) {
                        this.af7.setXAxis(c, b);
                    }
                    else if (this.ahg(c)) {
                        this.agb.setXAxis(c, b);
                    }
                    else if (this.ahi(c)) {
                        this.agg.setXAxis(c, b);
                    }
                }
            }
            this.am8((d) => {
                d.zoomMaximumCategoryRange = this.aiv;
                d.zoomMaximumItemSpan = this.aiw;
                d.zoomToCategoryRange = this.aix;
                d.zoomToCategoryStart = this.aiy;
                d.zoomToItemSpan = this.aiz;
            });
            let d = a == this.zoomSliderXAxis;
            if (d) {
                a.jw = this.an0;
                a.er = this.ai6;
                this.acu(a, (e) => e.visibility = 1);
            }
            let e = a;
            e.minimumValue = this.ah7;
            e.maximumValue = this.ah6;
            a.b1 = this.ahp;
        }
        acy(a) {
            super.acy(a);
            if (a.bg != null && a == this.yAxis) {
                for (let b of fromEnum(a.bg.series)) {
                    if (this.ahf(b)) {
                        this.af9.setYAxis(b, this.yAxis);
                    }
                    else if (this.ahj(b)) {
                        this.af7.setYAxis(b, this.yAxis);
                    }
                    else if (this.ahg(b)) {
                        this.agb.setYAxis(b, this.yAxis);
                    }
                    else if (this.ahi(b)) {
                        this.agg.setYAxis(b, this.yAxis);
                    }
                }
            }
            a.la = this.ahq;
            a.l5 = this.ai4;
            a.l4 = this.ai3;
            if (a == this.yAxis) {
                a.l1 = this.ai2;
            }
            let c = a == this.zoomSliderAxis;
            if (c) {
                this.acu(a, (d) => d.visibility = 1);
            }
            a.b1 = this.ahr;
        }
        am4(a) {
            a.itemsSource = this.dataChart != null && this.dataChart.series.count > 0 ? this.dataChart.series._inner[0].itemsSource : null;
            a.f0 = XYChart.aaj(a, this.bh.dataSeries);
            if (this.bh.dataSeries.count > 0) {
                let b = this.bh.dataSeries._inner[0].getMemberPathFor(17);
                a.hy(b);
            }
        }
        tj(a, b) {
            if (a == null) {
                return;
            }
            let c = this.zoomSliderChart == a.cz;
            let d = this.dataChart != null && this.dataChart.series.contains(a);
            if (d && !a.ed && !this.ahi(a)) {
                a.k8 = "Financial Series";
            }
            super.tj(a, b);
            if ((d || c) && a.e7) {
                a.qw(this.aew != null ? ArrayExtension.getModulus$1(Brush.$, this.aew, b) : null, this.aex != null ? ArrayExtension.getModulus$1(Brush.$, this.aex, b) : null);
            }
            let e = this.ahg(a);
            if (this.ahi(a)) {
                a.t2 = this.aey != null ? ArrayExtension.getModulus$1(Brush.$, this.aey, b) : null;
                a.ud = this.aez != null ? ArrayExtension.getModulus$1(Brush.$, this.aez, b) : null;
                a.i5 = this.ais;
            }
            else if (e) {
                a.t2 = this.aeu != null ? ArrayExtension.getModulus$1(Brush.$, this.aeu, b) : null;
                a.i5 = this.aiq;
            }
            else if (!a.ed && (d || c)) {
                a.t2 = this.ab != null ? ArrayExtension.getModulus$1(Brush.$, this.ab, b) : null;
                a.ud = this.af != null ? ArrayExtension.getModulus$1(Brush.$, this.af, b) : null;
            }
            let f = this.volumeChart != null && this.volumeChart == a.cz;
            if (f) {
                a.i5 = this.aiu;
            }
            a.legend = c || f || e || !a.isUsableInLegend ? null : this.legend != null ? this.legend : this.ahh ? this.af5 : null;
        }
        tk(a, b) {
            super.tk(a, b);
            if (a == null) {
                return;
            }
        }
        t5(a, b, c) {
            super.t5(a, b, c);
            switch (a) {
                case "YAxisIsLogarithmic":
                    this.yAxis.li = this.ahs;
                    if (this.volumeAxis != null) {
                        this.volumeAxis.li = this.ahs;
                    }
                    if (this.zoomSliderAxis != null) {
                        this.zoomSliderAxis.li = this.ahs;
                    }
                    break;
                case "YAxisLogarithmBase":
                    this.yAxis.l9 = this.ajq;
                    if (this.volumeAxis != null) {
                        this.volumeAxis.l9 = this.ajq;
                    }
                    if (this.zoomSliderAxis != null) {
                        this.zoomSliderAxis.l9 = this.ajq;
                    }
                    break;
                case "VolumeType":
                    let d = EnumUtil.getEnumValue(FinancialChartVolumeType_$type, b);
                    if (this.afs == 0) {
                        this.volumeChart = null;
                    }
                    else if (this.volumeChart == null) {
                        this.volumeChart = ((() => {
                            let $ret = new XamDataChart();
                            $ret.name = "VolumeChart";
                            return $ret;
                        })());
                    }
                    else {
                        this.anb();
                    }
                    break;
                case "VolumeChart":
                    this.anv(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                    break;
                case "DataChart":
                    if (typeCast(XamDataChart.$, b) !== null) {
                        let e = b;
                        e.gridAreaRectChanged = delegateRemove(e.gridAreaRectChanged, runOn(this, this.amq));
                        e.actualWindowRectChanged = delegateRemove(e.actualWindowRectChanged, runOn(this, this.amn));
                        e.seriesDataUpdated = delegateRemove(e.seriesDataUpdated, runOn(this, this.amv));
                    }
                    if (this.dataChart != null) {
                        let f = this.dataChart;
                        f.gridAreaRectChanged = delegateCombine(f.gridAreaRectChanged, runOn(this, this.amq));
                        let g = this.dataChart;
                        g.actualWindowRectChanged = delegateCombine(g.actualWindowRectChanged, runOn(this, this.amn));
                        let h = this.dataChart;
                        h.seriesDataUpdated = delegateCombine(h.seriesDataUpdated, runOn(this, this.amv));
                    }
                    this.anu();
                    break;
                case "XAxisMode":
                    this.xAxis = this.ae7(this.afu);
                    this.xAxis.name = "xAxis";
                    this.volumeXAxis = this.ae7(this.afu);
                    this.volumeXAxis.name = "volumeXAxis";
                    this.indicatorXAxis = this.ae7(this.afu);
                    this.indicatorXAxis.name = "indicatorXAxis_0";
                    this.zoomSliderXAxis = this.ae7(this.afu);
                    this.zoomSliderXAxis.name = "zoomSliderXAxis";
                    this.acu(this.zoomSliderXAxis, (i) => i.visibility = 1);
                    this.ame();
                    if (this.afu == 1) {
                        this.ano();
                    }
                    break;
                case "YAxisMode":
                    this.yAxis = this.agl(this.afw);
                    this.yAxis.name = "yAxis";
                    this.zoomSliderAxis = this.agl(this.afw);
                    this.zoomSliderAxis.name = "zoomSliderAxis";
                    this.volumeAxis = this.agl(this.afw);
                    this.volumeAxis.name = "volumeAxis";
                    break;
                case "Toolbar":
                    let i = typeCast(FinancialChartToolbar.$, b);
                    if (i != null) {
                        i.rangeChanged = delegateRemove(i.rangeChanged, runOn(this, this.amu));
                        i.indicatorTypesChanged = delegateRemove(i.indicatorTypesChanged, runOn(this, this.amx));
                        i.overlayTypesChanged = delegateRemove(i.overlayTypesChanged, runOn(this, this.amy));
                    }
                    if (this.afl != null) {
                        this.afl.ae = this.af1;
                        this.afl.ag = this.af3;
                        this.afl.u = this.afi;
                        this.ans(true);
                        let j = this.afl;
                        j.rangeChanged = delegateCombine(j.rangeChanged, runOn(this, this.amu));
                        let k = this.afl;
                        k.indicatorTypesChanged = delegateCombine(k.indicatorTypesChanged, runOn(this, this.amx));
                        let l = this.afl;
                        l.overlayTypesChanged = delegateCombine(l.overlayTypesChanged, runOn(this, this.amy));
                    }
                    break;
                case "XAxis":
                    let m = typeCast(CategoryAxisBase.$, b);
                    if (m != null) {
                        if (this.dataChart != null) {
                            this.dataChart.axes.remove(m);
                        }
                    }
                    let n = typeCast(ITimeRangeSelectorAxis_$type, b);
                    if (n != null) {
                        n.visibleRangeChanged = delegateRemove(n.visibleRangeChanged, runOn(this, this.am1));
                    }
                    if (this.dataChart != null) {
                        this.dataChart.axes.add(this.xAxis);
                    }
                    if (this.f8) {
                        this.acw(this.xAxis);
                        this.s1();
                    }
                    this.ans(false);
                    this.ant();
                    this.anf();
                    let o = this.xAxis;
                    o.visibleRangeChanged = delegateCombine(o.visibleRangeChanged, runOn(this, this.am1));
                    break;
                case "XAxisZoomMaximumCategoryRange":
                    this.am8((p) => p.zoomMaximumCategoryRange = this.aiv);
                    break;
                case "XAxisZoomMaximumItemSpan":
                    this.am8((p) => p.zoomMaximumItemSpan = this.aiw);
                    break;
                case "XAxisZoomToCategoryRange":
                    this.am8((p) => p.zoomToCategoryRange = this.aix);
                    break;
                case "XAxisZoomToCategoryStart":
                    this.am8((p) => p.zoomToCategoryStart = this.aiy);
                    break;
                case "XAxisZoomToItemSpan":
                    this.am8((p) => p.zoomToItemSpan = this.aiz);
                    break;
                case "ChartType":
                    this.ut();
                    break;
                case "VolumeXAxis":
                    this.anl(this.volumeChart, typeCast(Axis.$, b), this.volumeXAxis);
                    break;
                case "ZoomSliderXAxis":
                    this.anl(this.zoomSliderChart, typeCast(Axis.$, b), this.zoomSliderXAxis);
                    break;
                case "IndicatorXAxis":
                    this.anp();
                    break;
                case "YAxis":
                    let p = typeCast(NumericYAxis.$, b);
                    if (p != null) {
                        if (this.dataChart != null) {
                            this.dataChart.axes.remove(p);
                        }
                    }
                    if (this.dataChart != null) {
                        this.dataChart.axes.add(this.yAxis);
                    }
                    if (this.f8) {
                        this.acy(this.yAxis);
                        this.acy(this.yAxis);
                    }
                    let q = this.yAxis;
                    q.rangeChanged = delegateCombine(q.rangeChanged, runOn(this, this.am2));
                    break;
                case "VolumeAxis":
                    let r = typeCast(Axis.$, b);
                    if (this.volumeChart != null && r != null) {
                        this.volumeChart.axes.remove(r);
                    }
                    if (this.volumeChart != null && this.volumeAxis != null) {
                        this.volumeChart.axes.add(this.volumeAxis);
                        this.anb();
                    }
                    if (this.f8) {
                        this.acy(this.volumeAxis);
                    }
                    let s = this.volumeAxis;
                    s.rangeChanged = delegateCombine(s.rangeChanged, runOn(this, this.am2));
                    break;
                case "IndicatorAxis":
                    if (this.indicatorCharts != null) {
                        for (let t = 0; t < this.indicatorCharts.count; t++) {
                            let u = this.indicatorCharts._inner[t];
                            let v = new List$1(Axis.$, 0);
                            for (let w of fromEnum(u.axes)) {
                                if (typeCast(NumericYAxis.$, w) !== null) {
                                    v.add(w);
                                }
                            }
                            for (let x of fromEnum(v)) {
                                u.axes.remove(x);
                            }
                            let y = null;
                            if (t == 0) {
                                y = this.indicatorAxis;
                            }
                            else if (this.afw == 1) {
                                y = this.agl(this.afw);
                            }
                            else if (typeCast(NumericYAxis.$, this.indicatorAxis) !== null) {
                                y = new NumericYAxis();
                            }
                            if (y != null) {
                                u.axes.add(y);
                            }
                            if (this.f8) {
                                this.acy(y);
                            }
                        }
                    }
                    break;
                case "IsWindowSyncedToVisibleRange":
                    if (this.dataChart != null) {
                        this.dataChart.wv = this.g0 && this.gz;
                    }
                    if (this.volumeChart != null) {
                        this.volumeChart.wv = this.g0 && this.gz;
                    }
                    if (this.ahm) {
                        this.anm(this.dataChart);
                    }
                    else {
                        this.volumeChart.x2 = 1;
                    }
                    break;
                case "IndicatorTypes":
                    let z = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), b);
                    if (z != null) {
                        z.collectionChanged = delegateRemove(z.collectionChanged, runOn(this, this.amr));
                    }
                    let aa = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), c);
                    if (aa != null) {
                        aa.collectionChanged = delegateCombine(aa.collectionChanged, runOn(this, this.amr));
                    }
                    this.anp();
                    break;
                case "OverlayTypes":
                    let ab = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), b);
                    if (ab != null) {
                        ab.collectionChanged = delegateRemove(ab.collectionChanged, runOn(this, this.ams));
                    }
                    let ac = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), c);
                    if (ac != null) {
                        ac.collectionChanged = delegateCombine(ac.collectionChanged, runOn(this, this.ams));
                    }
                    this.anr();
                    break;
                case "YAxisAbbreviateLargeNumbers":
                    this.ac5((ad) => ad.la = this.ahq);
                    break;
                case "YAxisMinimumValue":
                    this.ac6((ad) => ad.l5 = this.ai4, false);
                    break;
                case "YAxisMaximumValue":
                    this.ac6((ad) => ad.l4 = this.ai3, false);
                    break;
                case "YAxisInterval":
                    this.ac6((ad) => ad.l1 = this.ai2, false);
                    break;
                case "Thickness":
                case "ZoomSliderType":
                    this.anu();
                    break;
                case "ZoomSliderChart":
                    if (!this.aht) {
                        return;
                    }
                    this.anx(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                    break;
                case "NegativeBrushes":
                case "NegativeOutlines":
                    this.amk((ad, ae) => {
                        if (ad.e7) {
                            ad.qw(this.aew != null ? ArrayExtension.getModulus$1(Brush.$, this.aew, ae) : null, this.aex != null ? ArrayExtension.getModulus$1(Brush.$, this.aex, ae) : null);
                        }
                    }, true);
                    break;
                case "OverlayBrushes":
                    this.amj((ad, ae) => ad.t2 = this.aey != null ? ArrayExtension.getModulus$1(Brush.$, this.aey, ae) : null);
                    break;
                case "OverlayOutlines":
                    this.amj((ad, ae) => ad.ud = this.aez != null ? ArrayExtension.getModulus$1(Brush.$, this.aez, ae) : null);
                    break;
                case "OverlayThickness":
                    this.amj((ad, ae) => ad.i5 = this.ais);
                    break;
                case "OverlayMultiplier":
                    this.amj((ad, ae) => this.agg.setMultiplier(ad, this.air));
                    break;
                case "VolumeBrushes":
                    this.aml((ad, ae) => ad.t2 = ArrayExtension.getModulus$1(Brush.$, this.ae0, ae));
                    break;
                case "VolumeOutlines":
                    this.aml((ad, ae) => ad.ud = ArrayExtension.getModulus$1(Brush.$, this.ae1, ae));
                    break;
                case "VolumeThickness":
                    this.aml((ad, ae) => ad.i5 = this.aiu);
                    break;
                case "IndicatorNegativeBrushes":
                    this.ami((ad, ae) => this.agb.setNegativeBrush(ad, ArrayExtension.getModulus$1(Brush.$, this.aev, ae)));
                    break;
                case "IndicatorBrushes":
                    this.ami((ad, ae) => ad.t2 = ArrayExtension.getModulus$1(Brush.$, this.aeu, ae));
                    break;
                case "IndicatorThickness":
                    this.ami((ad, ae) => ad.i5 = this.aiq);
                    break;
                case "IndicatorDisplayTypes":
                    this.ami((ad, ae) => this.agb.setDisplayType(ad, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.agd, ae)));
                    break;
                case "IndicatorPeriod":
                    this.ami((ad, ae) => {
                        if (this.ajl == -2147483648) {
                            return;
                        }
                        this.agb.setPeriodOverride(ad, this.ajl);
                    });
                    break;
                case "IndicatorMultiplier":
                    this.ami((ad, ae) => this.agb.setMultiplier(ad, this.aip));
                    break;
                case "IndicatorSmoothingPeriod":
                    this.ami((ad, ae) => this.agb.setSmoothingPeriod(ad, this.ajo));
                    break;
                case "IndicatorShortPeriod":
                    this.ami((ad, ae) => this.agb.setShortPeriod(ad, this.ajm));
                    break;
                case "IndicatorLongPeriod":
                    this.ami((ad, ae) => this.agb.setLongPeriod(ad, this.ajk));
                    break;
                case "IndicatorSignalPeriod":
                    this.ami((ad, ae) => this.agb.setSignalPeriod(ad, this.ajn));
                    break;
                case "RangeSelectorOptions":
                    let ad = typeCast(FinancialChartRangeSelectorOptionCollection.$, b);
                    if (ad != null) {
                        ad.collectionChanged = delegateRemove(ad.collectionChanged, runOn(this, this.amt));
                    }
                    if (this.afj != null) {
                        let ae = this.afj;
                        ae.collectionChanged = delegateCombine(ae.collectionChanged, runOn(this, this.amt));
                    }
                    this.anf();
                    break;
                case "CustomIndicatorNames":
                    let af = typeCast(ObservableCollection$1.$.specialize(String_$type), b);
                    if (af != null) {
                        af.collectionChanged = delegateRemove(af.collectionChanged, runOn(this, this.amp));
                    }
                    if (this.customIndicatorNames != null) {
                        let ag = this.customIndicatorNames;
                        ag.collectionChanged = delegateCombine(ag.collectionChanged, runOn(this, this.amp));
                    }
                    this.anp();
                    break;
                case "Legend":
                    if (this.zoomSliderChart != null) {
                        this.zoomSliderChart.legend = null;
                    }
                    break;
                case "Brushes":
                    this.amk((ah, ai) => ah.t2 = this.ab != null ? ArrayExtension.getModulus$1(Brush.$, this.ab, ai) : null, true);
                    break;
                case "Outlines":
                    this.amk((ah, ai) => ah.ud = this.af != null ? ArrayExtension.getModulus$1(Brush.$, this.af, ai) : null, true);
                    break;
                case "XAxisLabelVisibility":
                    if (this.aek == 0 && this.zoomSliderXAxis != null) {
                        this.acu(this.zoomSliderXAxis, (ah) => ah.visibility = 1);
                    }
                    this.ame();
                    break;
                case "YAxisLabelVisibility":
                    if (this.ael != 0 || this.zoomSliderAxis == null) {
                        break;
                    }
                    this.acu(this.zoomSliderAxis, (ah) => ah.visibility = 1);
                    break;
                case "ZoomSliderXAxisMajorStroke":
                    this.zoomSliderXAxis.jw = this.an0;
                    break;
                case "ZoomSliderXAxisMajorStrokeThickness":
                    this.zoomSliderXAxis.er = this.ai6;
                    break;
                case "FinancialChartLegend":
                case "IsLegendVisible":
                    let ah = this.ahh && this.legend == null;
                    {
                        let ai = (aj, ak) => {
                            if (aj.isUsableInLegend) {
                                aj.legend = ah ? this.af5 : null;
                            }
                        };
                        this.amk(ai, false);
                        this.amj(ai);
                    }
                    break;
                case "ZoomSliderAxis":
                    let aj = typeCast(Axis.$, b);
                    if (aj != null && this.zoomSliderChart != null) {
                        this.zoomSliderChart.axes.remove(aj);
                    }
                    if (this.zoomSliderAxis != null) {
                        if (this.zoomSliderChart != null) {
                            this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                            this.anc();
                            this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
                        }
                        if (this.f8) {
                            this.acy(this.zoomSliderAxis);
                        }
                        this.acu(this.zoomSliderAxis, (ak) => ak.visibility = 1);
                    }
                    break;
                case "XAxisMinimumValue":
                    this.ac0((ak) => {
                        let al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                        if (al != null) {
                            al.minimumValue = this.ah7;
                        }
                    });
                    break;
                case "XAxisMaximumValue":
                    this.ac0((ak) => {
                        let al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                        if (al != null) {
                            al.maximumValue = this.ah6;
                        }
                    });
                    break;
                case FinancialChart.all:
                    this.ac1((ak) => ak.b1 = this.ahp, a);
                    break;
                case FinancialChart.alw:
                    this.ac5((ak) => ak.b1 = this.ahr);
                    break;
            }
        }
        get_b5() {
            return 1;
        }
        get b5() {
            return this.get_b5();
        }
        get ahs() {
            return this.aha;
        }
        set ahs(a) {
            let b = this.ahs;
            if (a != b) {
                this.aha = a;
                this.t5("YAxisIsLogarithmic", b, this.ahs);
            }
        }
        get ajq() {
            return this.aji;
        }
        set ajq(a) {
            let b = this.ajq;
            if (a != b) {
                this.aji = a;
                this.t5("YAxisLogarithmBase", b, this.ajq);
            }
        }
        get ai2() {
            return this.aij;
        }
        set ai2(a) {
            let b = this.ai2;
            if (a != b) {
                this.aij = a;
                this.t5("YAxisInterval", b, this.ai2);
            }
        }
        get ai4() {
            return this.ail;
        }
        set ai4(a) {
            let b = this.ai4;
            if (a != b) {
                this.ail = a;
                this.t5("YAxisMinimumValue", b, this.ai4);
            }
        }
        get ai3() {
            return this.aik;
        }
        set ai3(a) {
            let b = this.ai3;
            if (a != b) {
                this.aik = a;
                this.t5("YAxisMaximumValue", b, this.ai3);
            }
        }
        get ai5() {
            return this.aim;
        }
        set ai5(a) {
            let b = this.ai5;
            if (a != b) {
                this.aim = a;
                this.t5("YAxisMinorInterval", b, this.ai5);
            }
        }
        get ai1() {
            return this.yAxis.lx;
        }
        get ai0() {
            return this.yAxis.lw;
        }
        get afs() {
            return this.afq;
        }
        set afs(a) {
            let b = this.afs;
            if (a != b) {
                this.afq = a;
                this.t5("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.afs));
            }
        }
        get afu() {
            return this.aft;
        }
        set afu(a) {
            let b = this.afu;
            if (a != b) {
                this.aft = a;
                this.t5("XAxisMode", enumGetBox(FinancialChartXAxisMode_$type, b), enumGetBox(FinancialChartXAxisMode_$type, this.afu));
            }
        }
        get aiv() {
            return this.aie;
        }
        set aiv(a) {
            let b = this.aiv;
            if (a != b) {
                this.aie = a;
                this.t5("XAxisZoomMaximumCategoryRange", b, this.aiv);
            }
        }
        get aiy() {
            return this.aih;
        }
        set aiy(a) {
            let b = this.aiy;
            if (a != b) {
                this.aih = a;
                this.t5("XAxisZoomToCategoryStart", b, this.aiy);
            }
        }
        get aiw() {
            return this.aif;
        }
        set aiw(a) {
            let b = this.aiw;
            if (a != b) {
                this.aif = a;
                this.t5("XAxisZoomMaximumItemSpan", b, this.aiw);
            }
        }
        get aix() {
            return this.aig;
        }
        set aix(a) {
            let b = this.aix;
            if (a != b) {
                this.aig = a;
                this.t5("XAxisZoomToCategoryRange", b, this.aix);
            }
        }
        get aiz() {
            return this.aii;
        }
        set aiz(a) {
            let b = this.aiz;
            if (a != b) {
                this.aii = a;
                this.t5("XAxisZoomToItemSpan", b, this.aiz);
            }
        }
        get afw() {
            return this.afv;
        }
        set afw(a) {
            let b = this.afw;
            if (a != b) {
                this.afv = a;
                this.t5("YAxisMode", enumGetBox(FinancialChartYAxisMode_$type, b), enumGetBox(FinancialChartYAxisMode_$type, this.afw));
            }
        }
        get ahl() {
            return this.ag5;
        }
        set ahl(a) {
            let b = this.ahl;
            if (a != b) {
                this.ag5 = a;
                this.t5("IsToolbarVisible", b, this.ahl);
            }
        }
        get afn() {
            return this.afm;
        }
        set afn(a) {
            let b = this.afn;
            if (a != b) {
                this.afm = a;
                this.t5("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.afn));
            }
        }
        get_adf() {
            return super.get_adf();
        }
        set_adf(a) {
            super.set_adf(a);
        }
        get ahm() {
            return this.ag6;
        }
        set ahm(a) {
            let b = this.ahm;
            if (a != b) {
                this.ag6 = a;
                this.t5("IsWindowSyncedToVisibleRange", b, this.ahm);
            }
        }
        get af1() {
            return this.af0;
        }
        set af1(a) {
            let b = this.af1;
            if (a != b) {
                this.af0 = a;
                this.t5("IndicatorTypes", b, this.af1);
            }
        }
        get af3() {
            return this.af2;
        }
        set af3(a) {
            let b = this.af3;
            if (a != b) {
                this.af2 = a;
                this.t5("OverlayTypes", b, this.af3);
            }
        }
        get indicatorCharts() {
            return this.ahx;
        }
        set indicatorCharts(a) {
            let b = this.indicatorCharts;
            if (a != b) {
                this.ahx = a;
                this.t5("IndicatorCharts", b, this.indicatorCharts);
            }
        }
        get ahq() {
            return this.ag8;
        }
        set ahq(a) {
            let b = this.ahq;
            if (a != b) {
                this.ag8 = a;
                this.t5("YAxisAbbreviateLargeNumbers", b, this.ahq);
            }
        }
        get_jm() {
            return super.get_jm();
        }
        set_jm(a) {
            super.set_jm(a);
        }
        get ahp() {
            return this.ag7;
        }
        set ahp(a) {
            let b = this.ahp;
            if (a != b) {
                this.ag7 = a;
                this.t5(FinancialChart.all, b, this.ahp);
            }
        }
        get ahr() {
            return this.ag9;
        }
        set ahr(a) {
            let b = this.ahr;
            if (a != b) {
                this.ag9 = a;
                this.t5(FinancialChart.alw, b, this.ahr);
            }
        }
        get zoomSliderChart() {
            return this.agz;
        }
        set zoomSliderChart(a) {
            let b = this.zoomSliderChart;
            if (a != b) {
                this.agz = a;
                this.t5("ZoomSliderChart", b, this.zoomSliderChart);
            }
        }
        get zoomSliderAxis() {
            return this.agk;
        }
        set zoomSliderAxis(a) {
            let b = this.zoomSliderAxis;
            if (a != b) {
                this.agk = a;
                this.t5("ZoomSliderAxis", b, this.zoomSliderAxis);
            }
        }
        get zoomSliderXAxis() {
            return this.ae5;
        }
        set zoomSliderXAxis(a) {
            let b = this.zoomSliderXAxis;
            if (a != b) {
                this.ae5 = a;
                this.t5("ZoomSliderXAxis", b, this.zoomSliderXAxis);
            }
        }
        get afz() {
            return this.afx;
        }
        set afz(a) {
            let b = this.afz;
            if (a != b) {
                this.afx = a;
                this.t5("ZoomSliderType", enumGetBox(FinancialChartZoomSliderType_$type, b), enumGetBox(FinancialChartZoomSliderType_$type, this.afz));
            }
        }
        get aew() {
            return this.aeo;
        }
        set aew(a) {
            let b = this.aew;
            if (a != b) {
                this.aeo = a;
                this.t5("NegativeBrushes", b, this.aew);
            }
        }
        get aex() {
            return this.aep;
        }
        set aex(a) {
            let b = this.aex;
            if (a != b) {
                this.aep = a;
                this.t5("NegativeOutlines", b, this.aex);
            }
        }
        get aey() {
            return this.aeq;
        }
        set aey(a) {
            let b = this.aey;
            if (a != b) {
                this.aeq = a;
                this.t5("OverlayBrushes", b, this.aey);
            }
        }
        get aez() {
            return this.aer;
        }
        set aez(a) {
            let b = this.aez;
            if (a != b) {
                this.aer = a;
                this.t5("OverlayOutlines", b, this.aez);
            }
        }
        get ae1() {
            return this.aet;
        }
        set ae1(a) {
            let b = this.ae1;
            if (a != b) {
                this.aet = a;
                this.t5("VolumeOutlines", b, this.ae1);
            }
        }
        get ae0() {
            return this.aes;
        }
        set ae0(a) {
            let b = this.ae0;
            if (a != b) {
                this.aes = a;
                this.t5("VolumeBrushes", b, this.ae0);
            }
        }
        get aev() {
            return this.aen;
        }
        set aev(a) {
            let b = this.aev;
            if (a != b) {
                this.aen = a;
                this.t5("IndicatorNegativeBrushes", b, this.aev);
            }
        }
        get aeu() {
            return this.aem;
        }
        set aeu(a) {
            let b = this.aeu;
            if (a != b) {
                this.aem = a;
                this.t5("IndicatorBrushes", b, this.aeu);
            }
        }
        get aiu() {
            return this.aid;
        }
        set aiu(a) {
            let b = this.aiu;
            if (a != b) {
                this.aid = a;
                this.t5("VolumeThickness", b, this.aiu);
            }
        }
        get ais() {
            return this.aib;
        }
        set ais(a) {
            let b = this.ais;
            if (a != b) {
                this.aib = a;
                this.t5("OverlayThickness", b, this.ais);
            }
        }
        get air() {
            return this.aia;
        }
        set air(a) {
            let b = this.air;
            if (a != b) {
                this.aia = a;
                this.t5("OverlayMultiplier", b, this.air);
            }
        }
        get aiq() {
            return this.ah9;
        }
        set aiq(a) {
            let b = this.aiq;
            if (a != b) {
                this.ah9 = a;
                this.t5("IndicatorThickness", b, this.aiq);
            }
        }
        get agd() {
            return this.agc;
        }
        set agd(a) {
            let b = this.agd;
            if (a != b) {
                this.agc = a;
                this.t5("IndicatorDisplayTypes", b, this.agd);
            }
        }
        get ajl() {
            return this.aje;
        }
        set ajl(a) {
            let b = this.ajl;
            if (a != b) {
                this.aje = a;
                this.t5("IndicatorPeriod", b, this.ajl);
            }
        }
        get aip() {
            return this.ah8;
        }
        set aip(a) {
            let b = this.aip;
            if (a != b) {
                this.ah8 = a;
                this.t5("IndicatorMultiplier", b, this.aip);
            }
        }
        get ajo() {
            return this.ajh;
        }
        set ajo(a) {
            let b = this.ajo;
            if (a != b) {
                this.ajh = a;
                this.t5("IndicatorSmoothingPeriod", b, this.ajo);
            }
        }
        get ajm() {
            return this.ajf;
        }
        set ajm(a) {
            let b = this.ajm;
            if (a != b) {
                this.ajf = a;
                this.t5("IndicatorShortPeriod", b, this.ajm);
            }
        }
        get ajk() {
            return this.ajd;
        }
        set ajk(a) {
            let b = this.ajk;
            if (a != b) {
                this.ajd = a;
                this.t5("IndicatorLongPeriod", b, this.ajk);
            }
        }
        get ajn() {
            return this.ajg;
        }
        set ajn(a) {
            let b = this.ajn;
            if (a != b) {
                this.ajg = a;
                this.t5("IndicatorSignalPeriod", b, this.ajn);
            }
        }
        get afj() {
            return this.afh;
        }
        set afj(a) {
            let b = this.afj;
            if (a != b) {
                this.afh = a;
                this.t5("RangeSelectorOptions", b, this.afj);
            }
        }
        get customIndicatorNames() {
            return this.afd;
        }
        set customIndicatorNames(a) {
            let b = this.afd;
            if (a != b) {
                this.afd = a;
                this.t5("CustomIndicatorNames", b, this.customIndicatorNames);
            }
        }
        get_g0() {
            return super.get_g0();
        }
        set_g0(a) {
            super.set_g0(a);
        }
        get an0() {
            return this.anz;
        }
        set an0(a) {
            let b = this.an0;
            if (a != b) {
                this.anz = a;
                this.t5("ZoomSliderXAxisMajorStroke", b, this.an0);
            }
        }
        get ai6() {
            return this.ain;
        }
        set ai6(a) {
            let b = this.ai6;
            if (a != b) {
                this.ain = a;
                this.t5("ZoomSliderXAxisMajorStrokeThickness", b, this.ai6);
            }
        }
        get ahh() {
            return this.ag4;
        }
        set ahh(a) {
            let b = this.ahh;
            if (a != b) {
                this.ag4 = a;
                this.t5("IsLegendVisible", b, this.ahh);
            }
        }
        get af5() {
            return this.af4;
        }
        set af5(a) {
            let b = this.af5;
            if (a != b) {
                this.af4 = a;
                this.t5("FinancialChartLegend", b, this.af5);
            }
        }
        get xAxis() {
            return this.ae4;
        }
        set xAxis(a) {
            let b = this.xAxis;
            if (a != b) {
                this.ae4 = a;
                this.t5("XAxis", b, this.xAxis);
            }
        }
        get yAxis() {
            return this.agj;
        }
        set yAxis(a) {
            let b = this.yAxis;
            if (a != b) {
                this.agj = a;
                this.t5("YAxis", b, this.yAxis);
            }
        }
        get volumeAxis() {
            return this.agi;
        }
        set volumeAxis(a) {
            let b = this.volumeAxis;
            if (a != b) {
                this.agi = a;
                this.t5("VolumeAxis", b, this.volumeAxis);
            }
        }
        get volumeXAxis() {
            return this.ae3;
        }
        set volumeXAxis(a) {
            let b = this.volumeXAxis;
            if (a != b) {
                this.ae3 = a;
                this.t5("VolumeXAxis", b, this.volumeXAxis);
            }
        }
        get indicatorAxis() {
            return this.agh;
        }
        set indicatorAxis(a) {
            let b = this.indicatorAxis;
            if (a != b) {
                this.agh = a;
                this.t5("IndicatorAxis", b, this.indicatorAxis);
            }
        }
        get indicatorXAxis() {
            return this.ae2;
        }
        set indicatorXAxis(a) {
            let b = this.indicatorXAxis;
            if (a != b) {
                this.ae2 = a;
                this.t5("IndicatorXAxis", b, this.indicatorXAxis);
            }
        }
        get ahz() {
            return this.ahw;
        }
        set ahz(a) {
            let b = this.ahz;
            if (a != b) {
                this.ahw = a;
                this.t5("IndicatorAxes", b, this.ahz);
            }
        }
        get ah1() {
            return this.ahy;
        }
        set ah1(a) {
            let b = this.ah1;
            if (a != b) {
                this.ahy = a;
                this.t5("IndicatorXAxes", b, this.ah1);
            }
        }
        get ah7() {
            return this.ah5;
        }
        set ah7(a) {
            let b = this.ah7;
            if (+a != +b) {
                this.ah5 = a;
                this.t5("XAxisMinimumValue", b, this.ah7);
            }
        }
        get ah6() {
            return this.ah4;
        }
        set ah6(a) {
            let b = this.ah6;
            if (+a != +b) {
                this.ah4 = a;
                this.t5("XAxisMaximumValue", b, this.ah6);
            }
        }
        get xAxisBreaks() {
            return this.ah2;
        }
    }
    FinancialChart.$t = /*@__PURE__*/ markType(FinancialChart, 'FinancialChart', XYChart.$);
    FinancialChart.ajp = 0;
    FinancialChart.all = "XAxisEnhancedIntervalPreferMoreCategoryLabels";
    FinancialChart.alw = "YAxisEnhancedIntervalPreferMoreCategoryLabels";
    return FinancialChart;
})();
/**
 * @hidden
 */
export let FinancialChartToolbar = /*@__PURE__*/ (() => {
    class FinancialChartToolbar extends TemplatedHtmlControl {
        bg(a) {
            let b = a.querySelectorAll(".financialChartToolbarArea");
            if (b != null && b.length > 0) {
                this.g = b[0];
                if (!this.al) {
                    this.g.hide();
                }
            }
            let c = a.querySelectorAll(".financialChartIndicatorMenu");
            if (c != null && c.length > 0) {
                this.q.g = c[0];
            }
            let d = a.querySelectorAll(".financialChartRangeSelector");
            if (d != null && d.length > 0) {
                this.s.g = d[0];
            }
            let e = a.querySelectorAll(".financialChartTypePicker");
            if (e != null && e.length > 0) {
                this.aa.g = e[0];
            }
        }
        bl(a) {
            this.q.u(a);
            this.aa.u(a);
        }
        constructor(a, b) {
            super("financialChartToolbar", b, "");
            this.o = null;
            this.r = null;
            this.z = null;
            this.p = null;
            this.w = null;
            this.aq = dateMaxValue();
            this.ap = dateMinValue();
            this.ao = dateMaxValue();
            this.an = dateMinValue();
            this.rangeChanged = null;
            this.chartTypeChanged = null;
            this.trendLineTypeChanged = null;
            this.volumeTypeChanged = null;
            this.indicatorTypesChanged = null;
            this.overlayTypesChanged = null;
            this.x = 0;
            this.ah = 0;
            this.ab = 0;
            this.ad = null;
            this.af = null;
            this.t = null;
            this.ak = false;
            this.o = a;
            this.w = new FinancialChartToolbarViewModel();
            this.s = new FinancialChartRangeSelector(a != null ? a.aj1 : null);
            this.aa = new FinancialChartTypePicker(a != null ? a.ajy : null);
            this.q = new FinancialChartIndicatorMenu(1, a != null ? a.ajz : null);
        }
        get s() {
            return this.r;
        }
        set s(a) {
            let b = this.s;
            if (a != b) {
                this.r = a;
                this.bm("RangeSelector", b, this.s);
            }
        }
        get aa() {
            return this.z;
        }
        set aa(a) {
            let b = this.aa;
            if (a != b) {
                this.z = a;
                this.bm("ChartTypePicker", b, this.aa);
            }
        }
        get q() {
            return this.p;
        }
        set q(a) {
            let b = this.q;
            if (a != b) {
                this.p = a;
                this.bm("IndicatorMenu", b, this.q);
            }
        }
        bm(a, b, c) {
            switch (a) {
                case "RangeStart":
                    if (this.s != null) {
                        this.s.t = this.as;
                    }
                    break;
                case "RangeEnd":
                    if (this.s != null) {
                        this.s.s = this.ar;
                    }
                    break;
                case "SelectionStart":
                    if (this.s != null) {
                        this.s.v = this.au;
                    }
                    break;
                case "SelectionEnd":
                    if (this.s != null) {
                        this.s.u = this.at;
                    }
                    break;
                case "RangeSelector":
                    let d = b;
                    if (d != null) {
                        d.rangeChanged = delegateRemove(d.rangeChanged, runOn(this, this.bj));
                    }
                    if (this.s != null) {
                        this.s.t = this.as;
                        this.s.s = this.ar;
                        this.s.o = this.u;
                        this.s.v = this.au;
                        this.s.u = this.at;
                        let e = this.s;
                        e.rangeChanged = delegateCombine(e.rangeChanged, runOn(this, this.bj));
                    }
                    break;
                case "ChartTypePicker":
                    let f = b;
                    if (f != null) {
                        f.selectionChanged = delegateRemove(f.selectionChanged, runOn(this, this.bi));
                    }
                    if (this.aa != null) {
                        this.aa.w = this.y;
                        let g = this.aa;
                        g.selectionChanged = delegateCombine(g.selectionChanged, runOn(this, this.bi));
                    }
                    break;
                case "ChartType":
                    if (this.aa != null) {
                        this.aa.w = this.y;
                    }
                    break;
                case "RangeSelectorOptions":
                    if (this.s != null) {
                        this.s.o = this.u;
                    }
                    break;
                case "IsToolbarVisible":
                    if (this.g == null) {
                        break;
                    }
                    if (this.al) {
                        this.g.show();
                    }
                    else {
                        this.g.hide();
                    }
                    break;
                case "IndicatorMenu":
                    let h = typeCast(FinancialChartIndicatorMenu.$, b);
                    if (h != null) {
                        h.selectionChanged = delegateRemove(h.selectionChanged, runOn(this, this.bh));
                    }
                    if (this.q != null) {
                        let i = this.q;
                        i.selectionChanged = delegateCombine(i.selectionChanged, runOn(this, this.bh));
                    }
                    break;
                case "IndicatorTypes":
                    if (this.indicatorTypesChanged != null) {
                        this.indicatorTypesChanged(this, EventArgs.empty);
                    }
                    break;
                case "OverlayTypes":
                    if (this.overlayTypesChanged != null) {
                        this.overlayTypesChanged(this, EventArgs.empty);
                    }
                    break;
                case "TrendLineType":
                    if (this.trendLineTypeChanged != null) {
                        this.trendLineTypeChanged(this, EventArgs.empty);
                    }
                    break;
                case "VolumeType":
                    if (this.volumeTypeChanged != null) {
                        this.volumeTypeChanged(this, EventArgs.empty);
                    }
                    break;
            }
        }
        bh(a, b) {
            this.ag = this.q.z;
            this.ae = this.q.y;
            this.ai = this.q.aa;
            this.ac = this.q.x;
        }
        bi(a, b) {
            this.y = this.aa.w;
            if (this.chartTypeChanged != null) {
                this.chartTypeChanged(this, b);
            }
        }
        bj(a, b) {
            this.au = this.s.v;
            this.at = this.s.u;
            if (this.rangeChanged != null) {
                this.rangeChanged(this, b);
            }
        }
        v() {
            let a = new FinancialChartToolbarContext();
            a.container = this.d;
            a.vm = this.w;
            a.vm.financialChartIndicatorMenu = ((() => {
                let $ret = new FinancialChartIndicatorMenuContext();
                $ret.vm = this.q.p;
                return $ret;
            })());
            a.vm.financialChartTypePicker = ((() => {
                let $ret = new FinancialChartTypePickerContext();
                $ret.vm = this.aa.p;
                return $ret;
            })());
            a.vm.financialChartRangeSelector = ((() => {
                let $ret = new FinancialChartRangeSelectorContext();
                $ret.vm = this.s.q;
                return $ret;
            })());
            return a;
        }
        l(a) {
            super.l(a);
            if (a == null) {
                return;
            }
            this.s.l(a);
            this.aa.l(a);
            this.q.l(a);
            this.bk();
        }
        bk() {
        }
        get au() {
            return this.aq;
        }
        set au(a) {
            let b = this.au;
            if (+a != +b) {
                this.aq = a;
                this.bm("SelectionStart", b, this.au);
            }
        }
        get at() {
            return this.ap;
        }
        set at(a) {
            let b = this.at;
            if (+a != +b) {
                this.ap = a;
                this.bm("SelectionEnd", b, this.at);
            }
        }
        get as() {
            return this.ao;
        }
        set as(a) {
            let b = this.as;
            if (+a != +b) {
                this.ao = a;
                this.bm("RangeStart", b, this.as);
            }
        }
        get ar() {
            return this.an;
        }
        set ar(a) {
            let b = this.ar;
            if (+a != +b) {
                this.an = a;
                this.bm("RangeEnd", b, this.ar);
            }
        }
        bn() {
            if (this.s != null) {
                this.s.ab();
            }
        }
        get y() {
            return this.x;
        }
        set y(a) {
            let b = this.y;
            if (a != b) {
                this.x = a;
                this.bm("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.y));
            }
        }
        get ai() {
            return this.ah;
        }
        set ai(a) {
            let b = this.ai;
            if (a != b) {
                this.ah = a;
                this.bm("TrendLineType", enumGetBox(TrendLineType_$type, b), enumGetBox(TrendLineType_$type, this.ai));
            }
        }
        get ac() {
            return this.ab;
        }
        set ac(a) {
            let b = this.ac;
            if (a != b) {
                this.ab = a;
                this.bm("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.ac));
            }
        }
        get ae() {
            return this.ad;
        }
        set ae(a) {
            let b = this.ae;
            if (!FinancialChartToolbar.am(b, a)) {
                this.ad = a;
                this.bm("IndicatorTypes", b, this.ae);
            }
        }
        get ag() {
            return this.af;
        }
        set ag(a) {
            let b = this.ag;
            if (!FinancialChartToolbar.am(b, a)) {
                this.af = a;
                this.bm("OverlayTypes", b, this.ag);
            }
        }
        static am(a, b) {
            if (a == b) {
                return true;
            }
            if ((a == null && b != null) || (a != null && b == null)) {
                return false;
            }
            if (a.count != b.count) {
                return false;
            }
            for (let c of fromEn(a)) {
                if (!b.contains(c)) {
                    return false;
                }
            }
            return true;
        }
        aj() {
            return ((() => {
                let $ret = new FinancialChartToolbarVisualData();
                $ret.rangeSelector = this.s == null ? null : this.s.r();
                return $ret;
            })());
        }
        get u() {
            return this.t;
        }
        set u(a) {
            let b = this.u;
            if (a != b) {
                this.t = a;
                this.bm("RangeSelectorOptions", b, this.u);
            }
        }
        get al() {
            return this.ak;
        }
        set al(a) {
            let b = this.al;
            if (a != b) {
                this.ak = a;
                this.bm("IsToolbarVisible", b, this.al);
            }
        }
    }
    FinancialChartToolbar.$t = /*@__PURE__*/ markType(FinancialChartToolbar, 'FinancialChartToolbar', TemplatedHtmlControl.$);
    return FinancialChartToolbar;
})();
/**
 * @hidden
 */
export let FinancialChartRangeSelector = /*@__PURE__*/ (() => {
    class FinancialChartRangeSelector extends TemplatedHtmlControl {
        get v() {
            return this.q.selectionStart;
        }
        set v(a) {
            this.q.selectionStart = a;
        }
        get u() {
            return this.q.selectionEnd;
        }
        set u(a) {
            this.q.selectionEnd = a;
        }
        get t() {
            return this.q.rangeStart;
        }
        set t(a) {
            this.q.rangeStart = a;
        }
        get s() {
            return this.q.rangeEnd;
        }
        set s(a) {
            this.q.rangeEnd = a;
        }
        ab() {
            if (this.q.onPropertiesChanged()) {
                this.p.g(this.q);
            }
        }
        constructor(a) {
            super("financialChartRangeSelector", a, "");
            this.q = null;
            this.rangeChanged = null;
            this.p = null;
            this.p = new FinancialChartRangeSelectorView();
            this.q = new FinancialChartRangeSelectorViewModel();
            this.q.onRangeChanged = runOn(this, this.z);
            this.p.c = this.q;
        }
        l(a) {
            super.l(a);
            this.p.f(this.d, this.q);
        }
        z() {
            if (this.rangeChanged != null) {
                this.rangeChanged(this, EventArgs.empty);
            }
        }
        r() {
            return this.p.d(this.g);
        }
        get o() {
            return this.q.options;
        }
        set o(a) {
            let b = !FinancialChartToolbar.am(this.q.options, a);
            if (b) {
                this.q.options = a;
                this.aa();
            }
        }
        aa() {
            let a = false;
            if (this.q != null) {
                a = this.q.p();
            }
            if (this.p != null) {
                this.p.i(this.o);
                if (a) {
                    if (this.q.notifyChanged != null) {
                        this.q.notifyChanged();
                    }
                }
            }
        }
    }
    FinancialChartRangeSelector.$t = /*@__PURE__*/ markType(FinancialChartRangeSelector, 'FinancialChartRangeSelector', TemplatedHtmlControl.$);
    FinancialChartRangeSelector.x = 0;
    return FinancialChartRangeSelector;
})();
