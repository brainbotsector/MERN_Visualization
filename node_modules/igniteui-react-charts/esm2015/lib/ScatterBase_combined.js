/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { MarkerSeries } from "./MarkerSeries";
import { ISupportsErrorBars_$type } from "./ISupportsErrorBars";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { ScatterAxisInfoCache } from "./ScatterAxisInfoCache";
import { NumericXAxis } from "./NumericXAxis";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { Series } from "./Series";
import { TrendLineType_$type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { ScatterItemSearchMode_$type } from "./ScatterItemSearchMode";
import { ScatterErrorBarSettings } from "./ScatterErrorBarSettings";
import { HighlightingInfo } from "igniteui-react-core";
import { ScatterFrame } from "./ScatterFrame";
import { Base, runOn, delegateCombine, enumGetBox, Number_$type, typeCast, fromEnum, Point_$type, markType, markDep, PointUtil } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { Clipper } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { Dictionary$2 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { GeometryUtil } from "igniteui-react-core";
import { HashPool$2 } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { TrendResolutionParams } from "./TrendResolutionParams";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
import { Thickness } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { AssigningScatterStyleEventArgs } from "./AssigningScatterStyleEventArgs";
import { AssigningScatterMarkerStyleEventArgs } from "./AssigningScatterMarkerStyleEventArgs";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { ErrorBarsHelper } from "./ErrorBarsHelper";
import { PathGeometry } from "igniteui-react-core";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core";
import { boxArray$1, arrayShallowClone } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { DataTemplateMeasureInfo } from "igniteui-react-core";
import { NumericMarkerManager } from "./NumericMarkerManager";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let ScatterBase = /*@__PURE__*/ (() => {
    class ScatterBase extends MarkerSeries {
        ci() {
            return new ScatterBaseView(this);
        }
        n4() {
            super.n4();
            this.xAxis = null;
            this.yAxis = null;
        }
        px(a) {
            super.px(a);
            this.w6 = a;
        }
        get_fh() {
            return true;
        }
        ag() {
            return [this.xAxis, this.yAxis];
        }
        j5(a, b) {
            let c = this.mh(b);
            if (c == ScatterBase.$$p[12]) {
                return this.j6(a, b, this.y1);
            }
            if (c == ScatterBase.$$p[16]) {
                return this.j6(a, b, this.y9);
            }
            if (c == ScatterBase.$$p[1]) {
                return this.j6(a, b, this.yl);
            }
            if (c == ScatterBase.$$p[2]) {
                return this.j6(a, b, this.yn);
            }
            return null;
        }
        li(a) {
            let b = this.mh(a);
            if (b == ScatterBase.$$p[12]) {
                return this.y1;
            }
            if (b == ScatterBase.$$p[16]) {
                return this.y9;
            }
            if (b == ScatterBase.$$p[1]) {
                return this.yl;
            }
            if (b == ScatterBase.$$p[2]) {
                return this.yn;
            }
            return super.li(a);
        }
        dz(a, b, c, d) {
            if (!this.hasMarkers) {
                return false;
            }
            let e = this.xAxis;
            let f = new ScalerParams(1, this.c1.vh, this.u9, e.ch);
            f.c = this.getEffectiveViewport1(this.cl);
            let g = this.yAxis;
            let h = new ScalerParams(1, this.c1.vh, this.u9, g.ch);
            h.c = this.getEffectiveViewport1(this.cl);
            a.clear();
            this.vl.ci((i) => {
                if (i._visibility == 0) {
                    let j = new SeriesPointOfInterest();
                    let k = i.n;
                    let l = i.o;
                    if (k < this.u9.left || k > this.u9.right || l < this.u9.top || l > this.u9.bottom) {
                        return;
                    }
                    j.b = e.em(k, f);
                    j.c = g.em(l, h);
                    j.a = i.content;
                    a.add(j);
                }
            });
            return true;
        }
        bt() {
            if (this.bu == 0) {
                if (this.yh <= 2000) {
                    return 1;
                }
                else {
                    return super.bt();
                }
            }
            else {
                return super.bt();
            }
        }
        u7(a) {
            if (!this.hasMarkers || !this.vr()) {
                return Rect.empty;
            }
            let b = this.vl.b1(this.up(a));
            if (b != null) {
                return this.vl.cs(b);
            }
            return Rect.empty;
        }
        gf(a, b) {
            if (this.vs(a, b)) {
                return true;
            }
            return false;
        }
        constructor() {
            super();
            this.w5 = null;
            this.xo = null;
            this.xp = null;
            this.aas = null;
            this.aat = null;
            this.xe = 1;
            this.wv = null;
            this.ww = null;
            this.xb = null;
            this.xd = null;
            this.w9 = null;
            this.xu = false;
            this.xt = false;
            this.xm = null;
            this.xn = null;
            this.assigningScatterStyle = null;
            this.assigningScatterMarkerStyle = null;
            this.xi = null;
            this.xc = null;
            this.w8 = null;
            this.xs = true;
            this.x7 = 0;
            this.x8 = 0;
            this.x9 = 0;
            this.ya = 0;
            this.xf = this.xg();
            this.xi = new ScatterSeriesRenderManager();
            this.xc = new ScatterFrame();
            this.aat = Rect.empty;
            this.aas = Rect.empty;
        }
        get xq() {
            return this.xo;
        }
        set xq(a) {
            if (this.xo != a) {
                let b = this.xq;
                this.xo = a;
                this.raisePropertyChanged("XColumn", b, this.xq);
            }
        }
        get xr() {
            return this.xp;
        }
        set xr(a) {
            if (this.xp != a) {
                let b = this.xr;
                this.xp = a;
                this.raisePropertyChanged("YColumn", b, this.xr);
            }
        }
        fv() {
            return this.highlightedItemsSource != null || (this.yl != null && this.yn != null);
        }
        x5() {
            return false;
        }
        hb() {
            let a = super.hb();
            {
                let b = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.ad = "YMemberPath";
                    $ret.p = true;
                    $ret.y = "HighlightedYMemberPath";
                    $ret.q = true;
                    return $ret;
                })());
                b.valueResolving = delegateCombine(b.valueResolving, runOn(this, this.zg));
                a.add(b);
            }
            {
                let c = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.ad = "XMemberPath";
                    $ret.p = true;
                    $ret.y = "HighlightedXMemberPath";
                    $ret.q = true;
                    return $ret;
                })());
                c.valueResolving = delegateCombine(c.valueResolving, runOn(this, this.zf));
                a.add(c);
            }
            if (this.x5()) {
                let d = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.r = true;
                    $ret.ad = "DashArray";
                    $ret.p = true;
                    $ret.x = ((() => {
                        let $ret = new DoubleCollection();
                        $ret.add(5);
                        $ret.add(5);
                        return $ret;
                    })());
                    $ret.q = true;
                    return $ret;
                })());
                a.add(d);
            }
            if (!this.x5()) {
                let e = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.r = true;
                    $ret.ad = "Brush";
                    $ret.p = true;
                    $ret.y = "ActualBrush";
                    $ret.q = true;
                    return $ret;
                })());
                e.valueResolving = delegateCombine(e.valueResolving, runOn(this, this.qu));
                a.add(e);
            }
            if (!this.x5()) {
                let f = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.r = true;
                    $ret.ad = "Outline";
                    $ret.p = true;
                    $ret.y = "ActualOutline";
                    $ret.q = true;
                    return $ret;
                })());
                f.valueResolving = delegateCombine(f.valueResolving, runOn(this, this.qu));
                a.add(f);
            }
            return a;
        }
        zf(a, b) {
            if (this.yl != null) {
                b.value = this.yl;
                return;
            }
            b.value = this.y1;
        }
        zg(a, b) {
            if (this.yn != null) {
                b.value = this.yn;
                return;
            }
            b.value = this.y9;
        }
        get aap() {
            return this.c(ScatterBase.z0);
        }
        set aap(a) {
            this.h(ScatterBase.z0, a);
        }
        get GetErrorBarsXAxis() {
            return this.xAxis;
        }
        get GetErrorBarsYAxis() {
            return this.yAxis;
        }
        o6() {
            super.o6();
            if (this.xAxis != null) {
                this.xAxis.h8(false);
            }
            if (this.yAxis != null) {
                this.yAxis.h8(false);
            }
        }
        p5(a, b, c, d) {
            super.p5(a, b, c, d);
            if (this.w6.c0.g$b(a, b, c, d)) {
                this.qm(false);
                this.ph();
            }
            switch (b) {
                case ScatterBase.$$p[10]:
                case ScatterBase.$$p[14]:
                case ScatterBase.$$p[11]:
                case ScatterBase.$$p[15]:
                    this.pb();
                    break;
                case "FastItemsSource":
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        c.deregisterColumn(this.xq);
                        c.deregisterColumn(this.xr);
                        this.xq = null;
                        this.xr = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        this.xq = this.da(this.y1);
                        this.xr = this.da(this.y9);
                    }
                    if ((this.yAxis != null && !this.yAxis.c1()) || (this.xAxis != null && !this.xAxis.c1())) {
                        this.qm(this.f0 && c != null);
                    }
                    break;
                case ScatterBase.$$p[9]:
                    if (c != null) {
                        c.b0(this);
                    }
                    if (d != null) {
                        d.ct(this);
                    }
                    if ((this.xAxis != null && !this.xAxis.c1()) || (d == null && c != null)) {
                        this.qm(false);
                    }
                    this.ph();
                    break;
                case ScatterBase.$$p[13]:
                    if (c != null) {
                        c.b0(this);
                    }
                    if (d != null) {
                        d.ct(this);
                    }
                    if ((this.yAxis != null && !this.yAxis.c1()) || (d == null && c != null)) {
                        this.qm(false);
                    }
                    this.ph();
                    break;
                case ScatterBase.$$p[12]:
                    if (this.dd != null) {
                        this.dd.deregisterColumn(this.xq);
                        this.xq = this.da(this.y1);
                    }
                    break;
                case "XColumn":
                    this.w6.c0.g$i();
                    if (this.xAxis != null && !this.xAxis.c1()) {
                        this.qm(this.f0 && this.dv);
                    }
                    break;
                case ScatterBase.$$p[16]:
                    if (this.dd != null) {
                        this.dd.deregisterColumn(this.xr);
                        this.xr = this.da(this.y9);
                    }
                    break;
                case "YColumn":
                    this.w6.c0.g$i();
                    if (this.yAxis != null && !this.yAxis.c1()) {
                        this.qm(this.f0 && this.dv);
                    }
                    break;
                case ScatterBase.$$p[7]:
                    this.qm(false);
                    this.ph();
                    break;
                case ScatterBase.$$p[8]:
                    this.qm(false);
                    this.ph();
                    break;
                case "TransitionProgress":
                    this.xd.c(this.i6, this.xb, this.w9);
                    this.zb();
                    try {
                        if (this.dt(this.cl)) {
                            return;
                        }
                        if ((Math.round(this.i6 * 100000) / 100000) == 1) {
                            this.zx(this.w9, this.w6);
                        }
                        else {
                            this.zx(this.xd, this.w6);
                        }
                        if (this.c1 != null) {
                            this.c1.p6(this);
                        }
                    }
                    finally {
                        this.zy();
                    }
                    break;
                case "TrendLineBrush":
                    this.qb(b);
                    break;
                case ScatterBase.$$p[0]:
                    if (this.w7 != null) {
                        this.w7.r = this;
                    }
                    this.qm(false);
                    this.ph();
                    break;
                case "TrendLineType":
                    this.ph();
                    break;
                case ScatterBase.$$p[4]:
                    this.xu = this.x2();
                    this.qm(false);
                    break;
                case ScatterBase.$$p[3]:
                    this.xt = this.x1();
                    this.qm(false);
                    break;
                case ScatterBase.$$p[5]:
                    this.xf = this.xg();
                    break;
            }
        }
        x2() {
            return this.xy;
        }
        x1() {
            return this.xx;
        }
        xw(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        xv(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        zy() {
            this.aas = Rect.empty;
            this.aat = Rect.empty;
        }
        zb() {
            let a = this.getViewInfo(this.aas, this.aat);
            this.aas = a.p0;
            this.aat = a.p1;
        }
        x0(a, b) {
            if (b != 3) {
                return true;
            }
            if (a == null) {
                return true;
            }
            if (this.y1 == a || this.y9 == a) {
                return true;
            }
            return false;
        }
        oc(a, b, c, d) {
            let e = false;
            if (!this.x0(d, a)) {
                return;
            }
            this.w6.c0.g$e(a, b, c, d);
            if (this.xAxis != null && !this.xAxis.c1()) {
                e = true;
            }
            if (this.yAxis != null && !this.yAxis.c1()) {
                e = true;
            }
            if (a == 0 || a == 2 || a == 3 || a == 4) {
                this.xs = true;
            }
            else if (a == 1) {
                for (let f = b; f < b + c; f++) {
                    this.x7 += this.xq.item(f);
                    this.x8 += this.xr.item(f);
                }
                this.x9 = this.x7 / this.xq.count;
                this.ya = this.x8 / this.xr.count;
            }
            if (e) {
                this.qm(true);
            }
        }
        zp(a) {
            this.zq(a, null);
        }
        zq(a, b) {
            let c = this.xq != null ? this.xq.count : 0;
            let d = this.xr != null ? this.xr.count : 0;
            let e = Math.min(c, d);
            if (e <= this.yh) {
                a.m.clear();
                let f = new List$1(OwnedPoint.$, 0);
                for (let g of fromEnum(a.u.values)) {
                    f.add(g);
                }
                let h = this.dd;
                f.aa((i, j) => {
                    let k = h.indexOf(i.a);
                    let l = h.indexOf(j.a);
                    if (k < l) {
                        return -1;
                    }
                    if (k > l) {
                        return 1;
                    }
                    return 0;
                });
                if (b != null) {
                    b.i = a.m;
                }
                for (let i of fromEnum(f)) {
                    if (h.indexOf(i.a) >= 0) {
                        if (b != null) {
                            b.j(i.c);
                        }
                        else {
                            a.m.add({ $type: Point_$type, x: i.c.x, y: i.c.y });
                        }
                    }
                }
            }
        }
        aq(a) {
            if (a != null && a == this.xAxis && this.xq != null) {
                return new AxisRange(this.xq.minimum, this.xq.maximum);
            }
            if (a != null && a == this.yAxis && this.xr != null) {
                return new AxisRange(this.xr.minimum, this.xr.maximum);
            }
            return null;
        }
        j2(a) {
            let b = this.jj(a);
            if (this.dd != null && b >= 0 && b < this.dd.count) {
                return this.dd.item(b);
            }
            return null;
        }
        get xf() {
            return this.xe;
        }
        set xf(a) {
            let b = this.xe;
            this.xe = a;
            if (b != this.xe) {
                this.raisePropertyChanged("ActualItemSearchMode", enumGetBox(ScatterItemSearchMode_$type, b), enumGetBox(ScatterItemSearchMode_$type, this.xe));
            }
        }
        xg() {
            if (this.xh != 0) {
                return this.xh;
            }
            return this.xz ? 4 : 1;
        }
        jj(a) {
            let b = truncate(Math.round(this.h6(a)));
            return b;
        }
        h6(a) {
            switch (this.xf) {
                case 1: return this.yd(a);
                case 3: return this.ye(a);
                case 2: return this.yb(a);
                case 4: return this.yc(a);
            }
            return -1;
        }
        yc(a) {
            return this.yf(a, false);
        }
        yb(a) {
            let b = this.up(a);
            let c = b.x;
            let d = b.y;
            if (this.dd == null || this.xAxis == null || this.yAxis == null || this.xq == null || this.xr == null) {
                return -1;
            }
            if (this.dd.count > this.yg) {
                return -1;
            }
            this.ze();
            let e = this.wv;
            let f = this.ww;
            if (e == null || f == null) {
                return -1;
            }
            let g = 1.7976931348623157E+308;
            let h = -1;
            for (let i = 0; i < this.xq.count; i++) {
                let j = e[i];
                let k = f[i];
                let l = (c - j) * (c - j) + (d - k) * (d - k);
                if (l < g) {
                    g = l;
                    h = i;
                }
            }
            return h;
        }
        ze() {
            let a = this.cl.by;
            let b = this.cl.bx;
            let c = this.getEffectiveViewport();
            if (this.w5 == null) {
                return;
            }
            let d = new ScalerParams(0, a, b, this.w5.d, c);
            let e = ((() => {
                let $ret = new ScalerParams(0, a, b, this.w5.e, c);
                $ret.b = this.id();
                return $ret;
            })());
            if (this.wv == null || this.ww == null) {
                let f = arrayShallowClone(this.xq.asArray());
                let g = arrayShallowClone(this.xr.asArray());
                this.xAxis.hn(boxArray$1(f), 0, f.length, d);
                this.yAxis.hn(boxArray$1(g), 0, g.length, e);
                this.wv = f;
                this.ww = g;
            }
        }
        get_xz() {
            return false;
        }
        get xz() {
            return this.get_xz();
        }
        yf(a, b) {
            if (!this.xz) {
                return -1;
            }
            let c = { $type: Point_$type, x: 0, y: 0 };
            let d = true;
            let e = this.xa();
            if (e == null) {
                return -1;
            }
            if (e.m == null) {
                return -1;
            }
            if (this.dd == null || this.dd.count > this.yg) {
                return -1;
            }
            this.ze();
            let f = this.wv;
            let g = this.ww;
            if (f == null || g == null) {
                return -1;
            }
            let h = this.up(a);
            let i = 1.7976931348623157E+308;
            let j = -1;
            for (let k = 0; k < this.wv.length; k++) {
                let l = { $type: Point_$type, x: this.wv[k], y: this.ww[k] };
                if (k > 0) {
                    if (!b || e.j.containsKey(this.dd.item(k)) || e.j.containsKey(this.dd.item(k - 1))) {
                        let m = GeometryUtil.d(h, c, l);
                        if (m < i) {
                            i = m;
                            j = k;
                        }
                    }
                }
                c = l;
            }
            if (j >= 0) {
                let n = { $type: Point_$type, x: this.wv[j], y: this.ww[j] };
                let o = { $type: Point_$type, x: this.wv[j - 1], y: this.ww[j - 1] };
                if (!b || (e.j.containsKey(this.dd.item(j)) && e.j.containsKey(this.dd.item(j - 1)))) {
                    let p = GeometryUtil.i(h, o, n);
                    return (j - 1) + p;
                }
                else if (e.j.containsKey(this.dd.item(j))) {
                    return j;
                }
                else {
                    return j - 1;
                }
            }
            return -1;
        }
        ye(a) {
            return this.yf(a, true);
        }
        yd(a) {
            let b = null;
            let c = 1.7976931348623157E+308;
            let d = this.up(a);
            let e = d.x;
            let f = d.y;
            if (this.w6.c1.e > this.yg) {
                return -1;
            }
            this.w6.c8((g) => {
                if (g._visibility == 0) {
                    let h = this.w6.cs(g);
                    let i = h.left + h.width / 2;
                    let j = h.top + h.height / 2;
                    let k = (e - i) * (e - i) + (f - j) * (f - j);
                    if (k < c) {
                        c = k;
                        b = g;
                    }
                }
            });
            if (b != null) {
                return b.ak;
            }
            return -1;
        }
        uu(a, b, c) {
            if (this.xAxis == null || this.yAxis == null || this.xq == null || this.xr == null) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            let d = this.cl.by;
            let e = this.cl.bx;
            let f = this.getEffectiveViewport();
            let g = new ScalerParams(0, d, e, this.xAxis.ch, f);
            let h = ((() => {
                let $ret = new ScalerParams(0, d, e, this.yAxis.ch, f);
                $ret.b = this.id();
                return $ret;
            })());
            if (b) {
                let i = this.h6(a);
                if (i == -1) {
                    return { $type: Point_$type, x: NaN, y: NaN };
                }
                let j = truncate(Math.floor(i));
                let k = truncate(Math.ceil(i));
                if (j < 0) {
                    j = 0;
                }
                if (k < 0) {
                    k = 0;
                }
                if (k > this.dd.count - 1) {
                    k = this.dd.count - 1;
                }
                if (j > this.dd.count - 1) {
                    j = this.dd.count - 1;
                }
                if (k == j) {
                    let l = this.xAxis.ej(this.xq.item(j), g);
                    let m = this.yAxis.ej(this.xr.item(j), h);
                    return { $type: Point_$type, x: l, y: m };
                }
                let n = i - Math.floor(i);
                let o = this.xAxis.ej(this.xq.item(j), g);
                let p = this.yAxis.ej(this.xr.item(j), h);
                let q = this.xAxis.ej(this.xq.item(k), g);
                let r = this.yAxis.ej(this.xr.item(k), h);
                let s = q - o;
                let t = r - p;
                return { $type: Point_$type, x: o + s * n, y: p + t * n };
            }
            else {
                let u = this.jj(a);
                if (u == -1) {
                    return { $type: Point_$type, x: NaN, y: NaN };
                }
                let v = this.xAxis.ej(this.xq.item(u), g);
                let w = this.yAxis.ej(this.xr.item(u), h);
                return { $type: Point_$type, x: v, y: w };
            }
        }
        fx(a) {
            let b = this.c1 != null ? this.c1.vh : Rect.empty;
            b = b.copy();
            let c = this.c1 != null ? this.c1.vw : Rect.empty;
            let d = new Rect(0, 0, 0, 1, 1);
            let e = this.u3(this.cl);
            let f = new ScalerParams(0, d, d, this.xAxis.ch, e);
            let g = ((() => {
                let $ret = new ScalerParams(0, d, d, this.yAxis.ch, e);
                $ret.b = this.id();
                return $ret;
            })());
            let h = !b.isEmpty && !c.isEmpty && this.dd != null ? this.dd.indexOf(a) : -1;
            let i = this.xAxis != null && this.xq != null && h < this.xq.count ? this.xAxis.ej(this.xq.item(h), f) : NaN;
            let j = this.yAxis != null && this.xr != null && h < this.xr.count ? this.yAxis.ej(this.xr.item(h), g) : NaN;
            if (!isNaN_(i)) {
                if (i < b.left + 0.1 * b.width) {
                    i = i + 0.4 * b.width;
                    b.x = i - 0.5 * b.width;
                }
                if (i > b.right - 0.1 * b.width) {
                    i = i - 0.4 * b.width;
                    b.x = i - 0.5 * b.width;
                }
            }
            if (!isNaN_(j)) {
                if (j < b.top + 0.1 * b.height) {
                    j = j + 0.4 * b.height;
                    b.y = j - 0.5 * b.height;
                }
                if (j > b.bottom - 0.1 * b.height) {
                    j = j - 0.4 * b.height;
                    b.y = j - 0.5 * b.height;
                }
            }
            if (this.ct != null) {
                this.ct.au(this.c1, b, true);
            }
            return h >= 0;
        }
        rj(a, b) {
            this.qm(false);
        }
        rk(a, b) {
            this.qm(false);
        }
        xa() {
            let a = this.w9;
            if (this.dr()) {
                if (this.c2.g) {
                    this.c2.t();
                }
                a = this.xd;
            }
            return a;
        }
        zc(a, b, c, d, e) {
            b.g = new Dictionary$2(Base.$, OwnedPoint.$, 1, c);
            let f = this.getEffectiveViewport1(a);
            let g = this.dd;
            let h;
            let i;
            let j = ((() => {
                let $ret = new ScalerParams(0, d, e, this.w5.d, f);
                $ret.c = this.getEffectiveViewport1(a);
                return $ret;
            })());
            let k = ((() => {
                let $ret = new ScalerParams(0, d, e, this.w5.e, f);
                $ret.c = this.getEffectiveViewport1(a);
                $ret.b = this.id();
                return $ret;
            })());
            let l = false;
            let m = 0;
            if (this.c1 != null) {
                if (this.c1.fx()) {
                    let n = this.c1.mp(d, j);
                    l = n.c;
                    m = n.d;
                }
            }
            for (let o = 0; o < c; o++) {
                h = this.xq.item(o);
                i = this.xr.item(o);
                let p = { $type: Point_$type, x: this.w5.a.ej(h, j), y: this.w5.b.ej(i, k) };
                if (l) {
                    if (p.x < e.left || p.x > e.right) {
                        if (p.x + m >= e.left && p.x + m <= e.right) {
                            p = { $type: Point_$type, x: p.x + m, y: i };
                        }
                    }
                }
                if (!isInfinity(p.x) && !isInfinity(p.y)) {
                    let q = g.item(o);
                    if (!b.g.containsKey(q)) {
                        let r = { $type: Point_$type, x: h, y: i };
                        let s = { $type: Point_$type, x: p.x, y: p.y };
                        b.g.addItem(q, ((() => {
                            let $ret = new OwnedPoint();
                            $ret.a = q;
                            $ret.b = r;
                            $ret.c = s;
                            return $ret;
                        })()));
                    }
                }
            }
        }
        zm(a, b) {
            this.wv = null;
            this.ww = null;
            a.j.clear();
            a.n.clear();
            a.h.clear();
            a.l.clear();
            a.i.clear();
            a.k.clear();
            let c = Math.min(this.xq != null ? this.xq.count : 0, this.xr != null ? this.xr.count : 0);
            let d = b.by;
            let e = b.bx;
            let f = this.getEffectiveViewport1(b);
            let g = new ScalerParams(0, d, e, this.xAxis.ch, f);
            g.c = this.getEffectiveViewport1(b);
            let h = ((() => {
                let $ret = new ScalerParams(0, d, e, this.yAxis.ch, f);
                $ret.b = this.id();
                return $ret;
            })());
            h.c = this.getEffectiveViewport1(b);
            if (c < 1) {
                return;
            }
            this.w5 = ((() => {
                let $ret = new ScatterAxisInfoCache();
                $ret.a = this.xAxis;
                $ret.b = this.yAxis;
                $ret.d = this.xAxis.ch;
                $ret.e = this.yAxis.ch;
                $ret.c = this.dd;
                return $ret;
            })());
            let i = b;
            if (c <= this.yh) {
                this.zc(i, a, c, d, e);
            }
            if (this.vr()) {
                b.cy.l(a.j, this.yh, d, e, this.hu);
            }
            let j = ((() => {
                let $ret = new Clipper(0, e, false);
                $ret.i = a.n;
                return $ret;
            })());
            let k = this.u1(b);
            let l = this.xAxis.em(k.left, g);
            let m = this.xAxis.em(k.right, g);
            b.c0.h(a.n, this.trendLineType, this.xq, this.xr, this.trendLinePeriod, (n) => this.xAxis.ej(n, g), (n) => this.yAxis.ej(n, h), ((() => {
                let $ret = new TrendResolutionParams();
                $ret.d = this.hu;
                $ret.h = e;
                $ret.i = d;
                return $ret;
            })()), j, l, m);
            this.zk(a, b);
        }
        n7(a, b) {
            super.n7(a, b);
            let c = b;
            c.c7(a);
        }
        get_ez() {
            return true;
        }
        xk(a, b, c) {
            return null;
        }
        xl(a, b, c) {
            let d = this.xa();
            let e = this.w6.b1(this.up(b));
            let f = -1;
            if (e == null) {
                if (a != null) {
                    f = this.dd.indexOf(a);
                }
                else {
                    return null;
                }
            }
            else {
                f = e.ak;
            }
            if (f == -1) {
                return null;
            }
            let g = new HighlightingInfo();
            g.i = this;
            g.g = f;
            g.f = f;
            g.c = false;
            g.d = true;
            if (c != null && c.g == g.g && c.f == g.f) {
                return c;
            }
            return g;
        }
        vb(a, b) {
            if (this.vn != 1 && this.vn != 13) {
                let c = this.vl.ct();
                let d = (c.width / 2) + (this.vu / 2);
                let e = (c.height / 2) + (this.vu / 2);
                let f = d;
                let g = d;
                let h = e;
                let i = e;
                if (a == 2 || a == 4) {
                    f = 0;
                }
                if (a == 2 || a == 3) {
                    g = 0;
                }
                if (b == 2 || b == 3) {
                    h = 0;
                }
                if (b == 2 || b == 4) {
                    i = 0;
                }
                return new Thickness(1, f, h, g, i);
            }
            return new Thickness(1, 0, 0, 0, 0);
        }
        xj(a, b, c) {
            let d = new HighlightingInfo();
            d.i = this;
            d.g = 0;
            d.f = this.dd.count - 1;
            d.c = true;
            if (c != null && c.g == d.g && c.f == d.f) {
                return c;
            }
            return d;
        }
        c6(a, b, c) {
            if (this.d1 && this.fk(this.bo) && !c) {
                let d = this.xk(a, b, this.xm);
                this.xm = d;
                return d;
            }
            else {
                let e = this.xj(a, b, this.xm);
                this.xm = e;
                return e;
            }
        }
        c7(a, b, c) {
            if (this.fk(this.bo) && !c) {
                let d = this.xl(a, b, this.xn);
                this.xn = d;
                return d;
            }
            else {
                let e = this.xj(a, b, this.xn);
                e.d = true;
                this.xn = e;
                return e;
            }
        }
        x4() {
            return (this.assigningScatterStyle != null && this.xu) || (this.bo != 1) || (this.cf != 1) || (this.ce != 1);
        }
        x3() {
            return (this.assigningScatterMarkerStyle != null && this.xt) || (this.bo != 1) || (this.cf != 1) || (this.ce != 1);
        }
        zx(a, b) {
            this.pt();
            let c = b.bx;
            this.w5 = ((() => {
                let $ret = new ScatterAxisInfoCache();
                $ret.a = this.xAxis;
                $ret.b = this.yAxis;
                $ret.d = this.xAxis.ch;
                $ret.e = this.yAxis.ch;
                return $ret;
            })());
            if (this.vr()) {
                b.cy.j(a.j, this.vt);
                if (this.x3()) {
                    this.zd(b, a);
                }
            }
            b.cp();
            let d = ((() => {
                let $ret = new Clipper(1, NaN, c.bottom, NaN, c.top, false);
                $ret.i = b.c0.g$j.an;
                return $ret;
            })());
            b.c0.g$h(a.n, d);
            this.zu(a, b);
        }
        wy(a, b) {
            return this.wz(a, b);
        }
        wz(a, b) {
            if (b < a || a < 0 || a > this.xq.count || b < 0 || b > this.xq.count) {
                return null;
            }
            let c = new Array((b - a) + 1);
            for (let d = a; d <= b; d++) {
                let e = d;
                c[d - a] = this.dd.item(d);
            }
            return c;
        }
        zd(a, b) {
            a.b6 = true;
            this.xi.ay(this, this.x3(), runOn(this, this.wy));
            let c = this.xi.d;
            let d = c != null;
            let e = this.getEffectiveViewport1(a);
            let f = this.dd == null ? 0 : this.dd.count;
            this.w6.ci((g) => {
                if (g._visibility == 0) {
                    let h = g.ak;
                    let i = g.content;
                    if (i == null) {
                        i = new DataContext();
                        g.content = i;
                    }
                    if (d) {
                        this.zh(h, f, a.q);
                    }
                    this.xi.ac(g, i);
                }
            });
        }
        zi(a, b, c) {
            let d = this.bo != 1;
            let e = this.cf != 1;
            let f = this.ce != 1;
            this.xi.a0(this.xi.b, a, b, false);
            this.xi.ab(this.hs);
            let g = this.xi.ax;
            let h = null;
            let i = null;
            let j = null;
            let k = this.dd;
            if (d && this.c1 != null) {
                h = this.c1.dj.getHighlightingInfo(this, k, g.z, g.y, false);
                g.c = h;
            }
            if (e && this.c1 != null) {
                h = this.c1.dk.getHighlightingInfo(this, k, g.z, g.y, false);
                g.d = h;
            }
            if (f && this.c1 != null) {
                h = this.c1.di.getHighlightingInfo(this, k, g.z, g.y, false);
                g.b = h;
            }
            g.h = c;
            this.zs(g);
            this.xi.z(this, h, i, j, c, d, e, f, a < 0);
        }
        zh(a, b, c) {
            let d = this.bo != 1;
            let e = this.cf != 1;
            let f = this.ce != 1;
            this.xi.a0(this.xi.d, a, b, true);
            this.xi.aa(this.hs);
            let g = this.xi.aw;
            let h = null;
            let i = null;
            let j = null;
            let k = this.dd;
            let l = null;
            let m = null;
            let n = null;
            if (d && this.c1 != null) {
                h = this.c1.dj.getHighlightingInfo(this, k, g.z, g.y, true);
                if (this.c1.dj.isCrossContextHighlight(this)) {
                    l = this.c1.dj.getHighlightingInfo(this, k, g.z, g.y, true);
                }
                g.c = h;
            }
            if (e && this.c1 != null) {
                i = this.c1.dk.getHighlightingInfo(this, k, g.z, g.y, true);
                if (i == null && this.be != null) {
                    i = this.c1.dk.getHighlightingInfo(this.be, this.be.dd, g.z, g.y, true);
                }
                if (this.c1.dk.isCrossContextHighlight(this)) {
                    m = this.c1.dk.getHighlightingInfo(this, k, g.z, g.y, true);
                }
                g.d = i;
            }
            if (f && this.c1 != null) {
                j = this.c1.di.getHighlightingInfo(this, k, g.z, g.y, true);
                if (this.c1.di.isCrossContextHighlight(this)) {
                    n = this.c1.di.getHighlightingInfo(this, k, g.z, g.y, true);
                }
                g.d = i;
            }
            g.h = c;
            this.zr(g);
            this.xi.y(this, h, i, j, c, d, e, f, g.v, this.c1.dj.totalHighWaterMark, g.x, this.c1.dk.totalHighWaterMark, g.t, this.c1.di.totalHighWaterMark);
        }
        zs(a) {
            if (this.assigningScatterStyle != null && this.xu) {
                this.assigningScatterStyle(this, a);
            }
        }
        zr(a) {
            if (this.assigningScatterMarkerStyle != null && this.xt) {
                this.assigningScatterMarkerStyle(this, a);
            }
        }
        zk(a, b) {
            let c = new ErrorBarsHelper(this, b);
            if (this.w7 == null) {
                return;
            }
            let d = this.w7.u;
            let e = this.w7.v;
            let f = 0;
            let g = 0;
            let h = 0;
            let i = 0;
            for (let j of fromEnum(a.j.keys)) {
                let k = a.j.item(j);
                if (d != null) {
                    switch (d.getCalculatorType()) {
                        case 1:
                            let l = this.zn(k, c, d, h, i, true);
                            h = l.p3;
                            i = l.p4;
                            break;
                        case 0:
                            let m = this.zl(k, c, d, h, i, true);
                            h = m.p3;
                            i = m.p4;
                            break;
                        case 2:
                            let n = this.zj(k, c, d, j, h, i, true);
                            h = n.p4;
                            i = n.p5;
                            break;
                        case 3:
                            let o = this.zo(c, d, f, h, i, true);
                            f = o.p2;
                            h = o.p3;
                            i = o.p4;
                            break;
                        case 4:
                            let p = this.zl(k, c, d, h, i, true);
                            h = p.p3;
                            i = p.p4;
                            break;
                    }
                    ;
                    let q = new OwnedPoint();
                    q.c = c.l(d, this.w5.a, k.c, f);
                    q.a = k.a;
                    a.h.addItem(j, q);
                    a.i.addItem(j, [h, i]);
                }
                if (e != null) {
                    switch (e.getCalculatorType()) {
                        case 1:
                            let r = this.zn(k, c, e, h, i, false);
                            h = r.p3;
                            i = r.p4;
                            break;
                        case 0:
                            let s = this.zl(k, c, e, h, i, false);
                            h = s.p3;
                            i = s.p4;
                            break;
                        case 2:
                            let t = this.zj(k, c, e, j, h, i, false);
                            h = t.p4;
                            i = t.p5;
                            break;
                        case 3:
                            let u = this.zo(c, e, g, h, i, false);
                            g = u.p2;
                            h = u.p3;
                            i = u.p4;
                            break;
                        case 4:
                            let v = this.zl(k, c, e, h, i, false);
                            h = v.p3;
                            i = v.p4;
                            break;
                    }
                    ;
                    let w = new OwnedPoint();
                    w.c = c.m(e, this.w5.b, k.c, g);
                    w.a = k.a;
                    a.l.addItem(j, w);
                    a.k.addItem(j, [h, i]);
                }
            }
        }
        zn(a, b, c, d, e, f) {
            if (f) {
                let g;
                let h, i;
                i = this.w5.a;
                if (this.w7.s == 0) {
                    g = a.c.x;
                    h = this.w5.a;
                }
                else {
                    g = a.c.y;
                    h = this.w5.b;
                }
                let j = b.f(g, c, h, i, d, e);
                d = j.p4;
                e = j.p5;
            }
            else {
                let k;
                let l, m;
                m = this.w5.b;
                if (this.w7.t == 0) {
                    k = a.c.x;
                    l = this.w5.a;
                }
                else {
                    k = a.c.y;
                    l = this.w5.b;
                }
                let n = b.f(k, c, l, m, d, e);
                d = n.p4;
                e = n.p5;
            }
            return {
                p3: d,
                p4: e
            };
        }
        zl(a, b, c, d, e, f) {
            if (f) {
                let g = b.j(a.c.x, c, this.w5.a, d, e);
                d = g.p3;
                e = g.p4;
            }
            else {
                let h = b.j(a.c.y, c, this.w5.b, d, e);
                d = h.p3;
                e = h.p4;
            }
            return {
                p3: d,
                p4: e
            };
        }
        zj(a, b, c, d, e, f, g) {
            let h = c.getItemColumn();
            let i = this.dd.indexOf(d);
            if (h != null && i < h.count) {
                let j = h.item(i);
                if (g) {
                    let k = b.h(a.c.x, j, this.w5.a, e, f);
                    e = k.p3;
                    f = k.p4;
                }
                else {
                    let l = b.h(a.c.y, j, this.w5.b, e, f);
                    e = l.p3;
                    f = l.p4;
                }
            }
            else {
                e = NaN;
                f = NaN;
            }
            return {
                p4: e,
                p5: f
            };
        }
        zo(a, b, c, d, e, f) {
            let g = a.i(b, c);
            c = g.p1;
            if (f) {
                let h = a.k(c, b, this.w5.a, d, e);
                d = h.p3;
                e = h.p4;
            }
            else {
                let i = a.k(c, b, this.w5.b, d, e);
                d = i.p3;
                e = i.p4;
            }
            return {
                p2: c,
                p3: d,
                p4: e
            };
        }
        zu(a, b) {
            if (!b.o() || this.w7 == null) {
                b.c9();
                return;
            }
            this.zv(a, b);
            this.zw(a, b);
        }
        zv(a, b) {
            b.c5();
            let c = new ErrorBarsHelper(this, b);
            let d = new PathGeometry();
            let e = this.w7.u;
            for (let f of fromEnum(a.j.keys)) {
                if (e != null && a.i.containsKey(f)) {
                    let g = a.i.item(f)[0];
                    let h = a.i.item(f)[1];
                    if (!isNaN_(g) && !isNaN_(h)) {
                        let i = a.h.item(f).c;
                        if (this.w7.o == 1 || this.w7.o == 2) {
                            c.d(d, i, g, true);
                        }
                        if (this.w7.o == 1 || this.w7.o == 3) {
                            c.d(d, i, h, false);
                        }
                    }
                }
            }
            b.da(d);
        }
        zw(a, b) {
            b.c6();
            let c = new ErrorBarsHelper(this, b);
            let d = new PathGeometry();
            let e = this.w7.v;
            for (let f of fromEnum(a.j.keys)) {
                if (e != null && a.k.containsKey(f)) {
                    let g = a.k.item(f)[0];
                    let h = a.k.item(f)[1];
                    if (!isNaN_(g) && !isNaN_(h)) {
                        let i = a.l.item(f).c;
                        if (this.w7.p == 1 || this.w7.p == 2) {
                            c.e(d, i, g, true);
                        }
                        if (this.w7.p == 1 || this.w7.p == 3) {
                            c.e(d, i, h, false);
                        }
                    }
                }
            }
        }
        gw(a, b, c) {
            let d = true;
            if (!super.gw(a, b, c) || b.isEmpty || a.isEmpty || this.xAxis == null || this.yAxis == null || this.xAxis.bi == null || this.yAxis.bi == null || this.xq == null || this.xr == null || this.xq.count == 0 || this.xr.count == 0 || this.dd == null || this.dd.count != this.xq.count || this.dd.count != this.xr.count || this.xAxis.bi == null || this.yAxis.bi == null || this.xAxis.lx == this.xAxis.lw || this.yAxis.lx == this.yAxis.lw) {
                d = false;
            }
            return d;
        }
        getViewInfo(a, b) {
            if (!this.aas.isEmpty && !this.aat.isEmpty) {
                a = this.aas;
                b = this.aat;
                return {
                    p0: a,
                    p1: b
                };
            }
            a = this.cl.bx;
            b = this.cl.by;
            return {
                p0: a,
                p1: b
            };
        }
        qn(a) {
            super.qn(a);
            this.zb();
            try {
                if (this.dt(this.cl)) {
                    return;
                }
                if (this.dd != null && this.dd.count > this.yh) {
                    a = false;
                }
                if (this.fz(a) && !this.gb) {
                    let b = this.xb;
                    if (this.dr()) {
                        if (this.c2.g) {
                            this.c2.t();
                        }
                        this.xb = this.xd;
                        this.xd = b;
                    }
                    else {
                        this.xb = this.w9;
                        this.w9 = b;
                    }
                    this.zm(this.w9, this.w6);
                    this.q0();
                }
                else {
                    if (!this.gb) {
                        this.zm(this.w9, this.w6);
                    }
                    this.zx(this.w9, this.w6);
                }
            }
            finally {
                this.zy();
            }
        }
        ra() {
            super.ra();
            if (this.index < 0) {
                return;
            }
            this.w6.dd();
        }
        qo(a, b) {
            super.qo(a, b);
            if (!this.gj) {
                this.cl.a4(b);
                return;
            }
            this.cl.a4(b);
            if (this.dt(this.ck)) {
                return;
            }
            let c = typeCast(ScatterBaseView.$, this.ck);
            if (!this.gc) {
                this.xc = new ScatterFrame();
                this.zm(this.xc, c);
            }
            this.gc = false;
            this.zx(this.xc, c);
            this.gj = false;
        }
        ql(a, b, c, d, e) {
            super.ql(a, b, c, d, e);
            let f = this.a2.a$i.item(d);
            let g = f;
            f.a3(c);
            if (this.dt(g)) {
                return;
            }
            if (this.w8 == null) {
                this.w8 = new ScatterFrame();
            }
            this.zm(this.w8, g);
            this.zx(this.w8, g);
        }
        zt(a, b) {
            let c = new List$1(Base.$, 0);
            for (let d of fromEnum(b.c)) {
                if (!a.containsKey(d)) {
                    c.add1(d);
                }
            }
            for (let e of fromEnum(c)) {
                b.h(e);
            }
        }
        wx(a, b, c, d, e) {
            if (c == null || c.length != this.w5.c.count) {
                c = new Array(this.w5.c.count);
                for (let f = 0; f < this.w5.c.count; f++) {
                    c[f] = PointUtil.create();
                }
            }
            let g = this.getEffectiveViewport1(a);
            let h = ((() => {
                let $ret = new ScalerParams(0, d, e, this.xAxis.ch, g);
                $ret.c = this.getEffectiveViewport1(a);
                return $ret;
            })());
            let i = ((() => {
                let $ret = new ScalerParams(0, d, e, this.yAxis.ch, g);
                $ret.c = this.getEffectiveViewport1(a);
                $ret.b = this.id();
                return $ret;
            })());
            let j = this.u1(a);
            let k = this.w5.a.em(j.left, h);
            let l = this.w5.a.em(j.right, h);
            let m = this.w5.b.em(j.bottom, i);
            let n = this.w5.b.em(j.top, i);
            if (this.w5.d) {
                let o = k;
                k = l;
                l = o;
            }
            if (this.w5.e) {
                let p = m;
                m = n;
                n = p;
            }
            let q = this.w5;
            let r = q.a;
            let s = q.b;
            let t;
            let u;
            let v = this.xq;
            let w = this.xr;
            let x = false;
            let y = 0;
            let z = 0;
            if (this.c1 != null) {
                if (this.c1.fx()) {
                    let aa = this.c1.mp(d, h);
                    x = aa.c;
                    y = aa.d;
                    z = r.em(0 + y, h);
                    let ab = r.em(0, h);
                    z -= ab;
                }
            }
            for (let ac = 0; ac < this.w5.c.count; ac++) {
                t = v.item(ac);
                u = w.item(ac);
                if (x) {
                    if (t >= k && t <= l && u >= m && u <= n) {
                        c[ac].x = r.ej(t, h);
                        c[ac].y = s.ej(u, i);
                    }
                    else {
                        if ((t + z) >= k && (t + z) <= l && u >= m && u <= n) {
                            c[ac].x = r.ej(t, h) + y;
                            c[ac].y = s.ej(u, i);
                        }
                        else {
                            c[ac].x = NaN;
                            c[ac].y = NaN;
                        }
                    }
                }
                else {
                    if (t >= k && t <= l && u >= m && u <= n) {
                        c[ac].x = r.ej(t, h);
                        c[ac].y = s.ej(u, i);
                    }
                    else {
                        c[ac].x = NaN;
                        c[ac].y = NaN;
                    }
                }
            }
            return c;
        }
        x6(a, b) {
            if (b == null) {
                b = new List$1(Number_$type, 2, a.e);
            }
            else {
                b.clear();
            }
            let c = 0;
            let d = this.dd;
            for (let e of fromEnum(a.c)) {
                b.add(d.indexOf(e));
            }
            return b;
        }
        ow(a) {
            super.ow(a);
            this.a4.exportTrendlineData(this, a, this.w6.c0.g$j);
        }
        id() {
            return Series.ie(this.xr, null);
        }
        getDataLegendSeriesContextAt(a, b) {
            let c = { $type: Point_$type, x: a, y: b };
            let d = this.j2(c);
            let e = d == null ? NaN : this.ic(d, "XMemberPath");
            let f = d == null ? NaN : this.ic(d, "YMemberPath");
            let g = new DataLegendSeriesValueInfo();
            g.l = e;
            g.a = 13;
            g.q = "X";
            g.r = this.y1 != null ? this.y1 : "X";
            g.s = this.yx != null ? this.yx : "X:";
            g.t = this.yz != null ? this.yz : "";
            let h = new DataLegendSeriesValueInfo();
            h.l = f;
            h.a = 14;
            h.q = "Y";
            h.r = this.y9 != null ? this.y9 : "Y";
            h.s = this.y5 != null ? this.y5 : "Y:";
            h.t = this.y7 != null ? this.y7 : "";
            let i = new DataLegendSeriesContext();
            i.e = ((() => {
                let $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
                $ret.add(g);
                $ret.add(h);
                return $ret;
            })());
            i.h = this.lh();
            return i;
        }
        zz() {
            if (this.xs) {
                this.x7 = 0;
                this.x8 = 0;
                for (let a = 0; a < this.xq.count; a++) {
                    this.x7 += this.xq.item(a);
                    this.x8 += this.xr.item(a);
                }
                this.x9 = this.x7 / this.xq.count;
                this.ya = this.x8 / this.xr.count;
                this.xs = false;
            }
        }
        ip(a, b) {
            if (b == null || !b.cj) {
                return NaN;
            }
            if (b != this.xAxis && b != this.yAxis) {
                return NaN;
            }
            let c = this.am(a);
            if (b.cp) {
                return c[1];
            }
            else {
                return c[0];
            }
        }
        am(a) {
            let b = NaN;
            let c = NaN;
            switch (a) {
                case 5:
                case 2:
                    b = this.xq.maximum;
                    c = this.xr.maximum;
                    break;
                case 4:
                case 1:
                    b = this.xq.minimum;
                    c = this.xr.minimum;
                    break;
                case 6:
                case 3:
                    if (this.xs) {
                        this.zz();
                    }
                    b = this.x9;
                    c = this.ya;
                    break;
            }
            return [b, c];
        }
        uy(a) {
            let b = this.getEffectiveViewport1(this.cl);
            let c = new ScalerParams(0, this.cl.by, this.cl.bx, this.xAxis.ch, b);
            c.c = b;
            let d = isNaN_(a[0]) ? NaN : this.xAxis.ej(a[0], c);
            c = new ScalerParams(0, this.cl.by, this.cl.bx, this.yAxis.ch, b);
            c.b = this.id();
            c.c = b;
            let e = isNaN_(a[1]) ? NaN : this.yAxis.ej(a[1], c);
            return { $type: Point_$type, x: d, y: e };
        }
        ux(a) {
            let b = this.am(a);
            return this.uy(b);
        }
    }
    ScatterBase.$t = /*@__PURE__*/ markType(ScatterBase, 'ScatterBase', MarkerSeries.$, [ISupportsErrorBars_$type, ITrendLineSeries_$type]);
    ScatterBase.z0 = /*@__PURE__*/ DependencyProperty.i("ActualTrendLineBrush", Brush.$, ScatterBase.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue)));
    ScatterBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ScatterBase, 'raisePropertyChanged', ['ErrorBarSettings:w7:z1', [ScatterErrorBarSettings.$, null], 'HighlightedXMemberPath:yl:z2', [2, null], 'HighlightedYMemberPath:yn:z3', [2, null], 'IsCustomScatterMarkerStyleAllowed:xx:z4', [0, false], 'IsCustomScatterStyleAllowed:xy:z5', [0, false], 'ItemSearchMode:xh:z6', [ScatterItemSearchMode_$type, /*@__PURE__*/ enumGetBox(ScatterItemSearchMode_$type, 0)], 'ItemSearchThreshold:yg:z7', [1, 10000], 'MarkerCollisionAvoidance:w2:z8', [CollisionAvoidanceType_$type, /*@__PURE__*/ enumGetBox(CollisionAvoidanceType_$type, 0)], 'MaximumMarkers:yh:z9', [1, 400], 'XAxis::aah', [NumericXAxis.$, null], 'XMemberAsLegendLabel:yx:aai', [2, null], 'XMemberAsLegendUnit:yz:aaj', [2, null], 'XMemberPath:y1:aak', [2, null], 'YAxis::aal', [NumericYAxis.$, null], 'YMemberAsLegendLabel:y5:aam', [2, null], 'YMemberAsLegendUnit:y7:aan', [2, null], 'YMemberPath:y9:aao', [2, null], 'TrendLineType::aaf', [TrendLineType_$type, /*@__PURE__*/ enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness::aae', [1, 1.5], 'TrendLinePeriod::aad', [1, 7], 'TrendLineBrush::aaa', [Brush.$, null], 'TrendLineZIndex:yi:aag', [1, 1001], 'TrendLineDashArray:aaq:aab', [DoubleCollection.$], 'TrendLineDashCap:aar:aac', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)]]);
    return ScatterBase;
})();
/**
 * @hidden
 */
export let ScatterSeriesRenderManager = /*@__PURE__*/ (() => {
    class ScatterSeriesRenderManager extends SeriesRenderManager {
        constructor() {
            super(...arguments);
            this.aw = null;
            this.ax = null;
        }
        c() {
            this.aw = new AssigningScatterMarkerStyleEventArgs();
            return this.aw;
        }
        a() {
            this.ax = new AssigningScatterStyleEventArgs();
            return this.ax;
        }
        ay(a, b, c) {
            this.w(a, b, c);
        }
        az(a, b, c) {
            this.x(a, b, c);
        }
        a0(a, b, c, d) {
            if (b == -1) {
                a.e = false;
                a.z = 0;
                a.y = c - 1;
            }
            else {
                if (d) {
                    a.z = b;
                    a.y = b;
                }
                else {
                    a.e = false;
                    a.z = b;
                    a.y = b;
                }
            }
        }
    }
    ScatterSeriesRenderManager.$t = /*@__PURE__*/ markType(ScatterSeriesRenderManager, 'ScatterSeriesRenderManager', SeriesRenderManager.$);
    return ScatterSeriesRenderManager;
})();
/**
 * @hidden
 */
export let ScatterBaseView = /*@__PURE__*/ (() => {
    class ScatterBaseView extends MarkerSeriesView {
        constructor(a) {
            super(a);
            this.cy = null;
            this.cw = null;
            this.cz = null;
            this.c4 = null;
            this.df = null;
            this.dg = null;
            this.c0 = null;
            this.de = null;
            this.c1 = null;
            this.cz = a;
            this.c1 = new HashPool$2(Base.$, Marker.$);
            this.ck(this.c1);
            this.c0 = new ScatterTrendLineManager();
        }
        au() {
            super.au();
            this.cy = this.cx();
            this.df = new Path();
            this.dg = new Path();
            if (!this.q) {
                this.cz.yh = 2000;
            }
        }
        dh(a) {
            if (this.de == null) {
                this.de = new DataTemplateMeasureInfo();
                this.de.context = this.k.h();
            }
            this.de.width = a.width;
            this.de.height = a.height;
            this.de.data = a.content;
            let b = a.ah;
            if (b.measure != null) {
                b.measure(this.de);
            }
            return new Size(1, this.de.width, this.de.height);
        }
        cx() {
            let a = new NumericMarkerManager(1, (b) => this.c1.item(b), (b) => this.cz.w5.c.item(b), runOn(this, this.dc), runOn(this, this.cu), runOn(this, this.c2), () => this.cz.w2);
            a.q = runOn(this, this.dh);
            return a;
        }
        dc(a) {
            this.cz.zt(a, this.c1);
        }
        c3() {
            return this.b7;
        }
        cv() {
            return this.cw;
        }
        cu() {
            this.cw = this.cz.wx(this, this.c1, this.cw, this.by, this.bx);
            return this.cw;
        }
        c2() {
            this.c4 = this.cz.x6(this.c1, this.c4);
            return this.c4;
        }
        c5() {
        }
        da(a) {
        }
        c6() {
        }
        db(a) {
        }
        dd() {
            if (this.cz.trendLineBrush != null) {
                this.cz.aap = this.cz.trendLineBrush;
            }
            else {
                this.cz.aap = this.cz.tw;
            }
        }
        ci(a) {
            this.c1.f(a);
        }
        c8(a) {
            this.c1.g(a);
        }
        c9() {
        }
        a7(a, b) {
            super.a7(a, b);
            if (a.d) {
                if (this.cz.trendLineType != 0 && !b) {
                    let c = this.c0.g$j;
                    c.ad = this.cz.trendLineThickness;
                    c._stroke = this.cz.aap;
                    c.ai = this.cz.aaq;
                    c.aj = this.cz.aar;
                    a.v(c);
                }
            }
        }
        c7(a) {
            if (a) {
                this.c9();
                this.c1.clear();
            }
            this.c0.g$d();
            this.as();
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'><span";
            let b = this.e.a2.a$t(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.cz.title + "</span><br/><span>" + "x: </span><span class='ui-priority-primary'>${item." + this.cz.y1 + "}</span><br/><span>" + "y: </span><span class='ui-priority-primary'>${item." + this.cz.y9 + "}</span></div>";
            return a;
        }
    }
    ScatterBaseView.$t = /*@__PURE__*/ markType(ScatterBaseView, 'ScatterBaseView', MarkerSeriesView.$);
    return ScatterBaseView;
})();
