/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { PolarBase } from "./PolarBase";
import { PathRenderer } from "./PathRenderer";
import { DefaultFlattener } from "./DefaultFlattener";
import { PolarBaseView } from "./PolarBaseView";
import { Number_$type, Point_$type, markType } from "igniteui-react-core";
import { PolarLinePlanner } from "./PolarLinePlanner";
import { List$1 } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
export let PolarLineSeriesBase = /*@__PURE__*/ (() => {
    class PolarLineSeriesBase extends PolarBase {
        get_x2() {
            return true;
        }
        x7() {
            return true;
        }
        ci() {
            return new PolarLineSeriesBaseView(this);
        }
        px(a) {
            super.px(a);
            this.aar = a;
        }
        constructor() {
            super();
            this.aao = null;
            this.aaq = null;
            this.aap = null;
            this.aao = new PathRenderer(1, new DefaultFlattener());
            this.aaq = new PathRenderer(0);
        }
        aas() {
            return 1;
        }
        get_aav() {
            return false;
        }
        get aav() {
            return this.get_aav();
        }
        get_aax() {
            return false;
        }
        get aax() {
            return this.get_aax();
        }
        zm(a, b) {
            super.zm(a, b);
            a.m.clear();
            let c = b.by;
            let d = b.bx;
            let e = this.xs != null ? this.xs.count : 0;
            let f = this.xt != null ? this.xt.count : 0;
            let g = Math.min(e, f);
            let h = ((() => {
                let $ret = new PolarLinePlanner();
                $ret.m = (i) => this.w5.a.getScaledAngle1(this.xs.item(i), this.w5.e, this.w5.d);
                $ret.q = g;
                $ret.n = (i) => this.w3.nv(this.xt.item(i), this.w5.g, this.w5.f, this.w5.i, this.w5.h);
                $ret.l = this.hu;
                $ret.f = this.x8;
                $ret.b = this.aas();
                $ret.o = (i) => this.aay(a, i);
                $ret.p = (i) => this.aaz(a, i);
                $ret.ab = d;
                $ret.ac = c;
                $ret.d = this.aax;
                $ret.c = this.aav;
                return $ret;
            })());
            let i = new List$1(Number_$type, 0);
            for (let j = 0; j < g; j++) {
                if (this.aaw(j)) {
                    i.add(j);
                }
            }
            if (this.aax && i.count > 0) {
                i.add(i._inner[0]);
            }
            h.x(a.m, i);
        }
        aay(a, b) {
            return a.w._inner[b].x;
        }
        aaz(a, b) {
            return a.w._inner[b].y;
        }
        aau() {
            return !this.aat();
        }
        aat() {
            let a = this.c1.vh;
            return !a.containsPoint({ $type: Point_$type, x: 0.5, y: 0.5 });
        }
        aaw(a) {
            return (this.xs.item(a) >= this.w5.a.lx && this.xs.item(a) <= this.w5.a.lw && this.xt.item(a) >= this.w5.b.lx && this.xt.item(a) <= this.w5.b.lw) || (isNaN_(this.xs.item(a)) || isNaN_(this.xt.item(a)));
        }
        n7(a, b) {
            super.n7(a, b);
            this.aa0(b);
        }
        zq(a, b) {
            super.zq(a, b);
            if (this.x8) {
                this.aap = this.aao;
            }
            else {
                this.aap = this.aaq;
            }
            this.aap.b = this.aas();
            this.aa0(b);
            this.aa1(a, b);
        }
    }
    PolarLineSeriesBase.$t = /*@__PURE__*/ markType(PolarLineSeriesBase, 'PolarLineSeriesBase', PolarBase.$);
    return PolarLineSeriesBase;
})();
/**
 * @hidden
 */
export let PolarLineSeriesBaseView = /*@__PURE__*/ (() => {
    class PolarLineSeriesBaseView extends PolarBaseView {
        constructor(a) {
            super(a);
            this.c6 = null;
            this.c6 = a;
        }
        af() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.uj = a;
            this.e.i2 = 3;
            this.e.i3 = 1;
            this.e.i4 = 4;
            this.e.gu = false;
        }
    }
    PolarLineSeriesBaseView.$t = /*@__PURE__*/ markType(PolarLineSeriesBaseView, 'PolarLineSeriesBaseView', PolarBaseView.$);
    return PolarLineSeriesBaseView;
})();
