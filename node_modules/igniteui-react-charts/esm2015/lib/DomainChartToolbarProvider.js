/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, runOn, delegateCombine, delegateRemove, markType } from "igniteui-react-core";
import { IDomainChartToolbarProvider_$type } from "./IDomainChartToolbarProvider";
import { ToolCommandStateChanged } from "igniteui-react-core";
import { ValueModeCollection } from "./ValueModeCollection";
import { BrushCollection } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { CaptureImageSettings } from "igniteui-react-core";
/**
 * @hidden
 */
export let DomainChartToolbarProvider = /*@__PURE__*/ (() => {
    class DomainChartToolbarProvider extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = false;
            this._container = null;
            this._commandChanged = null;
        }
        get container() {
            return this._container;
        }
        set container(a) {
            this._container = a;
        }
        get commandChanged() {
            return this._commandChanged;
        }
        set commandChanged(a) {
            this._commandChanged = a;
        }
        getDesiredToolbarActions(a, b) {
            for (let c = 0; c < b.length; c++) {
                this.d(a, b[c]);
            }
            return b;
        }
        d(a, b) {
            if (b.actions != null && b.actions.length > 0) {
                for (let c = 0; c < b.actions.length; c++) {
                    this.d(a, b.actions[c]);
                }
            }
            switch (b.name) {
                case "ShowCrosshairs":
                    {
                        let d = b;
                        d.isChecked = a.bd != 1;
                    }
                    break;
                case "ShowGridlines":
                    {
                        let e = b;
                        e.isChecked = a.f9;
                    }
                    break;
                case "ShowValueLabels":
                    {
                        let f = b;
                        f.isChecked = a.f9;
                    }
                    break;
                case "ShowLastValueLabel":
                    {
                        let g = b;
                        g.isChecked = a.gk;
                    }
                    break;
                case "MinValue":
                    {
                        if (a.d9 != null) {
                            let h = b;
                            for (let i = 0; i < a.d9.count; i++) {
                                if (a.d9._inner[i] == 4) {
                                    h.isChecked = true;
                                    break;
                                }
                            }
                        }
                    }
                    break;
                case "MaxValue":
                    {
                        if (a.d9 != null) {
                            let j = b;
                            for (let k = 0; k < a.d9.count; k++) {
                                if (a.d9._inner[k] == 5) {
                                    j.isChecked = true;
                                    break;
                                }
                            }
                        }
                    }
                    break;
                case "Average":
                    {
                        if (a.d9 != null) {
                            let l = b;
                            for (let m = 0; m < a.d9.count; m++) {
                                if (a.d9._inner[m] == 6) {
                                    l.isChecked = true;
                                    break;
                                }
                            }
                        }
                    }
                    break;
                case "SeriesAvg":
                    {
                        if (a.d9 != null) {
                            let n = b;
                            for (let o = 0; o < a.d9.count; o++) {
                                if (a.d9._inner[o] == 3) {
                                    n.isChecked = true;
                                    break;
                                }
                            }
                        }
                    }
                    break;
            }
            this.e(a, b);
        }
        e(a, b) {
        }
        onToolCommandExecuting(a, b) {
            this.b = true;
            let c = 0;
            switch (b.commandId) {
                case "ZoomReset":
                    this.x(a, b);
                    break;
                case "ZoomIn":
                    this.v(a, b);
                    break;
                case "ZoomOut":
                    this.w(a, b);
                    break;
                case "ShowCrosshairs":
                    this.i(a, b);
                    break;
                case "ShowGridlines":
                    this.k(a, b);
                    break;
                case "MaxValue":
                    this.o(a, b);
                    break;
                case "MinValue":
                    this.p(a, b);
                    break;
                case "Average":
                    this.g(a, b);
                    break;
                case "Exponential":
                    this.j(a, b);
                    break;
                case "Linear":
                    this.m(a, b);
                    break;
                case "Logarithmic":
                    this.n(a, b);
                    break;
                case "NoTrends":
                    this.q(a, b);
                    break;
                case "SeriesAvg":
                    this.r(a, b);
                    break;
                case "ShowValueLabels":
                    this.t(a, b);
                    break;
                case "ShowLastValueLabel":
                    this.s(a, b);
                    break;
                case "CopyAsImage":
                    this.h(a, b);
                    c = 2;
                    break;
            }
            this.b = false;
            return c;
        }
        onTargetPropertyChanged(a, b, c, d) {
            if (this.b) {
                return;
            }
            switch (b) {
                case "CrosshairsDisplayMode":
                    if (a.bd == 1) {
                        this.f("ShowCrosshairs", 2, false);
                    }
                    else {
                        this.f("ShowCrosshairs", 2, true);
                    }
                    break;
                case "AutoCalloutsVisible":
                    this.f("ShowValueLabels", 2, a.f9);
                    break;
                case "FinalValueAnnotationsVisible":
                    this.f("ShowLastValueLabel", 2, a.gk);
                    break;
            }
            this.u(a, b, c, d);
        }
        u(a, b, c, d) {
        }
        f(a, b, c) {
            if (this.commandChanged != null) {
                this.commandChanged(((() => {
                    let $ret = new ToolCommandStateChanged();
                    $ret.c = a;
                    $ret.a = b;
                    $ret.b = c;
                    return $ret;
                })()));
            }
        }
        c(a, b) {
            if (a.commandId == b) {
                let e = a.argumentsList;
                for (let d = 0; d < e.length; d++) {
                    let c = e[d];
                    if (c.argumentName == "IsChecked") {
                        return c.value;
                    }
                }
            }
            return false;
        }
        i(a, b) {
            if (this.c(b, "ShowCrosshairs")) {
                a.bd = 0;
                a.gc = true;
            }
            else {
                a.bd = 1;
            }
        }
        k(a, b) {
        }
        j(a, b) {
            if (this.c(b, "Exponential")) {
                a.d5 = 7;
            }
            else {
                a.d5 = 0;
            }
        }
        m(a, b) {
            if (this.c(b, "Linear")) {
                a.d5 = 1;
            }
            else {
                a.d5 = 0;
            }
        }
        n(a, b) {
            if (this.c(b, "Logarithmic")) {
                a.d5 = 6;
            }
            else {
                a.d5 = 0;
            }
        }
        q(a, b) {
            if (this.c(b, "NoTrends")) {
                a.d5 = 0;
            }
        }
        o(a, b) {
            if (this.c(b, "MaxValue")) {
                if (a.d9 == null) {
                    a.d9 = new ValueModeCollection();
                }
                if (a.ai == null) {
                    a.ai = new BrushCollection();
                }
                a.d9.add(5);
                a.ai.add(BrushUtil.h(255, 99, 208, 0));
            }
            else {
                for (let c = 0; c < a.d9.count; c++) {
                    if (a.d9._inner[c] == 5) {
                        a.d9.removeAt(c);
                        a.ai.removeAt(c);
                        c--;
                    }
                }
            }
        }
        p(a, b) {
            if (this.c(b, "MinValue")) {
                if (a.d9 == null) {
                    a.d9 = new ValueModeCollection();
                }
                if (a.ai == null) {
                    a.ai = new BrushCollection();
                }
                a.d9.add(4);
                a.ai.add(BrushUtil.h(255, 246, 93, 80));
            }
            else {
                for (let c = 0; c < a.d9.count; c++) {
                    if (a.d9._inner[c] == 4) {
                        a.d9.removeAt(c);
                        a.ai.removeAt(c);
                        c--;
                    }
                }
            }
        }
        g(a, b) {
            if (this.c(b, "Average")) {
                if (a.d9 == null) {
                    a.d9 = new ValueModeCollection();
                }
                if (a.ai == null) {
                    a.ai = new BrushCollection();
                }
                a.d9.add(6);
                a.ai.add(BrushUtil.h(255, 248, 173, 118));
            }
            else {
                for (let c = 0; c < a.d9.count; c++) {
                    if (a.d9._inner[c] == 6) {
                        a.d9.removeAt(c);
                        a.ai.removeAt(c);
                        c--;
                    }
                }
            }
        }
        r(a, b) {
            if (this.c(b, "SeriesAvg")) {
                if (a.d9 == null) {
                    a.d9 = new ValueModeCollection();
                }
                a.d9.add(3);
            }
            else {
                for (let c = 0; c < a.d9.count; c++) {
                    if (a.d9._inner[c] == 3) {
                        a.d9.removeAt(c);
                        c--;
                    }
                }
            }
        }
        t(a, b) {
            if (this.c(b, "ShowValueLabels")) {
                a.f9 = true;
            }
            else {
                a.f9 = false;
            }
        }
        s(a, b) {
            if (this.c(b, "ShowLastValueLabel")) {
                a.gk = true;
                a.g2 = true;
            }
            else {
                a.gk = false;
            }
        }
        h(a, b) {
            this.a = b;
            let c = new CaptureImageSettings();
            c.b = true;
            c.a = 0;
            let d = a.dataChart;
            d.imageCaptured = delegateCombine(d.imageCaptured, runOn(this, this.l));
            a.dataChart.mv(c);
            a.dataChart.al.q();
        }
        l(a, b) {
            this.a.argumentsList[0].value = b.base64Data;
            let c = a;
            c.imageCaptured = delegateRemove(c.imageCaptured, runOn(this, this.l));
            if (c.commandCompleted != null) {
                c.commandCompleted(this.a);
            }
        }
        v(a, b) {
            a.u2(0.05);
        }
        w(a, b) {
            a.u3(0.05);
        }
        x(a, b) {
            a.uy();
        }
    }
    DomainChartToolbarProvider.$t = /*@__PURE__*/ markType(DomainChartToolbarProvider, 'DomainChartToolbarProvider', Base.$, [IDomainChartToolbarProvider_$type]);
    return DomainChartToolbarProvider;
})();
