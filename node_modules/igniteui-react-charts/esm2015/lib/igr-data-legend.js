import * as React from 'react';
import { XamDataLegend } from "./XamDataLegend";
import { arrayFindByName, ensureEnum, brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { DataAbbreviationMode_$type } from "igniteui-react-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-react-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-react-core";
import { DataLegendUnitsMode_$type } from "igniteui-react-core";
import { DataLegendLabelMode_$type } from "igniteui-react-core";
import { DataLegendValueMode_$type } from "igniteui-react-core";
import { DataLegendSummaryType_$type } from "igniteui-react-core";
import { IgrDataLegendSummaryEventArgs } from './igr-data-legend-summary-event-args';
import { IgrDataLegendStylingRowEventArgs } from './igr-data-legend-styling-row-event-args';
import { IgrDataLegendStylingColumnEventArgs } from './igr-data-legend-styling-column-event-args';
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
const DataLegendStylingDefaults = {};
/**
 * Represents data legend that displays information about each series including values and summaries.
*/
export class IgrDataLegend extends React.Component {
    set height(value) {
        this._height = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._dataLegend.notifySizeChanged();
        }
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._dataLegend.notifySizeChanged();
        }
    }
    //private desiredSizeChanged(width: number, height: number) {
    //    //if (this.width == undefined || this.width == '') {
    //    //    this._elRef.style.width = width + "px";
    //    //}
    //    //if (this.height == undefined || this.height == '') {
    //    //    this._elRef.style.height = height + "px";
    //    //}
    //    //this._elRef.style.minWidth = width + "px";
    //    //this._elRef.style.minHeight = height + "px";
    //    this._dataLegend.notifySizeChanged();
    //}
    get width() {
        return this._width;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let div = React.createElement("div", {
            className: "ig-data-legend igr-data-legend",
            ref: this._getMainRef
        });
        //}
        return div;
    }
    constructor(props) {
        super(props);
        this._wrapper = null;
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._calculateColumnSummary = null;
        this._calculateColumnSummary_wrapped = null;
        this._styleHeaderRow = null;
        this._styleHeaderRow_wrapped = null;
        this._styleGroupRow = null;
        this._styleGroupRow_wrapped = null;
        this._styleSeriesRow = null;
        this._styleSeriesRow_wrapped = null;
        this._styleSummaryRow = null;
        this._styleSummaryRow_wrapped = null;
        this._styleSeriesColumn = null;
        this._styleSeriesColumn_wrapped = null;
        this._styleSummaryColumn = null;
        this._styleSummaryColumn_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        this._implementation = this.createImplementation();
        if (document) {
            this._container = document.createElement("div");
            this._container.style.display = "block";
            this._container.style.width = "100%";
            this._container.style.height = "100%";
        }
        var root;
        root = this._container;
        if (this._container != null) {
            root = this._container;
        }
        var ren = new ReactRenderer(root, document, true, DataLegendStylingDefaults);
        this._wrapper = ren;
        var dataLegend = this.i;
        this._dataLegend = dataLegend;
        this._dataLegend.externalObject = this;
        dataLegend.provideContainer(ren);
        dataLegend.notifySizeChanged();
        if (props) {
            this.initializeProperties();
        }
        ren.addSizeWatcher(() => {
            this._dataLegend.notifySizeChanged();
        });
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    destroy() {
        this._dataLegend.destroy();
        this._wrapper.destroy();
    }
    componentWillUnmount() {
    }
    componentDidMount() {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._elRef.appendChild(this._container);
        this._dataLegend.notifySizeChanged();
        this.initializeContent();
    }
    initializeContent() {
        this.updateStyle();
    }
    createImplementation() {
        return new XamDataLegend();
    }
    get i() {
        return this._implementation;
    }
    static _staticStyling(container, component, parent) {
        let genericPrefix = "";
        let typeName = (component.i ? component.i : component).$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("DataLegend");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = (component.i ? component.i : component).$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, component, genericPrefix + "-", new Set(), false, additionalPrefixes);
    }
    /**
     * Gets or sets the target for the data legend.
    */
    get target() {
        var ret = this.i.target;
        if (!ret) {
            return ret;
        }
        if (ret.externalObject != null) {
            ret = ret.externalObject;
        }
        return ret;
    }
    set target(v) {
        if (v && v._implementation) {
            v = v._implementation;
        }
        this.i.target = v;
    }
    /**
 * Gets whether or not at least one badge is visible based on BadgesShape and setting of a row's IsVisble in StyleSeriesRow event
*/
    get actualBadgesVisible() {
        return this.i.bz;
    }
    set actualBadgesVisible(v) {
        this.i.bz = ensureBool(v);
    }
    /**
     * Gets the actual pixel scaling ratio used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control to appear blurry.
    */
    get actualPixelScalingRatio() {
        return this.i.cq;
    }
    set actualPixelScalingRatio(v) {
        this.i.cq = +v;
    }
    /**
     * Gets or sets indexes, titles, or names of series to include in displaying in the data legend, e.g. "0, 1" or "Series1 Title, Series2 Title"
     * The ExcludedSeries property takes precedence over values of IncludedSeries property
    */
    get includedSeries() {
        return this.i.includedSeries;
    }
    set includedSeries(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.includedSeries = v;
    }
    /**
     * Gets or sets indexes, titles, or names of series to exclude from displaying in the data legend, e.g. "0, 1" or "Series1 Title, Series2 Title"
     * The ExcludedSeries property takes precedence over values of IncludedSeries property
    */
    get excludedSeries() {
        return this.i.excludedSeries;
    }
    set excludedSeries(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.excludedSeries = v;
    }
    /**
     * Gets or sets names of data columns or their labels to include in displaying in the data legend, e.g. "High, Low" or "H, L"
     * The ExcludedColumns property takes precedence over values of IncludedColumns property
    */
    get includedColumns() {
        return this.i.includedColumns;
    }
    set includedColumns(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.includedColumns = v;
    }
    /**
     * Gets or sets names of data columns or their labels to exclude from displaying in the data legend, e.g. "High, Low" or "H, L"
     * The ExcludedColumns property takes precedence over values of IncludedColumns property
    */
    get excludedColumns() {
        return this.i.excludedColumns;
    }
    set excludedColumns(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.excludedColumns = v;
    }
    /**
     * Gets or sets whether the data legend should update when the series data is mutated.
    */
    get shouldUpdateWhenSeriesDataChanges() {
        return this.i.b7;
    }
    set shouldUpdateWhenSeriesDataChanges(v) {
        this.i.b7 = ensureBool(v);
    }
    /**
     * Gets or sets mode for abbreviating large numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatAbbreviation() {
        return this.i.an;
    }
    set valueFormatAbbreviation(v) {
        this.i.an = ensureEnum(DataAbbreviationMode_$type, v);
    }
    /**
     * Gets or sets maximum digits for formatting numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatMaxFractions() {
        return this.i.cw;
    }
    set valueFormatMaxFractions(v) {
        this.i.cw = +v;
    }
    /**
     * Gets or sets minimum digits for formatting numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatMinFractions() {
        return this.i.cx;
    }
    set valueFormatMinFractions(v) {
        this.i.cx = +v;
    }
    /**
     * Gets or sets the mode for displaying values in the data legend, e.g. Currency ($500.25), Decimal (500.25), Integer (500)
    */
    get valueFormatMode() {
        return this.i.a4;
    }
    set valueFormatMode(v) {
        this.i.a4 = ensureEnum(DataLegendValueMode_$type, v);
    }
    /**
     * Gets or sets globalization culture when displaying values as currencies, e.g. use "en-GB" to display British pound symbol when the ValueFormatMode property is set to 'Currency' mode
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatCulture() {
        return this.i.e4;
    }
    set valueFormatCulture(v) {
        this.i.e4 = v;
    }
    /**
     * Gets or sets the currency code used for displaying currency symbol next to values, e.g. USD for $, EUR for €
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatCurrencyCode() {
        return this.i.e6;
    }
    set valueFormatCurrencyCode(v) {
        this.i.e6 = v;
    }
    /**
     * Gets or sets whether or not use grouping separator, e.g, 15,000 for 15000
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatUseGrouping() {
        return this.i.b8;
    }
    set valueFormatUseGrouping(v) {
        this.i.b8 = ensureBool(v);
    }
    /**
     * Gets or sets the format string for values displayed in the data legend.
    */
    get valueFormatString() {
        return this.i.fc;
    }
    set valueFormatString(v) {
        this.i.fc = v;
    }
    /**
     * Gets or sets the format specifiers to use with the ValueFormatString string.
    */
    get valueFormatSpecifiers() {
        return this.i.ah;
    }
    set valueFormatSpecifiers(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.ah = v;
    }
    get valueRowMarginBottom() {
        return this.i.i9 ? this.i.i9.bottom : NaN;
    }
    set valueRowMarginBottom(v) {
        this.ensureValueRowMargin();
        this.i.i9.bottom = +v;
        this.i.i9 = this.i.i9;
    }
    get valueRowMarginLeft() {
        return this.i.i9 ? this.i.i9.left : NaN;
    }
    set valueRowMarginLeft(v) {
        this.ensureValueRowMargin();
        this.i.i9.left = +v;
        this.i.i9 = this.i.i9;
    }
    get valueRowMarginRight() {
        return this.i.i9 ? this.i.i9.right : NaN;
    }
    set valueRowMarginRight(v) {
        this.ensureValueRowMargin();
        this.i.i9.right = +v;
        this.i.i9 = this.i.i9;
    }
    get valueRowMarginTop() {
        return this.i.i9 ? this.i.i9.top : NaN;
    }
    set valueRowMarginTop(v) {
        this.ensureValueRowMargin();
        this.i.i9.top = +v;
        this.i.i9 = this.i.i9;
    }
    ensureValueRowMargin() {
        if (this.i.i9) {
            return;
        }
        this.i.i9 = new Thickness(2);
    }
    /**
     * Gets or sets whether to show series rows.
    */
    get valueRowVisible() {
        return this.i.b9;
    }
    set valueRowVisible(v) {
        this.i.b9 = ensureBool(v);
    }
    /**
     * Gets or sets text displayed when data column is missing a value, e.g. "no data"
    */
    get valueTextWhenMissingData() {
        return this.i.fl;
    }
    set valueTextWhenMissingData(v) {
        this.i.fl = v;
    }
    /**
     * Gets or sets whether to use series colors when displaying values in the legend
    */
    get valueTextUseSeriesColors() {
        return this.i.ca;
    }
    set valueTextUseSeriesColors(v) {
        this.i.ca = ensureBool(v);
    }
    get valueTextMarginBottom() {
        return this.i.ja ? this.i.ja.bottom : NaN;
    }
    set valueTextMarginBottom(v) {
        this.ensureValueTextMargin();
        this.i.ja.bottom = +v;
        this.i.ja = this.i.ja;
    }
    get valueTextMarginLeft() {
        return this.i.ja ? this.i.ja.left : NaN;
    }
    set valueTextMarginLeft(v) {
        this.ensureValueTextMargin();
        this.i.ja.left = +v;
        this.i.ja = this.i.ja;
    }
    get valueTextMarginRight() {
        return this.i.ja ? this.i.ja.right : NaN;
    }
    set valueTextMarginRight(v) {
        this.ensureValueTextMargin();
        this.i.ja.right = +v;
        this.i.ja = this.i.ja;
    }
    get valueTextMarginTop() {
        return this.i.ja ? this.i.ja.top : NaN;
    }
    set valueTextMarginTop(v) {
        this.ensureValueTextMargin();
        this.i.ja.top = +v;
        this.i.ja = this.i.ja;
    }
    ensureValueTextMargin() {
        if (this.i.ja) {
            return;
        }
        this.i.ja = new Thickness(2);
    }
    /**
     * Gets or sets the units text color.
    */
    get valueTextColor() {
        return brushToString(this.i.ir);
    }
    set valueTextColor(v) {
        this.i.ir = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get valueTextStyle() {
        if (this.i.bw == null) {
            return null;
        }
        return this.i.bw.fontString;
    }
    set valueTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.bw = fi;
    }
    /**
     * Gets or sets the format string for header text displayed in the data legend.
    */
    get headerFormatString() {
        return this.i.dk;
    }
    set headerFormatString(v) {
        this.i.dk = v;
    }
    /**
     * Gets or sets the format specifiers to use with the HeaderFormatString string.
    */
    get headerFormatSpecifiers() {
        return this.i.ag;
    }
    set headerFormatSpecifiers(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.ag = v;
    }
    /**
     * Gets or sets globalization culture applied to header only when it displays dates that are fetched from date/time axes
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get headerFormatCulture() {
        return this.i.dg;
    }
    set headerFormatCulture(v) {
        this.i.dg = v;
    }
    /**
     * Gets or sets date format for the header only when it displays dates that are fetched from date/time axes
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get headerFormatDate() {
        return this.i.ap;
    }
    set headerFormatDate(v) {
        this.i.ap = ensureEnum(DataLegendHeaderDateMode_$type, v);
    }
    /**
     * Gets or sets time format for the header only when it displays dates that are fetched from date/time axes
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get headerFormatTime() {
        return this.i.aq;
    }
    set headerFormatTime(v) {
        this.i.aq = ensureEnum(DataLegendHeaderTimeMode_$type, v);
    }
    /**
     * Gets or sets the HeaderText for the data legend.
    */
    get headerText() {
        return this.i.dq;
    }
    set headerText(v) {
        this.i.dq = v;
    }
    /**
     * Gets or sets the header text color.
    */
    get headerTextColor() {
        return brushToString(this.i.ih);
    }
    set headerTextColor(v) {
        this.i.ih = stringToBrush(v);
    }
    get headerTextMarginBottom() {
        return this.i.i2 ? this.i.i2.bottom : NaN;
    }
    set headerTextMarginBottom(v) {
        this.ensureHeaderTextMargin();
        this.i.i2.bottom = +v;
        this.i.i2 = this.i.i2;
    }
    get headerTextMarginLeft() {
        return this.i.i2 ? this.i.i2.left : NaN;
    }
    set headerTextMarginLeft(v) {
        this.ensureHeaderTextMargin();
        this.i.i2.left = +v;
        this.i.i2 = this.i.i2;
    }
    get headerTextMarginRight() {
        return this.i.i2 ? this.i.i2.right : NaN;
    }
    set headerTextMarginRight(v) {
        this.ensureHeaderTextMargin();
        this.i.i2.right = +v;
        this.i.i2 = this.i.i2;
    }
    get headerTextMarginTop() {
        return this.i.i2 ? this.i.i2.top : NaN;
    }
    set headerTextMarginTop(v) {
        this.ensureHeaderTextMargin();
        this.i.i2.top = +v;
        this.i.i2 = this.i.i2;
    }
    ensureHeaderTextMargin() {
        if (this.i.i2) {
            return;
        }
        this.i.i2 = new Thickness(2);
    }
    get headerRowMarginBottom() {
        return this.i.i1 ? this.i.i1.bottom : NaN;
    }
    set headerRowMarginBottom(v) {
        this.ensureHeaderRowMargin();
        this.i.i1.bottom = +v;
        this.i.i1 = this.i.i1;
    }
    get headerRowMarginLeft() {
        return this.i.i1 ? this.i.i1.left : NaN;
    }
    set headerRowMarginLeft(v) {
        this.ensureHeaderRowMargin();
        this.i.i1.left = +v;
        this.i.i1 = this.i.i1;
    }
    get headerRowMarginRight() {
        return this.i.i1 ? this.i.i1.right : NaN;
    }
    set headerRowMarginRight(v) {
        this.ensureHeaderRowMargin();
        this.i.i1.right = +v;
        this.i.i1 = this.i.i1;
    }
    get headerRowMarginTop() {
        return this.i.i1 ? this.i.i1.top : NaN;
    }
    set headerRowMarginTop(v) {
        this.ensureHeaderRowMargin();
        this.i.i1.top = +v;
        this.i.i1 = this.i.i1;
    }
    ensureHeaderRowMargin() {
        if (this.i.i1) {
            return;
        }
        this.i.i1 = new Thickness(2);
    }
    /**
     * Gets or sets whether to show Header row.
    */
    get headerRowVisible() {
        return this.i.b4;
    }
    set headerRowVisible(v) {
        this.i.b4 = ensureBool(v);
    }
    /**
     * Gets or Sets the style to use for the header text.
    */
    get headerTextStyle() {
        if (this.i.bo == null) {
            return null;
        }
        return this.i.bo.fontString;
    }
    set headerTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.bo = fi;
    }
    /**
     * Gets or sets whether to show Header row.
    */
    get groupRowVisible() {
        return this.i.b2;
    }
    set groupRowVisible(v) {
        this.i.b2 = ensureBool(v);
    }
    /**
     * Gets or sets the Group text color.
    */
    get groupTextColor() {
        return brushToString(this.i.ig);
    }
    set groupTextColor(v) {
        this.i.ig = stringToBrush(v);
    }
    get groupTextMarginBottom() {
        return this.i.i0 ? this.i.i0.bottom : NaN;
    }
    set groupTextMarginBottom(v) {
        this.ensureGroupTextMargin();
        this.i.i0.bottom = +v;
        this.i.i0 = this.i.i0;
    }
    get groupTextMarginLeft() {
        return this.i.i0 ? this.i.i0.left : NaN;
    }
    set groupTextMarginLeft(v) {
        this.ensureGroupTextMargin();
        this.i.i0.left = +v;
        this.i.i0 = this.i.i0;
    }
    get groupTextMarginRight() {
        return this.i.i0 ? this.i.i0.right : NaN;
    }
    set groupTextMarginRight(v) {
        this.ensureGroupTextMargin();
        this.i.i0.right = +v;
        this.i.i0 = this.i.i0;
    }
    get groupTextMarginTop() {
        return this.i.i0 ? this.i.i0.top : NaN;
    }
    set groupTextMarginTop(v) {
        this.ensureGroupTextMargin();
        this.i.i0.top = +v;
        this.i.i0 = this.i.i0;
    }
    ensureGroupTextMargin() {
        if (this.i.i0) {
            return;
        }
        this.i.i0 = new Thickness(2);
    }
    get groupRowMarginBottom() {
        return this.i.iz ? this.i.iz.bottom : NaN;
    }
    set groupRowMarginBottom(v) {
        this.ensureGroupRowMargin();
        this.i.iz.bottom = +v;
        this.i.iz = this.i.iz;
    }
    get groupRowMarginLeft() {
        return this.i.iz ? this.i.iz.left : NaN;
    }
    set groupRowMarginLeft(v) {
        this.ensureGroupRowMargin();
        this.i.iz.left = +v;
        this.i.iz = this.i.iz;
    }
    get groupRowMarginRight() {
        return this.i.iz ? this.i.iz.right : NaN;
    }
    set groupRowMarginRight(v) {
        this.ensureGroupRowMargin();
        this.i.iz.right = +v;
        this.i.iz = this.i.iz;
    }
    get groupRowMarginTop() {
        return this.i.iz ? this.i.iz.top : NaN;
    }
    set groupRowMarginTop(v) {
        this.ensureGroupRowMargin();
        this.i.iz.top = +v;
        this.i.iz = this.i.iz;
    }
    ensureGroupRowMargin() {
        if (this.i.iz) {
            return;
        }
        this.i.iz = new Thickness(2);
    }
    /**
     * Gets or Sets the style to use for the Group text.
    */
    get groupTextStyle() {
        if (this.i.bn == null) {
            return null;
        }
        return this.i.bn.fontString;
    }
    set groupTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.bn = fi;
    }
    /**
     * Gets or sets the summary text color.
    */
    get summaryTitleTextColor() {
        return brushToString(this.i.il);
    }
    set summaryTitleTextColor(v) {
        this.i.il = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the summary text.
    */
    get summaryTitleTextStyle() {
        if (this.i.br == null) {
            return null;
        }
        return this.i.br.fontString;
    }
    set summaryTitleTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.br = fi;
    }
    /**
     * Gets or sets the SummaryType for the data legend.
    */
    get summaryType() {
        return this.i.a2;
    }
    set summaryType(v) {
        this.i.a2 = ensureEnum(DataLegendSummaryType_$type, v);
    }
    /**
     * Gets or sets the SummaryTitleText for the data legend.
    */
    get summaryTitleText() {
        return this.i.ef;
    }
    set summaryTitleText(v) {
        this.i.ef = v;
    }
    get summaryTitleTextMarginBottom() {
        return this.i.i5 ? this.i.i5.bottom : NaN;
    }
    set summaryTitleTextMarginBottom(v) {
        this.ensureSummaryTitleTextMargin();
        this.i.i5.bottom = +v;
        this.i.i5 = this.i.i5;
    }
    get summaryTitleTextMarginLeft() {
        return this.i.i5 ? this.i.i5.left : NaN;
    }
    set summaryTitleTextMarginLeft(v) {
        this.ensureSummaryTitleTextMargin();
        this.i.i5.left = +v;
        this.i.i5 = this.i.i5;
    }
    get summaryTitleTextMarginRight() {
        return this.i.i5 ? this.i.i5.right : NaN;
    }
    set summaryTitleTextMarginRight(v) {
        this.ensureSummaryTitleTextMargin();
        this.i.i5.right = +v;
        this.i.i5 = this.i.i5;
    }
    get summaryTitleTextMarginTop() {
        return this.i.i5 ? this.i.i5.top : NaN;
    }
    set summaryTitleTextMarginTop(v) {
        this.ensureSummaryTitleTextMargin();
        this.i.i5.top = +v;
        this.i.i5 = this.i.i5;
    }
    ensureSummaryTitleTextMargin() {
        if (this.i.i5) {
            return;
        }
        this.i.i5 = new Thickness(2);
    }
    get summaryRowMarginBottom() {
        return this.i.i4 ? this.i.i4.bottom : NaN;
    }
    set summaryRowMarginBottom(v) {
        this.ensureSummaryRowMargin();
        this.i.i4.bottom = +v;
        this.i.i4 = this.i.i4;
    }
    get summaryRowMarginLeft() {
        return this.i.i4 ? this.i.i4.left : NaN;
    }
    set summaryRowMarginLeft(v) {
        this.ensureSummaryRowMargin();
        this.i.i4.left = +v;
        this.i.i4 = this.i.i4;
    }
    get summaryRowMarginRight() {
        return this.i.i4 ? this.i.i4.right : NaN;
    }
    set summaryRowMarginRight(v) {
        this.ensureSummaryRowMargin();
        this.i.i4.right = +v;
        this.i.i4 = this.i.i4;
    }
    get summaryRowMarginTop() {
        return this.i.i4 ? this.i.i4.top : NaN;
    }
    set summaryRowMarginTop(v) {
        this.ensureSummaryRowMargin();
        this.i.i4.top = +v;
        this.i.i4 = this.i.i4;
    }
    ensureSummaryRowMargin() {
        if (this.i.i4) {
            return;
        }
        this.i.i4 = new Thickness(2);
    }
    /**
     * Gets or sets the units text color.
    */
    get summaryValueTextColor() {
        return brushToString(this.i.io);
    }
    set summaryValueTextColor(v) {
        this.i.io = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get summaryValueTextStyle() {
        if (this.i.bt == null) {
            return null;
        }
        return this.i.bt.fontString;
    }
    set summaryValueTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.bt = fi;
    }
    /**
     * Gets or sets the units text for the data legend.
    */
    get summaryLabelText() {
        return this.i.ea;
    }
    set summaryLabelText(v) {
        this.i.ea = v;
    }
    /**
     * Gets or sets the units text color.
    */
    get summaryLabelTextColor() {
        return brushToString(this.i.ik);
    }
    set summaryLabelTextColor(v) {
        this.i.ik = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get summaryLabelTextStyle() {
        if (this.i.bq == null) {
            return null;
        }
        return this.i.bq.fontString;
    }
    set summaryLabelTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.bq = fi;
    }
    /**
     * Gets or sets the units text for the data legend.
    */
    get summaryUnitsText() {
        return this.i.el;
    }
    set summaryUnitsText(v) {
        this.i.el = v;
    }
    /**
     * Gets or sets the units text color.
    */
    get summaryUnitsTextColor() {
        return brushToString(this.i.im);
    }
    set summaryUnitsTextColor(v) {
        this.i.im = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get summaryUnitsTextStyle() {
        if (this.i.bs == null) {
            return null;
        }
        return this.i.bs.fontString;
    }
    set summaryUnitsTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.bs = fi;
    }
    get badgeMarginBottom() {
        return this.i.iy ? this.i.iy.bottom : NaN;
    }
    set badgeMarginBottom(v) {
        this.ensureBadgeMargin();
        this.i.iy.bottom = +v;
        this.i.iy = this.i.iy;
    }
    get badgeMarginLeft() {
        return this.i.iy ? this.i.iy.left : NaN;
    }
    set badgeMarginLeft(v) {
        this.ensureBadgeMargin();
        this.i.iy.left = +v;
        this.i.iy = this.i.iy;
    }
    get badgeMarginRight() {
        return this.i.iy ? this.i.iy.right : NaN;
    }
    set badgeMarginRight(v) {
        this.ensureBadgeMargin();
        this.i.iy.right = +v;
        this.i.iy = this.i.iy;
    }
    get badgeMarginTop() {
        return this.i.iy ? this.i.iy.top : NaN;
    }
    set badgeMarginTop(v) {
        this.ensureBadgeMargin();
        this.i.iy.top = +v;
        this.i.iy = this.i.iy;
    }
    ensureBadgeMargin() {
        if (this.i.iy) {
            return;
        }
        this.i.iy = new Thickness(2);
    }
    /**
     * Gets or sets the BadgeShape for the data legend.
    */
    get badgeShape() {
        return this.i.a9;
    }
    set badgeShape(v) {
        this.i.a9 = ensureEnum(LegendItemBadgeShape_$type, v);
    }
    /**
     * Gets or sets horizontal position (between 0.0 and 1.0) in viewport of the target component
    */
    get targetCursorPositionX() {
        return this.i.targetCursorPositionX;
    }
    set targetCursorPositionX(v) {
        this.i.targetCursorPositionX = +v;
    }
    /**
     * Gets or sets vertical position (between 0.0 and 1.0) in viewport of the target component
    */
    get targetCursorPositionY() {
        return this.i.targetCursorPositionY;
    }
    set targetCursorPositionY(v) {
        this.i.targetCursorPositionY = +v;
    }
    /**
     * Gets or sets the UnitsMode for the data legend.
    */
    get unitsDisplayMode() {
        return this.i.a3;
    }
    set unitsDisplayMode(v) {
        this.i.a3 = ensureEnum(DataLegendUnitsMode_$type, v);
    }
    /**
     * Gets or sets the units text for the data legend.
    */
    get unitsText() {
        return this.i.ey;
    }
    set unitsText(v) {
        this.i.ey = v;
    }
    /**
     * Gets or sets the units text color.
    */
    get unitsTextColor() {
        return brushToString(this.i.iq);
    }
    set unitsTextColor(v) {
        this.i.iq = stringToBrush(v);
    }
    get unitsTextMarginBottom() {
        return this.i.i7 ? this.i.i7.bottom : NaN;
    }
    set unitsTextMarginBottom(v) {
        this.ensureUnitsTextMargin();
        this.i.i7.bottom = +v;
        this.i.i7 = this.i.i7;
    }
    get unitsTextMarginLeft() {
        return this.i.i7 ? this.i.i7.left : NaN;
    }
    set unitsTextMarginLeft(v) {
        this.ensureUnitsTextMargin();
        this.i.i7.left = +v;
        this.i.i7 = this.i.i7;
    }
    get unitsTextMarginRight() {
        return this.i.i7 ? this.i.i7.right : NaN;
    }
    set unitsTextMarginRight(v) {
        this.ensureUnitsTextMargin();
        this.i.i7.right = +v;
        this.i.i7 = this.i.i7;
    }
    get unitsTextMarginTop() {
        return this.i.i7 ? this.i.i7.top : NaN;
    }
    set unitsTextMarginTop(v) {
        this.ensureUnitsTextMargin();
        this.i.i7.top = +v;
        this.i.i7 = this.i.i7;
    }
    ensureUnitsTextMargin() {
        if (this.i.i7) {
            return;
        }
        this.i.i7 = new Thickness(2);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get unitsTextStyle() {
        if (this.i.bv == null) {
            return null;
        }
        return this.i.bv.fontString;
    }
    set unitsTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.bv = fi;
    }
    get titleTextMarginBottom() {
        return this.i.i6 ? this.i.i6.bottom : NaN;
    }
    set titleTextMarginBottom(v) {
        this.ensureTitleTextMargin();
        this.i.i6.bottom = +v;
        this.i.i6 = this.i.i6;
    }
    get titleTextMarginLeft() {
        return this.i.i6 ? this.i.i6.left : NaN;
    }
    set titleTextMarginLeft(v) {
        this.ensureTitleTextMargin();
        this.i.i6.left = +v;
        this.i.i6 = this.i.i6;
    }
    get titleTextMarginRight() {
        return this.i.i6 ? this.i.i6.right : NaN;
    }
    set titleTextMarginRight(v) {
        this.ensureTitleTextMargin();
        this.i.i6.right = +v;
        this.i.i6 = this.i.i6;
    }
    get titleTextMarginTop() {
        return this.i.i6 ? this.i.i6.top : NaN;
    }
    set titleTextMarginTop(v) {
        this.ensureTitleTextMargin();
        this.i.i6.top = +v;
        this.i.i6 = this.i.i6;
    }
    ensureTitleTextMargin() {
        if (this.i.i6) {
            return;
        }
        this.i.i6 = new Thickness(2);
    }
    /**
     * Gets or sets the display text color.
    */
    get titleTextColor() {
        return brushToString(this.i.ip);
    }
    set titleTextColor(v) {
        this.i.ip = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the display text.
    */
    get titleTextStyle() {
        if (this.i.bu == null) {
            return null;
        }
        return this.i.bu.fontString;
    }
    set titleTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.bu = fi;
    }
    /**
     * Gets or sets the mode for displaying labels before series values in the data legend, e.g. O: H: L: C: for financial series
    */
    get labelDisplayMode() {
        return this.i.ar;
    }
    set labelDisplayMode(v) {
        this.i.ar = ensureEnum(DataLegendLabelMode_$type, v);
    }
    /**
     * Gets or sets the units text color.
    */
    get labelTextColor() {
        return brushToString(this.i.ii);
    }
    set labelTextColor(v) {
        this.i.ii = stringToBrush(v);
    }
    get labelTextMarginBottom() {
        return this.i.i3 ? this.i.i3.bottom : NaN;
    }
    set labelTextMarginBottom(v) {
        this.ensureLabelTextMargin();
        this.i.i3.bottom = +v;
        this.i.i3 = this.i.i3;
    }
    get labelTextMarginLeft() {
        return this.i.i3 ? this.i.i3.left : NaN;
    }
    set labelTextMarginLeft(v) {
        this.ensureLabelTextMargin();
        this.i.i3.left = +v;
        this.i.i3 = this.i.i3;
    }
    get labelTextMarginRight() {
        return this.i.i3 ? this.i.i3.right : NaN;
    }
    set labelTextMarginRight(v) {
        this.ensureLabelTextMargin();
        this.i.i3.right = +v;
        this.i.i3 = this.i.i3;
    }
    get labelTextMarginTop() {
        return this.i.i3 ? this.i.i3.top : NaN;
    }
    set labelTextMarginTop(v) {
        this.ensureLabelTextMargin();
        this.i.i3.top = +v;
        this.i.i3 = this.i.i3;
    }
    ensureLabelTextMargin() {
        if (this.i.i3) {
            return;
        }
        this.i.i3 = new Thickness(2);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get labelTextStyle() {
        if (this.i.bp == null) {
            return null;
        }
        return this.i.bp.fontString;
    }
    set labelTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.bp = fi;
    }
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control to appear blurry.
    */
    get pixelScalingRatio() {
        return this.i.pixelScalingRatio;
    }
    set pixelScalingRatio(v) {
        this.i.pixelScalingRatio = +v;
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.valueFormatSpecifiers != null && arrayFindByName(this.valueFormatSpecifiers, name)) {
            return arrayFindByName(this.valueFormatSpecifiers, name);
        }
        if (this.headerFormatSpecifiers != null && arrayFindByName(this.headerFormatSpecifiers, name)) {
            return arrayFindByName(this.headerFormatSpecifiers, name);
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("DataLegend");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    /**
 * Returns the legend visuals expressed as a serialized string.

*/
    exportSerializedVisualData() {
        let iv = this.i.exportSerializedVisualData();
        return (iv);
    }
    /**
     * Notifies the legend about changes to size
    
    */
    notifySizeChanged() {
        this.i.notifySizeChanged();
    }
    /**
     * Forces any pending refresh to the legend to be finished.
    
    */
    flush() {
        this.i.flush();
    }
    getAbbreviatedNumber(number, mode, minDigits, maxDigits) {
        let iv = this.i.ct(number, (mode == null ? null : mode), minDigits, maxDigits);
        return (iv);
    }
    getAbbreviatedSymbol(number, mode, minDigits, maxDigits) {
        let iv = this.i.da(number, (mode == null ? null : mode), minDigits, maxDigits);
        return (iv);
    }
    getAbbreviatedString(number, mode, minDigits, maxDigits) {
        let iv = this.i.c9(number, (mode == null ? null : mode), minDigits, maxDigits);
        return (iv);
    }
    /**
     * Event raised when calculating summary value for each column in data legend
    */
    get calculateColumnSummary() {
        return this._calculateColumnSummary;
    }
    set calculateColumnSummary(ev) {
        if (this._calculateColumnSummary_wrapped !== null) {
            this.i.calculateColumnSummary = delegateRemove(this.i.calculateColumnSummary, this._calculateColumnSummary_wrapped);
            this._calculateColumnSummary_wrapped = null;
            this._calculateColumnSummary = null;
        }
        this._calculateColumnSummary = ev;
        this._calculateColumnSummary_wrapped = (o, e) => {
            let outerArgs = new IgrDataLegendSummaryEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCalculateColumnSummary) {
                this.beforeCalculateColumnSummary(this, outerArgs);
            }
            if (this._calculateColumnSummary) {
                this._calculateColumnSummary(this, outerArgs);
            }
        };
        this.i.calculateColumnSummary = delegateCombine(this.i.calculateColumnSummary, this._calculateColumnSummary_wrapped);
        ;
    }
    /**
     * Event raised when styling the header row
    */
    get styleHeaderRow() {
        return this._styleHeaderRow;
    }
    set styleHeaderRow(ev) {
        if (this._styleHeaderRow_wrapped !== null) {
            this.i.styleHeaderRow = delegateRemove(this.i.styleHeaderRow, this._styleHeaderRow_wrapped);
            this._styleHeaderRow_wrapped = null;
            this._styleHeaderRow = null;
        }
        this._styleHeaderRow = ev;
        this._styleHeaderRow_wrapped = (o, e) => {
            let outerArgs = new IgrDataLegendStylingRowEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeStyleHeaderRow) {
                this.beforeStyleHeaderRow(this, outerArgs);
            }
            if (this._styleHeaderRow) {
                this._styleHeaderRow(this, outerArgs);
            }
        };
        this.i.styleHeaderRow = delegateCombine(this.i.styleHeaderRow, this._styleHeaderRow_wrapped);
        ;
    }
    /**
     * Event raised when styling the group row
    */
    get styleGroupRow() {
        return this._styleGroupRow;
    }
    set styleGroupRow(ev) {
        if (this._styleGroupRow_wrapped !== null) {
            this.i.styleGroupRow = delegateRemove(this.i.styleGroupRow, this._styleGroupRow_wrapped);
            this._styleGroupRow_wrapped = null;
            this._styleGroupRow = null;
        }
        this._styleGroupRow = ev;
        this._styleGroupRow_wrapped = (o, e) => {
            let outerArgs = new IgrDataLegendStylingRowEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeStyleGroupRow) {
                this.beforeStyleGroupRow(this, outerArgs);
            }
            if (this._styleGroupRow) {
                this._styleGroupRow(this, outerArgs);
            }
        };
        this.i.styleGroupRow = delegateCombine(this.i.styleGroupRow, this._styleGroupRow_wrapped);
        ;
    }
    /**
     * Event raised when styling title and badge in series rows
    */
    get styleSeriesRow() {
        return this._styleSeriesRow;
    }
    set styleSeriesRow(ev) {
        if (this._styleSeriesRow_wrapped !== null) {
            this.i.styleSeriesRow = delegateRemove(this.i.styleSeriesRow, this._styleSeriesRow_wrapped);
            this._styleSeriesRow_wrapped = null;
            this._styleSeriesRow = null;
        }
        this._styleSeriesRow = ev;
        this._styleSeriesRow_wrapped = (o, e) => {
            let outerArgs = new IgrDataLegendStylingRowEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeStyleSeriesRow) {
                this.beforeStyleSeriesRow(this, outerArgs);
            }
            if (this._styleSeriesRow) {
                this._styleSeriesRow(this, outerArgs);
            }
        };
        this.i.styleSeriesRow = delegateCombine(this.i.styleSeriesRow, this._styleSeriesRow_wrapped);
        ;
    }
    /**
     * Event raised when styling title in the summary row
    */
    get styleSummaryRow() {
        return this._styleSummaryRow;
    }
    set styleSummaryRow(ev) {
        if (this._styleSummaryRow_wrapped !== null) {
            this.i.styleSummaryRow = delegateRemove(this.i.styleSummaryRow, this._styleSummaryRow_wrapped);
            this._styleSummaryRow_wrapped = null;
            this._styleSummaryRow = null;
        }
        this._styleSummaryRow = ev;
        this._styleSummaryRow_wrapped = (o, e) => {
            let outerArgs = new IgrDataLegendStylingRowEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeStyleSummaryRow) {
                this.beforeStyleSummaryRow(this, outerArgs);
            }
            if (this._styleSummaryRow) {
                this._styleSummaryRow(this, outerArgs);
            }
        };
        this.i.styleSummaryRow = delegateCombine(this.i.styleSummaryRow, this._styleSummaryRow_wrapped);
        ;
    }
    /**
     * Event raised when styling the label, value, and unit columns in series rows
    */
    get styleSeriesColumn() {
        return this._styleSeriesColumn;
    }
    set styleSeriesColumn(ev) {
        if (this._styleSeriesColumn_wrapped !== null) {
            this.i.styleSeriesColumn = delegateRemove(this.i.styleSeriesColumn, this._styleSeriesColumn_wrapped);
            this._styleSeriesColumn_wrapped = null;
            this._styleSeriesColumn = null;
        }
        this._styleSeriesColumn = ev;
        this._styleSeriesColumn_wrapped = (o, e) => {
            let outerArgs = new IgrDataLegendStylingColumnEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeStyleSeriesColumn) {
                this.beforeStyleSeriesColumn(this, outerArgs);
            }
            if (this._styleSeriesColumn) {
                this._styleSeriesColumn(this, outerArgs);
            }
        };
        this.i.styleSeriesColumn = delegateCombine(this.i.styleSeriesColumn, this._styleSeriesColumn_wrapped);
        ;
    }
    /**
     * Event raised when styling the label, value, and unit columns in summary row
    */
    get styleSummaryColumn() {
        return this._styleSummaryColumn;
    }
    set styleSummaryColumn(ev) {
        if (this._styleSummaryColumn_wrapped !== null) {
            this.i.styleSummaryColumn = delegateRemove(this.i.styleSummaryColumn, this._styleSummaryColumn_wrapped);
            this._styleSummaryColumn_wrapped = null;
            this._styleSummaryColumn = null;
        }
        this._styleSummaryColumn = ev;
        this._styleSummaryColumn_wrapped = (o, e) => {
            let outerArgs = new IgrDataLegendStylingColumnEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeStyleSummaryColumn) {
                this.beforeStyleSummaryColumn(this, outerArgs);
            }
            if (this._styleSummaryColumn) {
                this._styleSummaryColumn(this, outerArgs);
            }
        };
        this.i.styleSummaryColumn = delegateCombine(this.i.styleSummaryColumn, this._styleSummaryColumn_wrapped);
        ;
    }
}
