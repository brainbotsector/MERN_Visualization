import { IgrStyle } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { IgrShapeSeriesBase } from "./igr-shape-series-base";
import { ScatterPolygonSeries } from "./ScatterPolygonSeries";
import { ensureEnum, brushToString, stringToBrush } from "igniteui-react-core";
/**
 * Series class which renders polygons as Paths based on lists of points in the ItemsSource.
*/
export class IgrScatterPolygonSeries extends IgrShapeSeriesBase {
    createImplementation() {
        return new ScatterPolygonSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets whether the current series shows a polygon shape.
    */
    get isPolygon() {
        return this.i.fb;
    }
    /**
     * Overridden by derived series classes to indicate when marker-less display is preferred or not.
    */
    get isMarkerlessDisplayPreferred() {
        return this.i.e6;
    }
    /**
     * Returns whether the current series supports visual markers.
    */
    get hasMarkers() {
        return this.i.hasMarkers;
    }
    /**
     * The default style to apply to all Shapes in the series.
    */
    get shapeStyle() {
        const r = this.i.zq;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = new IgrStyle();
            if (r.$type) {
                e._implementation = r;
            }
            else {
                if (e.i.setNativeElement) {
                    e.i.setNativeElement(r);
                }
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set shapeStyle(v) {
        v == null ? this.i.zq = null : this.i.zq = v.i;
    }
    /**
     * Gets or sets the marker type for the current series object.
     * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
    */
    get markerType() {
        return this.i.ye;
    }
    set markerType(v) {
        this.i.ye = ensureEnum(MarkerType_$type, v);
    }
    /**
     * Gets or sets the MarkerTemplate for the current series object.
    */
    get markerTemplate() {
        return this.i.y5;
    }
    set markerTemplate(v) {
        this.i.y5 = v;
    }
    /**
     * Gets or sets thickness of the marker outline
    */
    get markerThickness() {
        return this.i.ym;
    }
    set markerThickness(v) {
        this.i.ym = +v;
    }
    /**
     * Gets the effective marker template for the current series object.
    */
    get actualMarkerTemplate() {
        return this.i.y3;
    }
    set actualMarkerTemplate(v) {
        this.i.y3 = v;
    }
    /**
     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
    */
    get markerBrush() {
        return brushToString(this.i.zm);
    }
    set markerBrush(v) {
        this.i.zm = stringToBrush(v);
    }
    /**
     * Gets the effective marker brush for the current series object.
    */
    get actualMarkerBrush() {
        return brushToString(this.i.zk);
    }
    set actualMarkerBrush(v) {
        this.i.zk = stringToBrush(v);
    }
    /**
     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
    */
    get markerOutline() {
        return brushToString(this.i.zn);
    }
    set markerOutline(v) {
        this.i.zn = stringToBrush(v);
    }
    /**
     * Gets the effective marker outline for the current series object.
    */
    get actualMarkerOutline() {
        return brushToString(this.i.zl);
    }
    set actualMarkerOutline(v) {
        this.i.zl = stringToBrush(v);
    }
    /**
     * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
    */
    get markerCollisionAvoidance() {
        return this.i.x5;
    }
    set markerCollisionAvoidance(v) {
        this.i.x5 = ensureEnum(CollisionAvoidanceType_$type, v);
    }
    /**
     * Gets or sets whether the marker outline is based on the marker brush of the series rather than the marker outlines collection.
    */
    get markerOutlineMode() {
        return this.i.yc;
    }
    set markerOutlineMode(v) {
        this.i.yc = ensureEnum(MarkerOutlineMode_$type, v);
    }
    /**
     * Gets or sets whether the marker fill is based on the marker outline of the series rather than the marker brushes collection.
    */
    get markerFillMode() {
        return this.i.x8;
    }
    set markerFillMode(v) {
        this.i.x8 = ensureEnum(MarkerFillMode_$type, v);
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.shapeStyle && this.shapeStyle.name && this.shapeStyle.name == name) {
            return this.shapeStyle;
        }
        return null;
    }
}
