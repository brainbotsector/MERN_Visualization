/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { DependencyProperty } from "igniteui-react-core";
import { ConsolidatedItemsPosition_$type } from "./ConsolidatedItemsPosition";
import { Defaults } from "./Defaults";
import { runOn, enumGetBox, markType, markDep, fromEnum } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
/**
 * @hidden
 */
export let ColumnSeries = /*@__PURE__*/ (() => {
    class ColumnSeries extends HorizontalAnchoredCategorySeries {
        bb() {
            return new ColumnSeries();
        }
        get_ek() {
            return true;
        }
        get_e6() {
            return true;
        }
        i0() {
            if (!isNaN_(this.iz)) {
                return super.i0();
            }
            return Defaults.h;
        }
        ci() {
            return new ColumnSeriesView(this);
        }
        px(a) {
            super.px(a);
            this.aau = a;
        }
        co() {
            if (this.cp == 0) {
                return 2;
            }
            return super.co();
        }
        xc() {
            return 1;
        }
        constructor() {
            super();
            this.aa0 = null;
            this.aav = 0;
            this.ab = ColumnSeries.$;
            this.aae = 2;
        }
        get_d1() {
            return true;
        }
        preferredCategoryMode(a) {
            return this.aae;
        }
        u5(a) {
            if (this.aa0 == null) {
                this.aa0 = runOn(this, this.aax);
            }
            let b = this.aah != null ? this.aah : this.yAxis;
            let c = this.aab;
            return this.y0.c$d(this, a, c, b, this.w2, this.x3(this.cl), this.x4(this.cl), this.aa0);
        }
        gf(a, b) {
            if (this.gi(a, b)) {
                return true;
            }
            if (this.vs(a, b)) {
                return true;
            }
            return false;
        }
        n7(a, b) {
            super.n7(a, b);
            let c = b;
            if (a && c.de != null) {
                c.de.count = 0;
            }
        }
        ib() {
            return this.aab.k4(this.cl.by, this.cl.bx, this.getEffectiveViewport1(this.cl));
        }
        yl(a, b) {
            super.yl(a, b);
            let c = a.f;
            if (!b.t()) {
                return;
            }
            let d = b.by;
            let e = b.bx;
            let f = this.getEffectiveViewport1(b);
            let g = new ScalerParams(0, d, e, this.aah.ch, f);
            g.b = this.id();
            let h = new ScalerParams(0, d, e, this.aab.ch, f);
            let i = this.aah;
            let j = i.ej(i.l7, g);
            let k = this.aab.k4(d, e, f);
            let l = this.aab;
            let m = b;
            if (isNaN_(k) || isInfinity(k)) {
                m.de.count = 0;
                return;
            }
            this.xa.a2(this, this.xu(), runOn(this, this.wv), this.x3(b), this.x4(b));
            this.xa.r = this.aay;
            this.xa.s = this.aaz;
            this.xa.k = this.aay;
            this.xa.l = this.aaz;
            let n = false;
            let o = this.xa.b;
            if (o != null) {
                n = true;
            }
            let p = this.aab.cn;
            let q = p ? this.aab : null;
            let r = this.valueColumn.count;
            let s = this.x3(b);
            let t = 0;
            for (let u = 0; u < c.count; ++u) {
                let v = c._inner[u][0] - 0.5 * k;
                let w = this.aax(c._inner[u]);
                let x = j;
                w = Math.max(w, -100);
                x = Math.min(x, e.bottom + 100);
                let y = Math.abs(x - w);
                if (isInfinity(y) || isNaN_(y)) {
                    continue;
                }
                let z = m.de.item(t);
                t++;
                z.width = k;
                z.height = y;
                let aa = this.xa.aw(r, u)[0];
                if (p && a.m != null && u >= 0 && u < a.m.count) {
                    aa = truncate(Math.round(a.m._inner[u]));
                }
                if (n) {
                    this.yh(c, u, r, l, h, b.q, aa);
                }
                if (z.dataContext != null) {
                    let ab = z.dataContext;
                    if (s == 1) {
                        if (aa >= 0 && aa < this.dd.count) {
                            if (q != null && q.i$b != null && q.i$b.count > aa) {
                                aa = q.i$b._inner[aa];
                            }
                            ab.item = this.dd.item(aa);
                        }
                    }
                    else {
                        ab.item = null;
                    }
                }
                this.xa.ad(z, false, false, false, false);
                z.ap = this.xa.k;
                z.aq = this.xa.l;
                m.dj(z, v, Math.min(x, w));
            }
            m.de.count = t;
            b.c1(a);
        }
        get aaw() {
            return this.aav;
        }
        set aaw(a) {
            if (this.aaw != a) {
                let b = this.aaw;
                this.aav = a;
                this.raisePropertyChanged("ConsolidatedColumnVerticalPosition", enumGetBox(ConsolidatedItemsPosition_$type, b), enumGetBox(ConsolidatedItemsPosition_$type, this.aaw));
            }
        }
        aax(a) {
            if (a == null || a.length < 3) {
                return NaN;
            }
            switch (this.aaw) {
                case 0: return a[1];
                case 1: return a[2];
                case 2: return (a[1] + a[2]) / 2;
                case 3:
                    let b = (a[1] + a[2]) / 2;
                    if (this.yAxis == null) {
                        return b;
                    }
                    let c = this.yAxis.em(b, new ScalerParams(1, this.c1.vx, this.c1.vw, this.yAxis.ch));
                    if (c < this.yAxis.l7) {
                        return a[2];
                    }
                    else {
                        return a[1];
                    }
                case 4:
                    let d = (a[1] + a[2]) / 2;
                    let e = this.yAxis.em(d, new ScalerParams(1, this.c1.vx, this.c1.vw, this.yAxis.ch));
                    if (this.yAxis == null) {
                        return d;
                    }
                    if (e < this.yAxis.l7) {
                        return a[1];
                    }
                    else {
                        return a[2];
                    }
                default: return (a[1] + a[2]) / 2;
            }
        }
        get useHighMarkerFidelity() {
            return this.xy;
        }
    }
    ColumnSeries.$t = /*@__PURE__*/ markType(ColumnSeries, 'ColumnSeries', HorizontalAnchoredCategorySeries.$);
    ColumnSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ColumnSeries, 'raisePropertyChanged', ['RadiusX:aay:aa4', [1, 0], 'RadiusY:aaz:aa5', [1, 0]]);
    return ColumnSeries;
})();
/**
 * @hidden
 */
export let ColumnSeriesView = /*@__PURE__*/ (() => {
    class ColumnSeriesView extends AnchoredCategorySeriesView {
        au() {
            super.au();
            this.df = new List$1(Rectangle.$, 0);
            if (!this.q) {
                this.dd.i5 = Defaults.i;
                this.dd.vp = Defaults.c;
            }
        }
        constructor(a) {
            super(a);
            this.dd = null;
            this.df = null;
            this.dk = new Rectangle();
            this.de = null;
            this.dd = a;
            this.de = ((() => {
                let $ret = new Pool$1(Rectangle.$);
                $ret.create = runOn(this, this.dl);
                $ret.activate = runOn(this, this.dg);
                $ret.disactivate = runOn(this, this.di);
                $ret.destroy = runOn(this, this.dh);
                return $ret;
            })());
        }
        dl() {
            let a = new Rectangle();
            this.df.add(a);
            a._visibility = 1;
            return a;
        }
        dg(a) {
            a._visibility = 0;
        }
        di(a) {
            a._visibility = 1;
        }
        dh(a) {
            this.df.remove(a);
        }
        dj(a, b, c) {
            if (!this.isDirty) {
                this.as();
            }
            a.o = c;
            a.n = b;
        }
        ac(a) {
            return this.df._inner[a];
        }
        ab(a) {
            let b = this.df._inner[a];
            this.dk._visibility = b._visibility;
            this.dk.n = b.n;
            this.dk.o = b.o;
            this.dk.width = b.width;
            this.dk.height = b.height;
            let c = this.bs(a);
            this.dk._fill = c;
            this.dk._stroke = c;
            this.dk.ad = this.e.hv + 3;
            return this.dk;
        }
        a8(a, b) {
            super.a8(a, b);
            if (a.d) {
                for (let c = 0; c < this.df.count; c++) {
                    let d = this.aa(c, b);
                    this.bf(d, c, b);
                    a.w(d);
                }
            }
        }
        an(a) {
            super.an(a);
            let b = 0;
            let c = new List$1(Rectangle.$, 0);
            for (let d of fromEnum(this.de.a)) {
                c.add(d);
            }
            c.aa((e, f) => {
                if (e.n < f.n) {
                    return -1;
                }
                else if (e.n > f.n) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
            for (let e of fromEnum(c)) {
                this.e.a4.exportRectangleData(a, e, "column" + b, ["Main", "Fill"]);
            }
            b++;
        }
    }
    ColumnSeriesView.$t = /*@__PURE__*/ markType(ColumnSeriesView, 'ColumnSeriesView', AnchoredCategorySeriesView.$);
    return ColumnSeriesView;
})();
