/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ShapeSeriesBase } from "./ShapeSeriesBase";
import { ShapeAxisInfoCache } from "./ShapeAxisInfoCache";
import { StyleSelector } from "./StyleSelector";
import { DependencyProperty } from "igniteui-react-core";
import { Style } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { DataTemplate } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { Base, runOn, enumGetBox, Number_$type, typeCast, fromEnum, markType, markDep, PointUtil } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { ShapeSeriesViewBase } from "./ShapeSeriesViewBase";
import { Marker } from "./Marker";
import { MarkerSeries } from "./MarkerSeries";
import { BrushUtil } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { HashPool$2 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { RectUtil } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { NumericMarkerManager } from "./NumericMarkerManager";
import { DataTemplateMeasureInfo } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { Defaults } from "./Defaults";
import { DataTemplatePassInfo } from "igniteui-react-core";
import { DataTemplateRenderInfo } from "igniteui-react-core";
import { MarkerVisualData } from "./MarkerVisualData";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let ScatterPolygonSeries = /*@__PURE__*/ (() => {
    class ScatterPolygonSeries extends ShapeSeriesBase {
        bb() {
            return new ScatterPolygonSeries();
        }
        get_fb() {
            return true;
        }
        get_e6() {
            return true;
        }
        constructor() {
            super();
            this.yi = null;
            this.yf = new ScalerParams(1, ScatterPolygonSeries.zo, ScatterPolygonSeries.zo, false);
            this.yg = new ScalerParams(1, ScatterPolygonSeries.zo, ScatterPolygonSeries.zo, false);
            this.y4 = null;
            this.ya = 1;
            this.x6 = 1;
            this.ab = ScatterPolygonSeries.$;
        }
        wl() {
            return this.yk();
        }
        xn(a) {
            let b = a;
            b.cy(this.zq);
            b.cz(this.yj);
            super.xn(a);
            if (this.dt(a)) {
                return;
            }
            let c, d;
            let e = a.getViewInfo(c, d);
            c = e.p0;
            d = e.p1;
            let f = this.getEffectiveViewport1(a);
            this.yf = new ScalerParams(1, d, c, this.vp.ch);
            this.yf.c = f;
            this.yg = new ScalerParams(1, d, c, this.vr.ch);
            this.yg.c = f;
            if (c.width < 1 || c.height < 1) {
                return;
            }
            this.yi = ((() => {
                let $ret = new ShapeAxisInfoCache();
                $ret.a = this.vp;
                $ret.b = this.vr;
                $ret.e = this.vp.ch;
                $ret.f = this.vr.ch;
                $ret.d = this.dd;
                $ret.c = this.v4;
                return $ret;
            })());
            if (this.yk()) {
                let g = new Dictionary$2(Base.$, OwnedPoint.$, 0);
                b.dg.l(g, 400, d, c, this.hu);
                b.dg.j(g, false);
                if (this.wj()) {
                    this.y1(a);
                }
            }
        }
        y1(a) {
            a.dk = true;
            this.vw.ay(this, this.wj(), runOn(this, this.vj));
            let b = this.vw.d;
            let c = b != null;
            let d = this.getEffectiveViewport1(a);
            let e = this.dd == null ? 0 : this.dd.count;
            a.dw((f) => {
                if (f._visibility == 0) {
                    let g = f.ak;
                    let h = f.content;
                    if (h == null) {
                        h = new DataContext();
                        f.content = h;
                    }
                    if (c) {
                        this.xi(g, e, a.q);
                    }
                    this.vw.ac(f, h);
                }
            });
        }
        yk() {
            return this.y4 != null && ((this.ye != 1 && this.ye != 0) || this.y5 != null);
        }
        ci() {
            return new ScatterPolygonSeriesView(this);
        }
        px(a) {
            super.px(a);
            this.yh = a;
        }
        get_hasMarkers() {
            return true;
        }
        t8() {
            return this.zk;
        }
        t9() {
            return this.zl;
        }
        rs() {
            return this.y3;
        }
        lf() {
            return this.lg(this, this.y4);
        }
        h3() {
            return this.ym;
        }
        get yb() {
            return this.ya;
        }
        set yb(a) {
            this.ya = a;
        }
        yd() {
            if (this.yc == 0) {
                return 1;
            }
            return this.yc;
        }
        re(a) {
            super.re(a);
            this.yc = a;
        }
        get x7() {
            return this.x6;
        }
        set x7(a) {
            this.x6 = a;
        }
        x9() {
            if (this.x8 == 0) {
                return 2;
            }
            return this.x8;
        }
        rd(a) {
            super.rd(a);
            this.x8 = a;
        }
        rf(a) {
            super.rf(a);
            this.ym = a;
        }
        ra() {
            super.ra();
            if (this.index < 0) {
                return;
            }
            if (this.y5 != null) {
                this.yh.dv();
                this.yh.ds();
            }
            else {
                let a = MarkerSeries.vq(this, this.ye);
                let b = MarkerSeries.vz(a);
                if (b == null) {
                    this.y3 = MarkerSeries.wd;
                }
                else {
                    this.yh.dp(b);
                }
            }
            if (this.zm != null && this.ye != 13) {
                this.q1("ActualMarkerBrush");
                let c = this.zk;
                this.yh.dt();
                this.yh.dq();
                let d = this.zk;
                let e = this.e2("ActualMarkerBrush", this.hc.f > 0 ? this.hc.d() : null, c, d);
                this.q3("ActualMarkerBrush", e);
            }
            else {
                if (this.ye == 13) {
                    this.zk = this.cl.bt();
                }
                else {
                    if (this.x7 != 2) {
                        if (this.c1 != null) {
                            let f = this.c1.ur(this.index);
                            if (!isNaN_(this.ht) && this.ht != 1) {
                                f = BrushUtil.q(f, this.ht);
                            }
                            this.zk = f;
                        }
                        else {
                            this.zk = null;
                        }
                    }
                }
            }
            if (this.zn != null) {
                this.yh.du();
                this.yh.dr();
            }
            else {
                if (this.ye == 13) {
                    this.zl = this.cl.bt();
                }
                else {
                    if (this.yc == 2) {
                        this.zl = this.zk;
                    }
                    else {
                        this.zl = this.c1 == null ? null : this.c1.us(this.index);
                    }
                }
            }
            if (this.x7 == 2 && this.zm == null && this.ye != 13) {
                if (this.zl != null) {
                    let g = this.zl;
                    if (!isNaN_(this.ht) && this.ht != 1) {
                        g = BrushUtil.q(g, this.ht);
                    }
                    this.zk = g;
                }
                else {
                    this.zk = null;
                }
            }
        }
        po() {
            super.po();
            this.yb = this.yd();
            this.x7 = this.x9();
        }
        p5(a, b, c, d) {
            super.p5(a, b, c, d);
            switch (b) {
                case ScatterPolygonSeries.$$p[3]:
                case ScatterPolygonSeries.$$p[11]:
                case ScatterPolygonSeries.$$p[7]:
                case ScatterPolygonSeries.$$p[9]:
                case ScatterPolygonSeries.$$p[10]:
                    this.qb(b);
                    this.pz();
                    break;
                case ScatterPolygonSeries.$$p[6]:
                    this.yb = this.yd();
                    this.qb(null);
                    this.pz();
                    break;
                case ScatterPolygonSeries.$$p[5]:
                    this.x7 = this.x9();
                    this.qb(null);
                    this.pz();
                    break;
                case ScatterPolygonSeries.$$p[2]:
                    this.y4 = d;
                    if (c == MarkerSeries.wd || d == MarkerSeries.wd || (c == null || d != null)) {
                        this.yh.dx();
                        this.qm(false);
                    }
                    this.cl.bl();
                    if (this.toolTip != null && this.e3) {
                        this.a2.a$ar(this, this.toolTip);
                    }
                    this.qm(false);
                    this.ph();
                    break;
                case ScatterPolygonSeries.$$p[12]:
                    this.yh.cy(this.zq);
                    this.qm(false);
                    this.ph();
                    break;
                case ScatterPolygonSeries.$$p[13]:
                    this.yh.cz(this.yj);
                    this.qm(false);
                    this.ph();
                    break;
                case ScatterPolygonSeries.$$p[4]:
                    this.qm(false);
                    this.ph();
                    break;
                case ScatterPolygonSeries.$$p[0]:
                case ScatterPolygonSeries.$$p[1]:
                    if (this.yk()) {
                        this.qm(false);
                    }
                    break;
            }
        }
        au(a, b) {
            let c = this.yh.b4(a);
            let d = null;
            if (c != null) {
                d = c.content;
            }
            if (d != null) {
                return d;
            }
            return super.au(a, b);
        }
        y2(a, b) {
            let c = new List$1(Base.$, 0);
            for (let d of fromEnum(b.c)) {
                if (!a.containsKey(d)) {
                    c.add1(d);
                }
            }
            for (let e of fromEnum(c)) {
                b.h(e);
            }
        }
        dz(a, b, c, d) {
            if (!this.hasMarkers) {
                return false;
            }
            let e = this.vp;
            let f = new ScalerParams(1, this.c1.vh, this.u9, e.ch);
            f.c = this.getEffectiveViewport1(this.cl);
            let g = this.vr;
            let h = new ScalerParams(1, this.c1.vh, this.u9, g.ch);
            h.c = this.getEffectiveViewport1(this.cl);
            a.clear();
            this.yh.dw((i) => {
                if (i._visibility == 0) {
                    let j = new SeriesPointOfInterest();
                    let k = i.n;
                    let l = i.o;
                    if (k < this.u9.left || k > this.u9.right || l < this.u9.top || l > this.u9.bottom) {
                        return;
                    }
                    j.b = e.em(k, f);
                    j.c = g.em(l, h);
                    j.a = i.content;
                    a.add(j);
                }
            });
            return true;
        }
        x4(a, b, c, d, e) {
            if (c == null || c.length != this.yi.d.count) {
                c = new Array(this.yi.d.count);
                for (let f = 0; f < this.yi.d.count; f++) {
                    c[f] = PointUtil.create();
                }
            }
            let g = ((() => {
                let $ret = new ScalerParams(1, d, e, this.vp.ch);
                $ret.c = this.getEffectiveViewport1(a);
                return $ret;
            })());
            let h = ((() => {
                let $ret = new ScalerParams(1, d, e, this.vr.ch);
                $ret.c = this.getEffectiveViewport1(a);
                return $ret;
            })());
            let i = this.u1(a);
            let j = this.yi.a.em(i.left, g);
            let k = this.yi.a.em(i.right, g);
            let l = this.yi.b.em(i.bottom, h);
            let m = this.yi.b.em(i.top, h);
            if (this.yi.e) {
                let n = j;
                j = k;
                k = n;
            }
            if (this.yi.f) {
                let o = l;
                l = m;
                m = o;
            }
            let p = this.yi;
            let q = p.a;
            let r = p.b;
            let s;
            let t;
            let u = g.d.left;
            let v = g.d.right;
            let w = h.d.top;
            let x = h.d.bottom;
            for (let y = 0; y < this.yi.d.count; y++) {
                s = 0;
                t = 0;
                let z = null;
                let aa = a.cc.tryGetValue(y, z);
                z = aa.p1;
                if (z == null) {
                    c[y].x = NaN;
                    c[y].y = NaN;
                }
                else {
                    let ab = z.c;
                    let ac = RectUtil.l(ab);
                    s = ac.x;
                    t = ac.y;
                    if (s >= u && s <= v && t >= w && t <= x) {
                        c[y].x = s;
                        c[y].y = t;
                    }
                    else {
                        c[y].x = NaN;
                        c[y].y = NaN;
                    }
                }
            }
            return c;
        }
        yl(a, b) {
            if (b == null) {
                b = new List$1(Number_$type, 2, a.e);
            }
            else {
                b.clear();
            }
            let c = 0;
            let d = this.dd;
            for (let e of fromEnum(a.c)) {
                b.add(d.indexOf(e));
                c++;
            }
            return b;
        }
    }
    ScatterPolygonSeries.$t = /*@__PURE__*/ markType(ScatterPolygonSeries, 'ScatterPolygonSeries', ShapeSeriesBase.$);
    ScatterPolygonSeries.zo = /*@__PURE__*/ new Rect(0, 0, 0, 1, 1);
    ScatterPolygonSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ScatterPolygonSeries, 'raisePropertyChanged', ['ActualMarkerBrush:zk:y6', [Brush.$], 'ActualMarkerOutline:zl:y7', [Brush.$], 'ActualMarkerTemplate:y3:y8', [DataTemplate.$, null], 'MarkerBrush:zm:y9', [Brush.$], 'MarkerCollisionAvoidance:x5:za', [CollisionAvoidanceType_$type, /*@__PURE__*/ enumGetBox(CollisionAvoidanceType_$type, 0)], 'MarkerFillMode:x8:zb', [MarkerFillMode_$type, /*@__PURE__*/ enumGetBox(MarkerFillMode_$type, 0)], 'MarkerOutlineMode:yc:zc', [MarkerOutlineMode_$type, /*@__PURE__*/ enumGetBox(MarkerOutlineMode_$type, 0)], 'MarkerOutline:zn:zd', [Brush.$], 'MarkerStyle:zp:ze', [Style.$], 'MarkerTemplate:y5:zf', [DataTemplate.$, null], 'MarkerThickness:ym:zg', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'MarkerType:ye:zh', [MarkerType_$type, /*@__PURE__*/ enumGetBox(MarkerType_$type, 1)], 'ShapeStyle:zq:zi', [Style.$, null], 'ShapeStyleSelector:yj:zj', [StyleSelector.$, null]]);
    return ScatterPolygonSeries;
})();
/**
 * @hidden
 */
export let ScatterPolygonSeriesView = /*@__PURE__*/ (() => {
    class ScatterPolygonSeriesView extends ShapeSeriesViewBase {
        constructor(a) {
            super(a);
            this.dk = false;
            this.db = null;
            this.dm = null;
            this.dh = null;
            this.df = null;
            this.dj = false;
            this.di = null;
            this.dn = null;
            this.dc = new Marker();
            this.d4 = null;
            this.dc = new Marker();
            this.dc.content = new DataContext();
            this.dh = a;
            this.di = new HashPool$2(Base.$, Marker.$);
            this.dn = new List$1(Marker.$, 0);
            this.dy(this.di);
            this.df = new NumericMarkerManager(1, (b) => this.di.item(b), (b) => this.dh.yi.d.item(b), runOn(this, this.d2), runOn(this, this.da), runOn(this, this.dl), () => this.dh.x5);
            this.df.q = runOn(this, this.d5);
        }
        au() {
            super.au();
            if (!this.q) {
                this.dh.zn = Defaults.am;
                this.dh.i5 = Defaults.z;
                this.dh.ym = Defaults.y;
                this.dh.ye = Defaults.f;
                this.dh.x8 = Defaults.b;
            }
        }
        get dg() {
            return this.df;
        }
        d2(a) {
            this.dh.y2(a, this.di);
        }
        da() {
            this.db = this.dh.x4(this, this.di, this.db, this.by, this.bx);
            return this.db;
        }
        dl() {
            this.dm = this.dh.yl(this.di, this.dm);
            return this.dm;
        }
        c5(a, b) {
            return this.c6(a, b, true);
        }
        cm(a, b, c) {
            super.cm(a, b, c);
            ShapeSeriesViewBase.cl(this, a, b);
        }
        ck(a, b) {
            let c = a;
            if (c == null) {
                return;
            }
            c.an = b;
        }
        dw(a) {
            this.di.f(a);
        }
        dy(a) {
            a.create = runOn(this, this.de);
            a.destroy = runOn(this, this.d0);
            a.activate = runOn(this, this.dz);
            a.disactivate = runOn(this, this.d1);
        }
        de() {
            let a = new Marker();
            if (!this.dj) {
                a.content = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this.e;
                    return $ret;
                })());
            }
            a.ah = this.e.y3;
            this.dn.add(a);
            return a;
        }
        b4(a) {
            let b = this.dd(a, 0);
            if (b == null) {
                b = this.dd(a, 3);
            }
            return b;
        }
        dd(a, b) {
            let c;
            let d;
            let e;
            let f;
            for (let g = this.dn.count - 1; g >= 0; g--) {
                let h = this.dn._inner[g];
                if (h._visibility == 1 || h._opacity == 0) {
                    continue;
                }
                c = (h.m / 2) + b;
                d = (h.l / 2) + b;
                e = h.ai;
                f = h.aj;
                if ((h.n + e) - c <= a.x && (h.n + e) + c >= a.x && (h.o + f) - d <= a.y && (h.o + f) + d >= a.y) {
                    return h;
                }
            }
            return null;
        }
        d0(a) {
            a.content = null;
            this.dn.remove(a);
        }
        dz(a) {
            a._visibility = 0;
        }
        d1(a) {
            if (a.content != null) {
                (typeCast(DataContext.$, a.content)).item = null;
            }
            a._visibility = 1;
        }
        d3(a) {
            this.dj = a;
        }
        bj(a, b) {
            super.bj(a, b);
            if (!this.dk) {
                let c = a;
                let d = c.content;
                if (d != null) {
                    if (this.dh.zk != null) {
                        d.actualItemBrush = this.dh.zk;
                    }
                    else {
                        d.actualItemBrush = this.b6.tw;
                    }
                    if (this.dh.zk != null) {
                        d.outline = this.dh.zl;
                    }
                    else {
                        d.outline = this.b6.t0;
                    }
                    d.thickness = this.dh.ym;
                }
            }
        }
        bk(a, b) {
            super.bk(a, b);
            let c = a;
            this.dc._visibility = c._visibility;
            this.dc.ah = c.ah;
            this.dc.width = c.width;
            this.dc.height = c.height;
            this.dc.m = c.m;
            this.dc.l = c.l;
            this.dc.n = c.n;
            this.dc.o = c.o;
            let d = this.bs(b);
            let e = this.dc.content;
            let f = c.content;
            e.item = f.item;
            e.series = f.series;
            e.thickness = f.thickness;
            if (e != null) {
                e.actualItemBrush = d;
                e.outline = d;
                e.thickness = this.dh.ym + 3;
            }
        }
        a7(a, b) {
            super.a7(a, b);
            let c = new DataTemplatePassInfo();
            c.isHitTestRender = b;
            c.context = a.h();
            c.viewportTop = this.bx.top;
            c.viewportLeft = this.bx.left;
            c.viewportWidth = this.bx.width;
            c.viewportHeight = this.bx.height;
            c.passID = "Markers";
            let d = new DataTemplateRenderInfo();
            d.passInfo = c;
            d.isHitTestRender = b;
            let e = new DataTemplateMeasureInfo();
            e.passInfo = c;
            let f = false;
            let g = a.h();
            e.context = g;
            d.context = g;
            let h = 0;
            let i = 0;
            if (this.dh.y3 != null && this.dh.y3.passStarting != null) {
                this.dh.y3.passStarting(c);
            }
            for (let j = 0; j < this.dn.count; j++) {
                let k = this.dn._inner[j];
                if (k._visibility == 1) {
                    continue;
                }
                this.bi(k, j, b);
                if (b) {
                    k = this.dc;
                }
                if (!f) {
                    e.width = k.width;
                    e.height = k.height;
                    e.renderOffsetX = 0;
                    e.renderOffsetY = 0;
                    e.renderContext = a;
                    let l = k.ah;
                    if (l.measure != null) {
                        e.data = k.content;
                        l.measure(e);
                        f = e.isConstant;
                        if (f) {
                            h = e.width;
                            i = e.height;
                        }
                    }
                    d.availableWidth = e.width;
                    d.availableHeight = e.height;
                    d.renderOffsetX = e.renderOffsetX;
                    d.renderOffsetY = e.renderOffsetY;
                    d.renderContext = a;
                }
                else {
                    d.availableWidth = h;
                    d.availableHeight = i;
                }
                if (!isNaN_(k.width) && !isInfinity(k.width)) {
                    d.availableWidth = k.width;
                }
                if (!isNaN_(k.height) && !isInfinity(k.height)) {
                    d.availableHeight = k.height;
                }
                a.q(d, k);
                k.m = d.availableWidth;
                k.l = d.availableHeight;
                k.ai = d.renderOffsetX;
                k.aj = d.renderOffsetY;
            }
            if (this.dh.y3 != null && this.dh.y3.passCompleted != null) {
                this.dh.y3.passCompleted(c);
            }
        }
        dv() {
            this.dh.y3 = null;
        }
        ds() {
            this.dh.y3 = null;
            this.dh.y3 = this.dh.y5;
        }
        dt() {
            this.dh.zk = null;
        }
        dq() {
            this.dh.zk = null;
            if (!isNaN_(this.e.ht) && this.e.ht != 1) {
                let a = BrushUtil.q(this.dh.zm, this.e.ht);
                this.dh.zk = a;
            }
            else {
                this.dh.zk = this.dh.zm;
            }
        }
        du() {
            this.dh.zl = null;
        }
        dr() {
            this.dh.zl = null;
            this.dh.zl = this.dh.zn;
        }
        dp(a) {
            switch (a) {
                case "CircleMarkerTemplate":
                    this.dh.y3 = this.dh.c1.rj;
                    break;
                case "TriangleMarkerTemplate":
                    this.dh.y3 = this.dh.c1.rs;
                    break;
                case "PyramidMarkerTemplate":
                    this.dh.y3 = this.dh.c1.rp;
                    break;
                case "SquareMarkerTemplate":
                    this.dh.y3 = this.dh.c1.rq;
                    break;
                case "DiamondMarkerTemplate":
                    this.dh.y3 = this.dh.c1.rk;
                    break;
                case "PentagonMarkerTemplate":
                    this.dh.y3 = this.dh.c1.rn;
                    break;
                case "HexagonMarkerTemplate":
                    this.dh.y3 = this.dh.c1.rl;
                    break;
                case "TetragramMarkerTemplate":
                    this.dh.y3 = this.dh.c1.rn;
                    break;
                case "PentagramMarkerTemplate":
                    this.dh.y3 = this.dh.c1.ro;
                    break;
                case "HexagramMarkerTemplate":
                    this.dh.y3 = this.dh.c1.rm;
                    break;
            }
        }
        dx() {
            for (let a of fromEnum(this.dn)) {
                a.ah = this.dh.y3;
            }
            this.as();
        }
        d5(a) {
            if (this.d4 == null) {
                this.d4 = new DataTemplateMeasureInfo();
                this.d4.context = this.k.h();
            }
            this.d4.width = a.width;
            this.d4.height = a.height;
            this.d4.data = a.content;
            let b = a.ah;
            if (b.measure != null) {
                b.measure(this.d4);
            }
            return new Size(1, this.d4.width, this.d4.height);
        }
        an(a) {
            let b = a;
            super.an(b);
            for (let c of fromEnum(this.di.c)) {
                let d = this.di.item(c);
                if (d._visibility != 1) {
                    let e = typeCast(ScatterPolygonSeries.$, this.e);
                    let f = this.e.a4.getMarkerVisualData(e, d, e.y3);
                    b.markerShapes.add(typeCast(MarkerVisualData.$, f));
                }
            }
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'><span";
            let b = this.e.a2.a$t(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.dh.title + "</span><br/>";
            a += "</div>";
            return a;
        }
    }
    ScatterPolygonSeriesView.$t = /*@__PURE__*/ markType(ScatterPolygonSeriesView, 'ScatterPolygonSeriesView', ShapeSeriesViewBase.$);
    return ScatterPolygonSeriesView;
})();
