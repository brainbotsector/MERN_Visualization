/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Series } from "./Series";
import { DependencyProperty } from "igniteui-react-core";
import { IEnumerable_$type, runOn, delegateCombine, delegateRemove, typeCast, Point_$type, markType, markDep } from "igniteui-react-core";
import { NumericXAxis } from "./NumericXAxis";
import { NumericYAxis } from "./NumericYAxis";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { Triangulator } from "igniteui-react-core";
import { TriangulationStatusEventArgs } from "igniteui-react-core";
import { FastItemsSource } from "igniteui-react-core";
import { SeriesViewer } from "./SeriesViewer";
import { Axis } from "./Axis";
import { AxisRange } from "./AxisRange";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
/**
 * @hidden
 */
export let ScatterTriangulationSeries = /*@__PURE__*/ (() => {
    class ScatterTriangulationSeries extends Series {
        constructor() {
            super(...arguments);
            this.vk = null;
            this.vl = null;
            this.vt = false;
            this.vg = null;
            this.triangulationStatusChanged = null;
            this.vw = null;
            this.vh = null;
            this.vi = null;
            this.vj = null;
        }
        n4() {
            super.n4();
            this.vd = null;
            this.ve = null;
        }
        j5(a, b) {
            let c = this.mh(b);
            if (c == ScatterTriangulationSeries.$$p[8]) {
                return this.j6(a, b, this.wf);
            }
            if (c == ScatterTriangulationSeries.$$p[12]) {
                return this.j6(a, b, this.wn);
            }
            return super.j5(a, b);
        }
        li(a) {
            let b = this.mh(a);
            if (b == ScatterTriangulationSeries.$$p[8]) {
                return this.wf;
            }
            if (b == ScatterTriangulationSeries.$$p[12]) {
                return this.wn;
            }
            return super.li(a);
        }
        get vq() {
            return this.vk;
        }
        set vq(a) {
            let b = this.vq != a;
            if (b) {
                let c = this.vq;
                this.vk = a;
                this.raisePropertyChanged("XColumn", c, this.vq);
            }
        }
        get vr() {
            return this.vl;
        }
        set vr(a) {
            let b = this.vr != a;
            if (b) {
                let c = this.vr;
                this.vl = a;
                this.raisePropertyChanged("YColumn", c, this.vr);
            }
        }
        qn(a) {
            let b = this.dd != null && this.vs == null && this.vw == null && this.vq != null && this.vr != null && this.vq.count >= 3 && this.vr.count >= 3 && !this.vt;
            if (b) {
                this.wr();
                this.vt = true;
            }
        }
        wr() {
            this.vg = new Triangulator(this.dd.count, this.vq, this.vr);
            let a = this.vg;
            a.triangulationStatusChanged = delegateCombine(a.triangulationStatusChanged, runOn(this, this.ws));
            this.vg.y();
        }
        wp() {
            if (this.vg == null) {
                return;
            }
            this.vg.r();
            let a = this.vg;
            a.triangulationStatusChanged = delegateRemove(a.triangulationStatusChanged, runOn(this, this.ws));
            this.vg = null;
        }
        ws(a, b) {
            if (this.triangulationStatusChanged != null) {
                this.triangulationStatusChanged(this, new TriangulationStatusEventArgs(b.currentStatus));
            }
            if (b.currentStatus >= 100) {
                if (this.vg == null) {
                    return;
                }
                let c = this.vg;
                c.triangulationStatusChanged = delegateRemove(c.triangulationStatusChanged, runOn(this, this.ws));
                this.vw = this.vg.n();
                this.vg = null;
                let d = ((() => {
                    let $ret = new FastItemsSource();
                    $ret.e = this.vw;
                    return $ret;
                })());
                this.vn = this.vm(d, "v1");
                this.vo = this.vm(d, "v2");
                this.vp = this.vm(d, "v3");
                this.qm(false);
            }
        }
        vm(a, b) {
            if (b == null) {
                return a.registerColumnInt(null, null, false);
            }
            let c = null;
            let d = SeriesViewer.cu(b, this.coercionMethods);
            c = d.a;
            return a.registerColumnInt(b, c, this.expectFunctions);
        }
        p5(a, b, c, d) {
            super.p5(a, b, c, d);
            switch (b) {
                case ScatterTriangulationSeries.$$p[6]:
                case ScatterTriangulationSeries.$$p[10]:
                case ScatterTriangulationSeries.$$p[7]:
                case ScatterTriangulationSeries.$$p[11]:
                    this.pb();
                    break;
                case "FastItemsSource":
                    let e = typeCast(IFastItemsSource_$type, c);
                    if (e != null) {
                        e.deregisterColumn(this.vq);
                        e.deregisterColumn(this.vr);
                        this.vq = null;
                        this.vr = null;
                    }
                    this.wq();
                    let f = typeCast(IFastItemsSource_$type, d);
                    if (f != null) {
                        this.vq = this.da(this.wf);
                        this.vr = this.da(this.wn);
                    }
                    this.qm(this.f0 && c != null);
                    break;
                case ScatterTriangulationSeries.$$p[8]:
                    if (this.dd != null) {
                        this.dd.deregisterColumn(this.vq);
                        this.vq = this.da(this.wf);
                    }
                    this.wq();
                    this.qm(false);
                    this.ph();
                    break;
                case ScatterTriangulationSeries.$$p[12]:
                    if (this.dd != null) {
                        this.dd.deregisterColumn(this.vr);
                        this.vr = this.da(this.wn);
                    }
                    this.wq();
                    this.qm(false);
                    this.ph();
                    break;
                case ScatterTriangulationSeries.$$p[5]:
                    if (c != null) {
                        (typeCast(Axis.$, c)).b0(this);
                    }
                    if (d != null) {
                        (typeCast(Axis.$, d)).ct(this);
                    }
                    if ((this.vd != null && !this.vd.c1()) || (d == null && c != null)) {
                        this.qm(false);
                    }
                    this.ph();
                    break;
                case ScatterTriangulationSeries.$$p[9]:
                    if (c != null) {
                        (typeCast(Axis.$, c)).b0(this);
                    }
                    if (d != null) {
                        (typeCast(Axis.$, d)).ct(this);
                    }
                    if ((this.ve != null && !this.ve.c1()) || (d == null && c != null)) {
                        this.qm(false);
                    }
                    this.ph();
                    break;
                case ScatterTriangulationSeries.$$p[4]:
                    if (this.trianglesSource != null) {
                        this.wp();
                        this.vs = ((() => {
                            let $ret = new FastItemsSource();
                            $ret.e = this.trianglesSource;
                            return $ret;
                        })());
                    }
                    else {
                        this.vs = null;
                    }
                    break;
                case ScatterTriangulationSeries.$$p[0]:
                    let g = typeCast(IFastItemsSource_$type, c);
                    if (g != null) {
                        g.deregisterColumn(this.vn);
                        g.deregisterColumn(this.vo);
                        g.deregisterColumn(this.vp);
                        this.vn = null;
                        this.vo = null;
                        this.vp = null;
                    }
                    let h = typeCast(IFastItemsSource_$type, d);
                    if (h != null) {
                        this.vn = this.vm(h, this.v3);
                        this.vo = this.vm(h, this.v5);
                        this.vp = this.vm(h, this.v7);
                    }
                    this.qm(false);
                    this.ph();
                    break;
                case ScatterTriangulationSeries.$$p[1]:
                    if (this.vs != null) {
                        this.vs.deregisterColumn(this.vn);
                        this.vn = this.vm(this.vs, this.v3);
                    }
                    this.qm(false);
                    this.ph();
                    break;
                case ScatterTriangulationSeries.$$p[2]:
                    if (this.vs != null) {
                        this.vs.deregisterColumn(this.vo);
                        this.vo = this.vm(this.vs, this.v5);
                    }
                    this.qm(false);
                    this.ph();
                    break;
                case ScatterTriangulationSeries.$$p[3]:
                    if (this.vs != null) {
                        this.vs.deregisterColumn(this.vp);
                        this.vp = this.vm(this.vs, this.v7);
                    }
                    this.qm(false);
                    this.ph();
                    break;
                case "XColumn":
                    if (this.vd != null) {
                        this.vd.c1();
                    }
                    break;
                case "YColumn":
                    if (this.ve != null) {
                        this.ve.c1();
                    }
                    break;
            }
        }
        vv(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        vu(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        gw(a, b, c) {
            return super.gw(a, b, c) && this.dd != null && this.vd != null && this.ve != null && this.vd.bi != null && this.ve.bi != null && a.width > 0 && a.height > 0 && this.vn != null && this.vn.count > 0 && this.vo != null && this.vo.count > 0 && this.vp != null && this.vp.count > 0 && this.vq != null && this.vq.count > 0 && this.vr != null && this.vr.count > 0;
        }
        wq() {
            if (this.trianglesSource == null) {
                this.vw = null;
                this.vn = null;
                this.vo = null;
                this.vp = null;
                this.vt = false;
            }
        }
        o6() {
            super.o6();
            if (this.vd != null) {
                this.vd.h7();
            }
            if (this.ve != null) {
                this.ve.h7();
            }
        }
        oc(a, b, c, d) {
            super.oc(a, b, c, d);
            this.wq();
            this.qm(false);
        }
        aq(a) {
            if (a != null && a == this.vd && this.vq != null) {
                return new AxisRange(this.vq.minimum, this.vq.maximum);
            }
            if (a != null && a == this.ve && this.vr != null) {
                return new AxisRange(this.vr.minimum, this.vr.maximum);
            }
            return null;
        }
        rk(a, b) {
            this.qm(false);
        }
        rj(a, b) {
            this.qm(false);
        }
        get vn() {
            return this.vh;
        }
        set vn(a) {
            let b = this.vn != a;
            if (b) {
                let c = this.vn;
                this.vh = a;
                this.raisePropertyChanged("TriangleVertexColumn1", c, this.vn);
            }
        }
        get vo() {
            return this.vi;
        }
        set vo(a) {
            let b = this.vo != a;
            if (b) {
                let c = this.vo;
                this.vi = a;
                this.raisePropertyChanged("TriangleVertexColumn2", c, this.vo);
            }
        }
        get vp() {
            return this.vj;
        }
        set vp(a) {
            let b = this.vp != a;
            if (b) {
                let c = this.vp;
                this.vj = a;
                this.raisePropertyChanged("TriangleVertexColumn3", c, this.vp);
            }
        }
        get_fi() {
            return true;
        }
        get_e6() {
            return true;
        }
        getDataLegendSeriesContextAt(a, b) {
            let c = { $type: Point_$type, x: a, y: b };
            let d = this.j2(c);
            let e = d == null ? NaN : this.ic(d, "XMemberPath");
            let f = d == null ? NaN : this.ic(d, "YMemberPath");
            let g = new DataLegendSeriesValueInfo();
            g.l = e;
            g.a = 13;
            g.q = "X";
            g.r = this.wf != null ? this.wf : "X";
            g.s = this.wb != null ? this.wb : "X:";
            g.t = this.wd != null ? this.wd : "";
            let h = new DataLegendSeriesValueInfo();
            h.l = f;
            h.a = 14;
            h.q = "Y";
            h.r = this.wn != null ? this.wn : "Y";
            h.s = this.wj != null ? this.wj : "Y:";
            h.t = this.wl != null ? this.wl : "";
            let i = new DataLegendSeriesContext();
            i.e = ((() => {
                let $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
                $ret.add(g);
                $ret.add(h);
                return $ret;
            })());
            i.h = this.lh();
            return i;
        }
    }
    ScatterTriangulationSeries.$t = /*@__PURE__*/ markType(ScatterTriangulationSeries, 'ScatterTriangulationSeries', Series.$);
    ScatterTriangulationSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ScatterTriangulationSeries, 'raisePropertyChanged', ['FastTrianglesSource:vs:wt', [IFastItemsSource_$type, null], 'TriangleVertexMemberPath1:v3:wv', [2, null], 'TriangleVertexMemberPath2:v5:ww', [2, null], 'TriangleVertexMemberPath3:v7:wx', [2, null], 'TrianglesSource::wu', [IEnumerable_$type, null], 'XAxis:vd:wy', [NumericXAxis.$, null], 'XMemberAsLegendLabel:wb:wz', [2, null], 'XMemberAsLegendUnit:wd:w0', [2, null], 'XMemberPath:wf:w1', [2, null], 'YAxis:ve:w2', [NumericYAxis.$, null], 'YMemberAsLegendLabel:wj:w3', [2, null], 'YMemberAsLegendUnit:wl:w4', [2, null], 'YMemberPath:wn:w5', [2, null]]);
    return ScatterTriangulationSeries;
})();
