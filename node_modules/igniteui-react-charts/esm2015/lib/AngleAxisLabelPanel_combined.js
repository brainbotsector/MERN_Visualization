/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AxisLabelPanelBase } from "./AxisLabelPanelBase";
import { Boolean_$type, typeCast, markType, Point_$type, typeGetValue, fromEnum, runOn, Number_$type, enumGetBox, markDep } from "igniteui-react-core";
import { AxisLabelPanelBaseView } from "./AxisLabelPanelBaseView";
import { Rect } from "igniteui-react-core";
import { Extensions } from "igniteui-react-core";
import { Axis } from "./Axis";
import { List$1 } from "igniteui-react-core";
import { AxisAngleLabelMode_$type } from "./AxisAngleLabelMode";
import { LabelPosition } from "./LabelPosition";
import { XamDataChart } from "./XamDataChart";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { IAngleScaler_$type } from "./IAngleScaler";
import { CategoryAxisRenderer } from "./CategoryAxisRenderer";
import { DependencyProperty } from "igniteui-react-core";
import { PolarAxisRenderingManager } from "./PolarAxisRenderingManager";
import { AxisLabelManager } from "./AxisLabelManager";
import { ViewportUtils } from "./ViewportUtils";
import { GeometryUtil } from "igniteui-react-core";
import { RadialAxisRenderingParameters } from "./RadialAxisRenderingParameters";
import { CategoryTickmarkValues } from "./CategoryTickmarkValues";
import { SeriesViewer } from "./SeriesViewer";
import { ScalerParams } from "./ScalerParams";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { LineGeometry } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { RangeInfo } from "./RangeInfo";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { NumericAxisBase } from "./NumericAxisBase";
import { LogarithmicTickmarkValues } from "./LogarithmicTickmarkValues";
import { PolarAxisRenderingParameters } from "./PolarAxisRenderingParameters";
import { MathUtil } from "igniteui-react-core";
import { RadialAxisLabelPanel } from "./RadialAxisLabelPanel";
import { LinearTickmarkValues } from "./LinearTickmarkValues";
import { IPolarRadialRenderingParameters_$type } from "./IPolarRadialRenderingParameters";
import { PathGeometry } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { ArcSegment } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { CategoryAxisBaseView } from "./CategoryAxisBaseView";
import { AxisDefaults } from "./AxisDefaults";
import { NumericAxisBaseView } from "./NumericAxisBaseView";
/**
 * @hidden
 */
export let AngleAxisLabelPanel = /*@__PURE__*/ (() => {
    class AngleAxisLabelPanel extends AxisLabelPanelBase {
        ae() {
            return new AngleAxisLabelPanelView(this);
        }
        ch(a) {
            super.ch(a);
            this.c9 = a;
        }
        constructor() {
            super();
            this.da = false;
            this.di = null;
            this.df = 0;
            this.dc = 0;
            this.de = 0;
            this.dd = 0;
            this.db = 0;
        }
        at(a, b) {
            if (!Extensions.b(b)) {
                return false;
            }
            if (this.ad == null || this.ad.kd.isEmpty) {
                return super.at(a, b);
            }
            return true;
        }
        a5() {
            let a = new List$1(Rect.$, 0);
            let b = new List$1(Boolean_$type, 0);
            if (this.bb.count != this.ba.count) {
                return a;
            }
            let c = 1;
            if (typeCast(CategoryAngleAxis.$, this.ad) !== null) {
                c = this.ad.mh();
            }
            else if (typeCast(NumericAngleAxis.$, this.ad) !== null) {
                c = this.ad.ni();
            }
            if (c == 2) {
                this.c9.a0(a, b);
            }
            else {
                this.c9.a1(a, b);
            }
            let d = false;
            this.ao = this.an(a, b);
            if (!this.ad.b8()) {
                d = true;
                switch (c) {
                    case 1:
                        this.dk();
                        break;
                    case 2:
                        this.dj();
                        break;
                }
            }
            else {
                d = true;
                this.c9.ac();
            }
            if (d) {
                for (let e = 0; e < a.count; e++) {
                    let f = this.bb._inner[e];
                    let g = this.ba._inner[e];
                    let h = a._inner[e];
                    let i = this.di(g.c, h.width, h.height);
                    let j = i.x - this.bk(f) / 2;
                    let k = i.y - this.bj(f) / 2;
                    h.x = j;
                    h.y = k;
                    a._inner[e] = h;
                }
            }
            return a;
        }
        dk() {
            this.bh = this.df / 2;
            this.bh = this.bh + this.dg();
        }
        dj() {
            this.bh = 5;
            this.bh = this.bh + this.dh();
        }
        dh() {
            let a;
            let b;
            b = this.ad;
            a = null;
            if (b != null) {
                a = typeCast(XamDataChart.$, b.bi);
            }
            if (a == null || b == null) {
                return 0;
            }
            let c = new List$1(Axis.$, 0);
            for (let d = 0; d < a.axes.count; d++) {
                let e = a.axes._inner[d];
                if ((typeCast(NumericAngleAxis.$, e) !== null || typeCast(CategoryAngleAxis.$, e) !== null) && typeCast(AngleAxisLabelPanel.$, e.aw) !== null && e.aw.bb.count > 0 && (!e.b8()) && !e.b5() && (e.aj == null || this.ad.aj == null || e.aj.no == b.aj.no)) {
                    c.add(e);
                }
            }
            let f = c.indexOf(b);
            if (f == -1) {
                return 0;
            }
            let g = 0;
            if (f > 0) {
                if (typeCast(CategoryAngleAxis.$, c._inner[f - 1]) !== null) {
                    let h = c._inner[f - 1];
                    if (h.mg == 2) {
                        g += h.aw.db;
                    }
                    else {
                        g += c._inner[f - 1].aw.bh;
                    }
                }
                else if (typeCast(NumericAngleAxis.$, c._inner[f - 1]) !== null) {
                    let i = c._inner[f - 1];
                    if (i.mg == 2) {
                        g += i.aw.db;
                    }
                    else {
                        g += c._inner[f - 1].aw.bh;
                    }
                }
            }
            return g;
        }
        dg() {
            let a;
            let b;
            b = this.ad;
            a = null;
            if (b != null) {
                a = typeCast(XamDataChart.$, b.bi);
            }
            if (a == null || b == null) {
                return 0;
            }
            let c = new List$1(Axis.$, 0);
            for (let d = 0; d < a.axes.count; d++) {
                let e = a.axes._inner[d];
                if ((typeCast(NumericAngleAxis.$, e) !== null || typeCast(CategoryAngleAxis.$, e) !== null) && typeCast(AngleAxisLabelPanel.$, e.aw) !== null && e.aw.bb.count > 0 && (!e.b8()) && !e.b5() && (e.aj == null || this.ad.aj == null || e.aj.no == b.aj.no)) {
                    c.add(e);
                }
            }
            let f = c.indexOf(b);
            if (f == -1) {
                return 0;
            }
            let g = 0;
            let h = 5;
            if (f == 0) {
                g += h;
            }
            else {
                if (typeCast(CategoryAngleAxis.$, c._inner[f - 1]) !== null) {
                    let i = c._inner[f - 1];
                    if (i.mg == 2) {
                        g += i.aw.db;
                    }
                    else {
                        g += c._inner[f - 1].aw.bh;
                    }
                }
                else if (typeCast(NumericAngleAxis.$, c._inner[f - 1]) !== null) {
                    let j = c._inner[f - 1];
                    if (j.mg == 2) {
                        g += j.aw.db;
                    }
                    else {
                        g += c._inner[f - 1].aw.bh;
                    }
                }
                g += c._inner[f].aw.bh * 2 + h;
            }
            return g;
        }
        ai() {
            return 4;
        }
        ay(a) {
            return a == 4 || a == 5;
        }
    }
    AngleAxisLabelPanel.$t = /*@__PURE__*/ markType(AngleAxisLabelPanel, 'AngleAxisLabelPanel', AxisLabelPanelBase.$);
    return AngleAxisLabelPanel;
})();
/**
 * @hidden
 */
export let CategoryAngleAxis = /*@__PURE__*/ (() => {
    class CategoryAngleAxis extends CategoryAxisBase {
        a4() {
            return new CategoryAngleAxisView(this);
        }
        hs(a) {
            super.hs(a);
            this.mj = a;
        }
        get_b9() {
            return true;
        }
        constructor() {
            super();
            this.mo = null;
            this.ml = null;
            this.mp = false;
            this.mt = NaN;
            this.mm = null;
            this.mu = 0;
            this.mr = 0;
            this.ms = 0;
            this.m5 = 1;
            this.ab = CategoryAngleAxis.$;
            this.ml = this.mk();
            this.mo = new PolarAxisRenderingManager();
        }
        av() {
            let a = new AngleAxisLabelPanel();
            a.di = (b, c, d) => {
                let e = this.bi != null ? this.bi.vh : Rect.empty;
                let f = !e.isEmpty ? this.kd : Rect.empty;
                switch (this.mg) {
                    case 2: return this.nk(b, c, d, { $type: Point_$type, x: 0.5, y: 0.5 }, e, f, this.aw.bh);
                    case 0:
                    case 1:
                    default: return this.nl(b, { $type: Point_$type, x: 0.5, y: 0.5 }, e, f, this.aw.bh);
                }
            };
            return a;
        }
        m3(a) {
            return Math.round(a * Math.pow(10, 10)) / Math.pow(10, 10);
        }
        mk() {
            let a = ((() => {
                let $ret = new AxisLabelManager();
                $ret.a = this;
                $ret.f = this.dd;
                $ret.e = this.dc;
                $ret.b = this.aw;
                return $ret;
            })());
            if (this.az != null) {
                this.az.registerAxis(this);
            }
            let b = new CategoryAxisRenderer(a);
            b.u = () => {
                let c = this.a5.a4();
                let d = this.a5.a7();
                let e = this.a5.a5();
                let f = this.a5.a6();
                this.il();
                this.hi(c);
                this.hi(d);
                this.hi(e);
                this.hi(f);
            };
            b.o = (c, d) => !d.isEmpty && !c.isEmpty && this.mn != null;
            b.d = (c, d, e, f) => this.mi(c, d, e, f);
            b.v = () => {
                if (!this.mp) {
                    this.mp = true;
                    this.mn.c1();
                    this.mp = false;
                }
            };
            b.g = (c, d) => {
                let e = typeGetValue(c);
                if (e > this.kr.count - 1) {
                    e -= this.kr.count;
                }
                let f = this.kr.item(e);
                return this.fz(f);
            };
            b.b.c = (c) => {
                if ((this.az == null || this.az.visibility == 0) && this.mn != null && this.mt != c) {
                    let d = typeCast(XamDataChart.$, this.bi);
                    if (d == null) {
                        return;
                    }
                    this.mt = c;
                    this.aw.bg = c;
                    d.nn();
                    for (let e of fromEnum(d.axes)) {
                        if (e != this && typeCast(AngleAxisLabelPanel.$, e.aw) !== null) {
                            e.a5.ai();
                        }
                    }
                }
            };
            b.k = (c, d, e) => {
                let f = typeCast(RadialAxisRenderingParameters.$, c);
                this.mo.m(d, e, c.z, c.aa, f.minLength, f.maxLength, f.center);
            };
            b.l = (c, d, e, f) => {
                let g = typeCast(RadialAxisRenderingParameters.$, c);
                this.mo.n(d, e, f, g.z, c.aa, g.minLength, g.maxLength, g.center);
            };
            b.m = (c, d) => this.getScaledAngle(d);
            b.q = (c, d) => {
                if (this.m3(d - this.mu) < 0) {
                    return false;
                }
                if (this.m3(d - this.mu - (2 * Math.PI)) > 0) {
                    return false;
                }
                return true;
            };
            b.j = (c) => {
                let d = typeCast(RadialAxisRenderingParameters.$, c);
                if (d.e == d.k._inner[0]) {
                    this.mo.i(c.t, c.n, c.z, c.aa, d.center, d.minAngle, d.maxAngle);
                }
            };
            b.e = (c) => {
                c.n = this.mx();
                c.r = c.n;
            };
            b.p = (c, d, e) => {
                let f = typeCast(RadialAxisRenderingParameters.$, c);
                if (e) {
                    return false;
                }
                let g = this.nl(d, f.center, c.aa, c.z, 0);
                if (g.x < c.z.right && g.x >= c.z.left && g.y < c.z.bottom && g.y >= c.z.top) {
                    return true;
                }
                return false;
            };
            b.a = (c, d, e, f) => {
                let g = c.y;
                let h = new ScalerParams(0, c.aa, c.z, this.ch, g);
                let i = d;
                if (this.categoryMode != 0) {
                    let j = (e * f) + 1;
                    j = Math.min(j, this.lf);
                    let k = this.ej(j, h);
                    i = (d + k) / 2;
                }
                return i;
            };
            b.f = runOn(this, this.getGroupCenter);
            b.i = runOn(this, this.m0);
            return b;
        }
        nl(a, b, c, d, e) {
            let f = this.mx();
            let g = ViewportUtils.b(e, c, d);
            if (this.az != null && (this.az.c == 5 || this.az.c == 1)) {
                g *= -1;
            }
            let h = b.x + (f + g) * Math.cos(a);
            let i = b.y + (f + g) * Math.sin(a);
            h = ViewportUtils.c(h, c, d);
            i = ViewportUtils.f(i, c, d);
            return { $type: Point_$type, x: h, y: i };
        }
        nk(a, b, c, d, e, f, g) {
            if (!isNaN_(b) && !isNaN_(c)) {
                let h = this.mx();
                let i = b / f.width;
                let j = c / f.width;
                let k = ViewportUtils.b(g, e, f);
                let l = GeometryUtil.h(h, a, i, j);
                let m = d.x + (l + k) * Math.cos(a);
                let n = d.y + (l + k) * Math.sin(a);
                m = ViewportUtils.c(m, e, f);
                n = ViewportUtils.f(n, e, f);
                return { $type: Point_$type, x: m, y: n };
            }
            else {
                return this.nl(a, d, e, f, g);
            }
        }
        mx() {
            if (this.mn == null) {
                return 0;
            }
            if (!this.b5()) {
                return this.mn.nt();
            }
            else {
                return this.mn.nu((this.fv));
            }
        }
        mi(a, b, c, d) {
            if (this.kr == null) {
                return null;
            }
            let e = new RadialAxisRenderingParameters();
            let f = this.kr.count - 1;
            let g = this.a5.a4();
            let h = this.a5.a7();
            let i = this.a5.a5();
            let j = this.a5.a6();
            e.t = g;
            e.w = h;
            e.u = i;
            e.v = j;
            e.l = f;
            e.m = 0;
            e.h = false;
            e.z = a;
            e.y = c;
            e.x = d;
            e.aa = b;
            e.g = this.mq();
            e.p = this.m1;
            e.o = this.ey();
            e.q = this.m2;
            e.s = this.f0;
            let k = this.mo.f(b);
            let l = this.mo.g(b);
            let m = 0.5 * this.mn.no;
            let n = 0.5 * this.mn.nn;
            let o = k;
            let p = l;
            let q = this.mn.nt();
            if (isNaN_(q) || isInfinity(q)) {
                return null;
            }
            if (p >= m) {
                p = q;
            }
            if (o < n) {
                o = n;
            }
            let r = a.width;
            this.mo.k(b, e, 0, this.kr.count, this.ch, runOn(this, this.getUnscaledAngle), r);
            let s = { $type: Point_$type, x: 0.5, y: 0.5 };
            e.center = s;
            e.maxLength = p;
            e.minLength = o;
            e.effectiveMaximum = q;
            e.ae = this.kr.count;
            e.ab = this.categoryMode;
            e.ad = true;
            e.ac = this.ch;
            e.af = this.lh;
            e.f = new CategoryTickmarkValues();
            e.j = this.cy;
            return e;
        }
        getMinMaxAngle(a, b, c) {
            let d = this.mo.l(a, b, c);
            b = d.p1;
            c = d.p2;
            return {
                p1: b,
                p2: c
            };
        }
        ac() {
            super.ac();
            this.h8(false);
        }
        get mn() {
            if (this.mm != null) {
                return this.mm;
            }
            let a = typeCast(XamDataChart.$, this.bi);
            if (a != null) {
                for (let b = 0; b < a.axes.count; b++) {
                    if (typeCast(NumericRadiusAxis.$, a.axes._inner[b]) !== null) {
                        return a.axes._inner[b];
                    }
                }
            }
            return this.mm;
        }
        set mn(a) {
            this.mm = a;
        }
        ak() {
            return this.mn;
        }
        mh() {
            if (this.mg == 0) {
                return 1;
            }
            else {
                return this.mg;
            }
        }
        getCategorySize(a, b, c) {
            return 2 * Math.PI / this.lf;
        }
        k4(a, b, c) {
            let d = this.lb(a, b, c);
            let e = 0;
            if (!isNaN_(this.la)) {
                e = Math.min(this.la, 1);
            }
            let f = 1 - 0.5 * d;
            return this.getCategorySize(a, b, c) * f / (this.lh - (this.lh - 1) * e);
        }
        getGroupCenter(a, b, c, d) {
            let e = 0.5;
            if (this.lh > 1) {
                let f = this.lb(b, c, d);
                let g = 0;
                if (!isNaN_(this.la)) {
                    g = Math.min(this.la, 1);
                }
                let h = 1 - 0.5 * f;
                let i = h / (this.lh - (this.lh - 1) * g);
                let j = (h - i) / (this.lh - 1);
                e = 0.25 * f + 0.5 * i + a * j;
            }
            return this.getCategorySize(b, c, d) * e;
        }
        m0(a) {
            let b = 0.5;
            if (this.lh > 1) {
                let c = this.lb(Rect.empty, Rect.empty, Rect.empty);
                let d = 0;
                if (!isNaN_(this.la)) {
                    d = Math.min(this.la, 1);
                }
                let e = 1 - 0.5 * c;
                let f = e / (this.lh - (this.lh - 1) * d);
                let g = (e - f) / (this.lh - 1);
                b = 0.25 * c + 0.5 * f + a * g;
            }
            return b;
        }
        h9(a) {
            super.h9(a);
            let b = this.bi != null ? this.bi.vh : Rect.empty;
            let c = !b.isEmpty ? this.kd : Rect.empty;
            let d = this.j8();
            let e = this.j7();
            let f = this.ml.c(a, c, b, d, e);
            if (f != null) {
                this.mv = f.f.m;
                this.mw = f.f.l;
            }
        }
        mz(a, b) {
            let c;
            let d;
            let e = this.mo.l(b, c, d);
            c = e.p1;
            d = e.p2;
            if (c == 0) {
                if (this.ch) {
                    return this.lf;
                }
                else {
                    return 0;
                }
            }
            let f = this.getUnscaledAngle(c);
            if (f < 0 || f > this.lf) {
                f = this.getUnscaledAngle(c + Math.PI * 2);
            }
            return f;
        }
        my(a, b) {
            let c;
            let d;
            let e = this.mo.l(b, c, d);
            c = e.p1;
            d = e.p2;
            if (d > Math.PI * 2) {
                d = d - Math.PI * 2;
            }
            if (d == Math.PI * 2) {
                if (this.ch) {
                    return 0;
                }
                else {
                    return this.lf;
                }
            }
            let f = this.getUnscaledAngle(d);
            if (f < 0 || f > this.lf) {
                f = this.getUnscaledAngle(d + Math.PI * 2);
            }
            return f;
        }
        getScaledAngle(a) {
            let b = this.lf;
            let c = b >= 2 ? (a) / (b) : b == 1 ? 0.5 : NaN;
            if (this.ci) {
                c = 1 - c;
            }
            return (c * 2 * Math.PI) + this.mu;
        }
        getUnscaledAngle(a) {
            if (a < this.mu) {
                a += 2 * Math.PI;
            }
            let b = (a - this.mu) / (2 * Math.PI);
            if (this.ch) {
                b = 1 - b;
            }
            return b * (this.lf);
        }
        ej(a, b) {
            return this.getScaledAngle(a);
        }
        em(a, b) {
            return this.getUnscaledAngle(a);
        }
        hw(a, b, c, d) {
            super.hw(a, b, c, d);
            let e = typeCast(XamDataChart.$, this.bi);
            switch (b) {
                case "CrossingAxis":
                    let f = typeCast(NumericRadiusAxis.$, d);
                    this.nf(f);
                    if (f != null) {
                        f.n3(this);
                    }
                    this.cq = true;
                    this.h8(false);
                    break;
                case CategoryAngleAxis.$$p[1]:
                    this.mu = this.m4;
                    while (this.mu < 0) {
                        this.mu += 360;
                    }
                    while (this.mu >= 360) {
                        this.mu -= 360;
                    }
                    this.mu = (this.mu * Math.PI) / 180;
                    this.cq = true;
                    this.h8(false);
                    for (let g of fromEnum(this.de)) {
                        g.qm(false);
                        g.ph();
                    }
                    break;
                case "Label":
                    if (e != null) {
                        for (let h of fromEnum(e.axes)) {
                            h.cq = true;
                            h.h7();
                        }
                    }
                    break;
                case "CrossingValue":
                    if (e != null) {
                        for (let i of fromEnum(e.axes)) {
                            if (typeCast(NumericAngleAxis.$, i) !== null || typeCast(CategoryAngleAxis.$, i) !== null) {
                                i.cq = true;
                                i.h7();
                            }
                        }
                    }
                    break;
                case "LabelSettings":
                    this.ml = this.mk();
                    this.nd();
                    this.cq = true;
                    this.h8(false);
                    break;
            }
        }
        nd() {
            this.mt = NaN;
        }
        nf(a) {
            this.mn = a;
        }
        get m1() {
            return this.c(CategoryAngleAxis.ng);
        }
        set m1(a) {
            this.h(CategoryAngleAxis.ng, a);
        }
        get mv() {
            return this.mr;
        }
        set mv(a) {
            if (this.mv != a) {
                let b = this.mr;
                this.mr = a;
                this.h2("ActualInterval", b, this.mv);
            }
        }
        ev() {
            return this.mv;
        }
        get m2() {
            return this.c(CategoryAngleAxis.ni);
        }
        set m2(a) {
            this.h(CategoryAngleAxis.ni, a);
        }
        get mw() {
            return this.ms;
        }
        set mw(a) {
            if (this.mw != a) {
                let b = this.ms;
                this.ms = a;
                this.h2("ActualMinorInterval", b, this.mw);
            }
        }
        mq() {
            return !isNaN_(this.m1);
        }
        get_a2() {
            return 2;
        }
        get a2() {
            return this.get_a2();
        }
        c3() {
            if (this.cq && this.c4) {
                this.bc = this.bb();
            }
            if (this.kr == null) {
                return false;
            }
            let a = this.kr.count;
            if (a != this.m6) {
                let b = new AxisRangeChangedEventArgs(0, 1, 1, this.m6, a);
                this.m6 = a;
                this.h3(b);
                return true;
            }
            return false;
        }
        get m6() {
            return this.m5;
        }
        set m6(a) {
            this.m5 = a;
        }
        j5(a, b, c, d = null, e = null) {
            let f = typeCast(RadialAxisRenderingParameters.$, this.ml.d(c, b, d, e));
            if (f == null) {
                return null;
            }
            let g = Math.cos(a);
            let h = Math.sin(a);
            let i = f.center.x + g * f.minLength;
            let j = f.center.y + h * f.minLength;
            let k = f.center.x + g * f.maxLength;
            let l = f.center.y + h * f.maxLength;
            i = ViewportUtils.c(i, b, c);
            j = ViewportUtils.f(j, b, c);
            k = ViewportUtils.c(k, b, c);
            l = ViewportUtils.f(l, b, c);
            let m = new LineGeometry();
            m.d = { $type: Point_$type, x: i, y: j };
            m.c = { $type: Point_$type, x: k, y: l };
            return m;
        }
        get isVertical() {
            return this.cp;
        }
        j$d(a, b) {
            return this.em.apply(this, arguments);
        }
        j$c(a, b) {
            return this.ej.apply(this, arguments);
        }
        j$e(a, b, c, d, e) {
            this.hm.apply(this, arguments);
        }
        j$f(a, b, c, d) {
            this.hn.apply(this, arguments);
        }
        j$g(a, b, c, d) {
            this.ho.apply(this, arguments);
        }
        get j$b() {
            return this.ch;
        }
        j$a() {
            return this.ag.apply(this, arguments);
        }
    }
    CategoryAngleAxis.$t = /*@__PURE__*/ markType(CategoryAngleAxis, 'CategoryAngleAxis', CategoryAxisBase.$, [IAngleScaler_$type]);
    CategoryAngleAxis.ng = /*@__PURE__*/ DependencyProperty.i("Interval", Number_$type, CategoryAngleAxis.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        a.h2("Interval", b.oldValue, b.newValue);
        a.h8(false);
    }));
    CategoryAngleAxis.ni = /*@__PURE__*/ DependencyProperty.i("MinorInterval", Number_$type, CategoryAngleAxis.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        (typeCast(CategoryAngleAxis.$, a)).h2("MinorInterval", b.oldValue, b.newValue);
        (typeCast(CategoryAngleAxis.$, a)).h8(false);
    }));
    CategoryAngleAxis.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, CategoryAngleAxis, 'h2', ['LabelMode:mg:nh', [AxisAngleLabelMode_$type, /*@__PURE__*/ enumGetBox(AxisAngleLabelMode_$type, 0)], 'StartAngleOffset:m4:nj', [1, 0]]);
    return CategoryAngleAxis;
})();
/**
 * @hidden
 */
export let NumericAngleAxis = /*@__PURE__*/ (() => {
    class NumericAngleAxis extends NumericAxisBase {
        a4() {
            return new NumericAngleAxisView(this);
        }
        hs(a) {
            super.hs(a);
            this.nj = a;
        }
        get_b9() {
            return true;
        }
        constructor() {
            super();
            this.nm = null;
            this.nn = false;
            this.no = NaN;
            this.np = 0;
            this.nk = null;
            this.ab = NumericAngleAxis.$;
            this.nm = new PolarAxisRenderingManager();
            this.k0 = this.ky();
        }
        av() {
            let a = new AngleAxisLabelPanel();
            a.di = (b, c, d) => {
                let e = this.bi != null ? this.bi.vh : Rect.empty;
                let f = !e.isEmpty ? this.kd : Rect.empty;
                return this.n1(b, { $type: Point_$type, x: 0.5, y: 0.5 }, e, f, this.aw.bh);
            };
            return a;
        }
        nq() {
            if (this.nl == null) {
                return 0;
            }
            if (!this.b5()) {
                return this.nl.nt();
            }
            else {
                return this.nl.nu((this.fv));
            }
        }
        ns(a) {
            return Math.round(a * Math.pow(10, 10)) / Math.pow(10, 10);
        }
        ky() {
            let a = super.ky();
            a.b.c = (b) => {
                if ((this.az == null || this.az.visibility == 0) && this.nl != null && this.no != b) {
                    let c = typeCast(XamDataChart.$, this.bi);
                    if (c == null) {
                        return;
                    }
                    this.no = b;
                    this.aw.bg = b;
                    c.nn();
                    for (let d of fromEnum(c.axes)) {
                        if (d != this && typeCast(AngleAxisLabelPanel.$, d.aw) !== null) {
                            d.a5.ai();
                        }
                    }
                }
            };
            a.e = (b) => {
                b.n = this.nq();
                b.r = b.n;
            };
            a.j = (b) => {
                let c = typeCast(PolarAxisRenderingParameters.$, b);
                if (c.e == c.k._inner[0]) {
                    this.nm.i(b.t, b.n, b.z, b.aa, c.center, c.minAngle, c.maxAngle);
                }
            };
            a.k = (b, c, d) => {
                let e = typeCast(PolarAxisRenderingParameters.$, b);
                this.nm.m(c, d, b.z, b.aa, e.minLength, e.maxLength, e.center);
            };
            a.l = (b, c, d, e) => {
                let f = typeCast(PolarAxisRenderingParameters.$, b);
                this.nm.n(c, d, e, f.z, b.aa, f.minLength, f.maxLength, f.center);
            };
            a.d = (b, c, d, e) => {
                let f = typeCast(PolarAxisRenderingParameters.$, this.k1(b, c, d, e));
                return f;
            };
            a.v = () => {
                if (!this.nn) {
                    this.nn = true;
                    this.nl.c1();
                    this.nn = false;
                }
            };
            a.m = (b, c) => this.getScaledAngle(c);
            a.o = (b, c) => !c.isEmpty && !b.isEmpty && this.nl != null;
            a.q = (b, c) => {
                if (this.ns(c - this.np) < 0) {
                    return false;
                }
                if (this.ns(c - this.np - (2 * Math.PI)) > 0) {
                    return false;
                }
                return true;
            };
            a.p = (b, c, d) => {
                let e = typeCast(PolarAxisRenderingParameters.$, b);
                let f = this.n1(this.getScaledAngle(e.l), e.center, b.aa, b.z, 0);
                let g = this.n1(c, e.center, b.aa, b.z, 0);
                if (d && MathUtil.g(f.x - g.x, f.y - g.y) < 2) {
                    return false;
                }
                if (g.x < b.z.right && g.x >= b.z.left && g.y < b.z.bottom && g.y >= b.z.top) {
                    return true;
                }
                return false;
            };
            a.r = (b, c, d, e) => {
                if (c < b.m && typeCast(LogarithmicTickmarkValues.$, b.f) !== null) {
                    return b.m;
                }
                else if (c > b.l && (typeCast(LogarithmicTickmarkValues.$, b.f) !== null || b.h)) {
                    return b.l;
                }
                return c;
            };
            return a;
        }
        n1(a, b, c, d, e) {
            let f = this.nq();
            let g = ViewportUtils.b(e, c, d);
            if (this.az != null && (this.az.c == 5 || this.az.c == 1)) {
                g *= -1;
            }
            let h = b.x + (f + g) * Math.cos(a);
            let i = b.y + (f + g) * Math.sin(a);
            h = ViewportUtils.c(h, c, d);
            i = ViewportUtils.f(i, c, d);
            return { $type: Point_$type, x: h, y: i };
        }
        ej(a, b) {
            return this.getScaledAngle(a);
        }
        getScaledAngle1(a, b, c) {
            let d = 0;
            if (b) {
                d = (Math.log(a) - this.l3) / (this.l2 - this.l3);
            }
            else {
                d = (a - this.lx) / (this.lw - this.lx);
            }
            if (c) {
                d = 1 - d;
            }
            return (d * 2 * Math.PI) + this.np;
        }
        getScaledAngle(a) {
            return this.getScaledAngle1(a, this.lj, this.ci);
        }
        em(a, b) {
            return this.getUnscaledAngle(a);
        }
        getUnscaledAngle(a) {
            let b = (a - this.np) / (2 * Math.PI);
            if (this.ch) {
                b = 1 - b;
            }
            if (this.lj) {
                return Math.exp(b * (this.l2 - this.l3) + this.l3);
            }
            else {
                return this.lx + b * (this.lw - this.lx);
            }
        }
        ni() {
            if (this.nh == 0) {
                return 1;
            }
            else {
                return this.nh;
            }
        }
        hw(a, b, c, d) {
            super.hw(a, b, c, d);
            let e = typeCast(XamDataChart.$, this.bi);
            switch (b) {
                case "CrossingAxis":
                    let f = typeCast(NumericRadiusAxis.$, d);
                    this.ny(f);
                    if (f != null) {
                        f.n3(this);
                    }
                    this.h8(false);
                    break;
                case NumericAngleAxis.$$p[1]:
                    this.np = this.nt;
                    while (this.np < 0) {
                        this.np += 360;
                    }
                    while (this.np >= 360) {
                        this.np -= 360;
                    }
                    this.np = (this.nt * Math.PI) / 180;
                    this.h8(false);
                    for (let g of fromEnum(this.db())) {
                        g.qm(false);
                        g.ph();
                    }
                    break;
                case "Label":
                    if (e != null) {
                        for (let h of fromEnum(e.axes)) {
                            h.h7();
                        }
                    }
                    break;
                case "CrossingValue":
                    if (e != null) {
                        for (let i of fromEnum(e.axes)) {
                            if (typeCast(NumericAngleAxis.$, i) !== null || typeCast(CategoryAngleAxis.$, i) !== null) {
                                i.h7();
                            }
                        }
                    }
                    break;
                case "LabelSettings":
                    this.k0 = this.ky();
                    this.nw();
                    this.cq = true;
                    this.h8(false);
                    break;
            }
        }
        nw() {
            this.no = NaN;
        }
        k2() {
            return new PolarAxisRenderingParameters();
        }
        k1(a, b, c, d) {
            let e = typeCast(PolarAxisRenderingParameters.$, super.k1(a, b, c, d));
            let f = this.nm.f(b);
            let g = this.nm.g(b);
            let h = 0.5 * this.nl.no;
            let i = 0.5 * this.nl.nn;
            let j = f;
            let k = g;
            let l = this.nl.nt();
            if (isNaN_(l) || isInfinity(l)) {
                return null;
            }
            if (k >= h) {
                k = l;
            }
            if (j < i) {
                j = i;
            }
            let m = a.width;
            this.nm.k(b, e, this.lx, this.lw, this.ch, runOn(this, this.getUnscaledAngle), m);
            let n = { $type: Point_$type, x: 0.5, y: 0.5 };
            e.center = n;
            e.maxLength = k;
            e.minLength = j;
            e.effectiveMaximum = l;
            return e;
        }
        getMinMaxAngle(a, b, c) {
            let d = this.nm.l(a, b, c);
            b = d.p1;
            c = d.p2;
            return {
                p1: b,
                p2: c
            };
        }
        h9(a) {
            super.h9(a);
            let b = this.bi != null ? this.bi.vh : Rect.empty;
            let c = !b.isEmpty ? this.kd : Rect.empty;
            let d = this.j8();
            let e = this.j7();
            let f = this.k0.c(a, c, b, d, e);
            if (f != null) {
                this.lv = f.f.m;
                this.ly = f.f.l;
            }
        }
        get nl() {
            if (this.nk != null) {
                return this.nk;
            }
            let a = typeCast(XamDataChart.$, this.bi);
            if (a != null) {
                for (let b = 0; b < a.axes.count; b++) {
                    if (a.axes._inner[b].cm) {
                        return a.axes._inner[b];
                    }
                }
            }
            return this.nk;
        }
        set nl(a) {
            this.nk = a;
        }
        ak() {
            return this.nl;
        }
        ny(a) {
            this.nl = a;
        }
        ip(a, b) {
            super.ip(a, b);
            if (b.height != a.height || b.width != a.width) {
                this.c1();
            }
        }
        get_a2() {
            return 2;
        }
        get a2() {
            return this.get_a2();
        }
        j5(a, b, c, d = null, e = null) {
            if (this.nl == null) {
                return null;
            }
            let f = typeCast(PolarAxisRenderingParameters.$, this.k1(c, b, d, e));
            if (f == null) {
                return null;
            }
            let g = Math.cos(a);
            let h = Math.sin(a);
            let i = f.center.x + g * f.minLength;
            let j = f.center.y + h * f.minLength;
            let k = f.center.x + g * f.maxLength;
            let l = f.center.y + h * f.maxLength;
            i = ViewportUtils.c(i, b, c);
            j = ViewportUtils.f(j, b, c);
            k = ViewportUtils.c(k, b, c);
            l = ViewportUtils.f(l, b, c);
            let m = new LineGeometry();
            m.d = { $type: Point_$type, x: i, y: j };
            m.c = { $type: Point_$type, x: k, y: l };
            return m;
        }
    }
    NumericAngleAxis.$t = /*@__PURE__*/ markType(NumericAngleAxis, 'NumericAngleAxis', NumericAxisBase.$, [IAngleScaler_$type]);
    NumericAngleAxis.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, NumericAngleAxis, 'h2', ['LabelMode:nh:nz', [AxisAngleLabelMode_$type, /*@__PURE__*/ enumGetBox(AxisAngleLabelMode_$type, 0)], 'StartAngleOffset:nt:n0', [1, 0]]);
    return NumericAngleAxis;
})();
/**
 * @hidden
 */
export let NumericRadiusAxis = /*@__PURE__*/ (() => {
    class NumericRadiusAxis extends NumericAxisBase {
        a4() {
            return new NumericRadiusAxisView(this);
        }
        hs(a) {
            super.hs(a);
            this.nj = a;
        }
        get_cm() {
            return true;
        }
        ei() {
            let a = this.no;
            let b = this.nn;
            let c = Math.min(this.ns(), this.nr()) * (a - b) / 2;
            c = Math.max(c, 14);
            return c;
        }
        ns() {
            return this.kd.width;
        }
        nr() {
            return this.kd.height;
        }
        constructor() {
            super();
            this.nk = null;
            this.nl = false;
            this.nm = NaN;
            this.no = 0;
            this.nn = 0;
            this.nq = 0;
            this.nh = null;
            this.ab = NumericRadiusAxis.$;
            this.no = this.ny;
            this.nn = this.nx;
            this.nk = new PolarAxisRenderingManager();
            this.k0 = this.ky();
        }
        av() {
            return new RadialAxisLabelPanel();
        }
        np(a) {
            if (a == null) {
                return 0;
            }
            return a;
        }
        ky() {
            let a = super.ky();
            a.b.c = (b) => {
                if ((this.az == null || this.az.visibility == 0) && this.ni != null) {
                    if ((this.az == null || (this.az.c == 4 || this.az.c == 5)) && this.nm != b) {
                        this.nm = b;
                        this.aw.bg = b;
                        this.bi.nn();
                    }
                }
            };
            a.k = (b, c, d) => {
                let e = typeCast(PolarAxisRenderingParameters.$, b);
                this.nk.i(c, d, e.z, e.aa, e.center, e.minAngle, e.maxAngle);
            };
            a.l = (b, c, d, e) => {
                if (d == e) {
                    return;
                }
                let f = typeCast(PolarAxisRenderingParameters.$, b);
                this.nk.j(c, d, e, f.z, f.aa, f.center, f.minAngle, f.maxAngle);
            };
            a.m = (b, c) => this.nu(c);
            a.q = (b, c) => {
                let d = typeCast(PolarAxisRenderingParameters.$, b);
                return c <= d.effectiveMaximum;
            };
            a.n = (b, c) => {
                let d = typeCast(PolarAxisRenderingParameters.$, b);
                return c <= d.effectiveMaximum;
            };
            a.j = (b) => {
                let c = typeCast(PolarAxisRenderingParameters.$, b);
                this.nk.m(b.t, c.crossingAngleRadians, b.z, b.aa, c.minLength, c.maxLength, c.center);
            };
            a.e = (b) => {
                b.n = this.az == null || (this.az.c == 4 || this.az.c == 0) ? b.z.top : b.z.bottom;
                b.r = b.n;
                let c = typeCast(PolarAxisRenderingParameters.$, b);
                c.crossingAngleRadians = (this.np(this.fv) * Math.PI) / 180;
                if (this.az == null || (this.az.c == 4 || this.az.c == 5)) {
                    c.n = ViewportUtils.f(0.5, c.aa, c.z) - b.z.top;
                    c.r = c.n;
                    let d = typeCast(RadialAxisLabelPanel.$, this.aw);
                    if (d != null) {
                        let e = 0;
                        if (this.az != null && this.az.c == 4) {
                            e = 1;
                        }
                        d.dy = { $type: Point_$type, x: ViewportUtils.c(0.5, c.aa, c.z), y: e };
                        d.dv = c.crossingAngleRadians;
                    }
                }
            };
            a.p = (b, c, d) => {
                let e = typeCast(PolarAxisRenderingParameters.$, b);
                if (this.ni == null) {
                    return false;
                }
                if (c > e.effectiveMaximum) {
                    return false;
                }
                let f = false;
                f = this.az == null || (this.az.c == 4 || this.az.c == 5);
                let g = 0;
                if (f) {
                    g = this.nq;
                }
                let h = e.center.x + c * Math.cos(g);
                let i = e.center.y + c * Math.sin(g);
                h = ViewportUtils.c(h, e.aa, e.z);
                i = ViewportUtils.f(i, e.aa, e.z);
                if (h <= b.z.right && h >= b.z.left && ((i <= b.z.bottom && i >= b.z.top) || !f)) {
                    return true;
                }
                return false;
            };
            a.h = (b, c) => {
                let d = typeCast(PolarAxisRenderingParameters.$, b);
                return new LabelPosition(ViewportUtils.c(d.center.x + c, d.aa, d.z));
            };
            a.r = (b, c, d, e) => {
                if (c < b.m) {
                    return b.m;
                }
                else if (c > b.l) {
                    return b.l;
                }
                return c;
            };
            return a;
        }
        ej(a, b) {
            return this.nu(a);
        }
        nv(a, b, c, d, e) {
            let f = 0;
            if (b) {
                if (a <= 0) {
                    f = (Math.log(this.lx) - this.l3) / (this.l2 - this.l3);
                }
                else {
                    f = (Math.log(a) - this.l3) / (this.l2 - this.l3);
                }
            }
            else {
                f = (a - this.lx) / (this.lw - this.lx);
            }
            if (c) {
                f = 1 - f;
            }
            f = e + (f * (d - e));
            f /= 2;
            return f;
        }
        nu(a) {
            return this.nv(a, this.lj, this.ci, this.no, this.nn);
        }
        nw(a) {
            let b = a * 2;
            b = (b - this.nn) / (this.no - this.nn);
            if (this.ch) {
                b = 1 - b;
            }
            if (this.lj) {
                return Math.exp(b * (this.l2 - this.l3) + this.l3);
            }
            else {
                return this.lx + b * (this.lw - this.lx);
            }
        }
        em(a, b) {
            return this.nw(a);
        }
        hw(a, b, c, d) {
            switch (b) {
                case "CrossingValue":
                    this.nq = this.np(this.fv) * Math.PI / 180;
                    break;
            }
            super.hw(a, b, c, d);
            switch (b) {
                case NumericRadiusAxis.$$p[1]:
                    this.no = this.ny;
                    if (this.no < 0) {
                        this.no = 0.1;
                    }
                    if (this.no > 1) {
                        this.no = 1;
                    }
                    if (this.nn >= this.no) {
                        this.nn = this.no - 0.01;
                        if (this.nn < 0) {
                            this.nn = 0;
                            this.no = 0.01;
                        }
                    }
                    this.cq = true;
                    this.h8(false);
                    if (this.ni != null) {
                        this.ni.h7();
                    }
                    for (let e of fromEnum(this.db())) {
                        e.qm(false);
                    }
                    break;
                case NumericRadiusAxis.$$p[0]:
                    this.nn = this.nx;
                    if (this.nn < 0) {
                        this.nn = 0.1;
                    }
                    if (this.nn > 1) {
                        this.nn = 1;
                    }
                    if (this.nn >= this.no) {
                        this.nn = this.no - 0.01;
                        if (this.nn < 0) {
                            this.nn = 0;
                            this.no = 0.01;
                        }
                    }
                    this.cq = true;
                    this.h8(false);
                    if (this.ni != null) {
                        this.ni.h7();
                    }
                    for (let f of fromEnum(this.db())) {
                        f.gj = true;
                        f.qm(false);
                    }
                    if (this.bi != null) {
                        this.bi.n1();
                    }
                    break;
                case "CrossingAxis":
                    let g = typeCast(NumericAngleAxis.$, d);
                    let h = typeCast(CategoryAngleAxis.$, d);
                    if (g == null && h == null) {
                        this.n3(null);
                    }
                    if (g != null) {
                        this.n3(g);
                        g.ny(this);
                    }
                    if (h != null) {
                        this.n3(h);
                        h.nf(this);
                    }
                    this.cq = true;
                    this.h8(false);
                    break;
                case "IsInverted":
                    if (this.ni != null) {
                        this.ni.cq = true;
                        this.ni.h8(false);
                    }
                    break;
            }
        }
        n3(a) {
            this.ni = a;
        }
        get ni() {
            if (this.nh != null) {
                return this.nh;
            }
            let a = typeCast(XamDataChart.$, this.bi);
            if (a != null) {
                for (let b = 0; b < a.axes.count; b++) {
                    if (typeCast(NumericAngleAxis.$, a.axes._inner[b]) !== null || typeCast(CategoryAngleAxis.$, a.axes._inner[b]) !== null) {
                        return a.axes._inner[b];
                    }
                }
            }
            return this.nh;
        }
        set ni(a) {
            this.nh = a;
        }
        ak() {
            return this.ni;
        }
        k2() {
            return new PolarAxisRenderingParameters();
        }
        k1(a, b, c, d) {
            let e = typeCast(PolarAxisRenderingParameters.$, super.k1(a, b, c, d));
            let f = this.nk.f(b);
            let g = this.nk.g(b);
            let h = 0.5 * this.no;
            let i = 0.5 * this.nn;
            let j, k;
            if (Rect.l_op_Equality(b, SeriesViewer.vt)) {
                k = this.lw;
                j = this.lx;
            }
            else {
                k = Math.min(g, h);
                j = this.nw(f);
                k = this.nw(k);
                let l = this.n4(a, b, j, k);
                j = l.p2;
                k = l.p3;
            }
            let m = { $type: Point_$type, x: 0.5, y: 0.5 };
            let n = f;
            let o = g;
            let p = Math.min(a.width, a.height) * (this.no - this.nn) / 2;
            e.center = m;
            let q = Math.max(o, n);
            let r = Math.min(n, o);
            e.maxLength = q;
            e.minLength = r;
            let s = Math.min(j, k);
            let t = Math.max(j, k);
            if (s < this.lx) {
                s = this.lx;
            }
            if (t > this.lw) {
                t = this.lw;
            }
            this.l0 = s;
            this.lz = t;
            e.k.add(((() => {
                let $ret = new RangeInfo();
                $ret.d = s;
                $ret.c = t;
                $ret.b = p;
                return $ret;
            })()));
            let u = typeCast(IAngleScaler_$type, this.ni);
            if (u != null) {
                let v;
                let w;
                let x = u.getMinMaxAngle(b, v, w);
                v = x.p1;
                w = x.p2;
                e.minAngle = Math.min(v, w);
                e.maxAngle = Math.max(v, w);
            }
            let y = this.nt();
            if (o >= h) {
                o = y;
            }
            if (n < i) {
                n = i;
            }
            e.minLength = n;
            e.maxLength = o;
            e.effectiveMaximum = y;
            e.f = this.k5;
            let z = typeCast(LinearTickmarkValues.$, e.f);
            if (z != null) {
                z.y = this.nz(m, e.minLength, e.maxLength, b, a);
            }
            return e;
        }
        n4(a, b, c, d) {
            let e = { $type: Point_$type, x: 0.5, y: 0.5 };
            let f = 0;
            if (this.ch) {
                f = this.nu(this.lx);
            }
            else {
                f = this.nu(this.lw);
            }
            let g = 0;
            if (this.fv != null) {
                g = this.nq;
            }
            let h = e.x + f * Math.cos(g);
            let i = e.y + f * Math.sin(g);
            e.x = ViewportUtils.c(e.x, b, a);
            e.y = ViewportUtils.f(e.y, b, a);
            h = ViewportUtils.c(h, b, a);
            i = ViewportUtils.f(i, b, a);
            if (h >= a.left && h <= a.right && i >= a.top && i <= a.bottom) {
                if (this.ch) {
                    d = this.lx;
                }
                else {
                    d = this.lw;
                }
            }
            if (e.x >= a.left && e.x <= a.right && e.y >= a.top && e.y <= a.bottom) {
                if (this.ch) {
                    c = this.lw;
                }
                else {
                    c = this.lx;
                }
            }
            return {
                p2: c,
                p3: d
            };
        }
        nz(a, b, c, d, e) {
            let f = ViewportUtils.d(c - b, d, e);
            let g = f / Math.min(e.width, e.height);
            if (g > 0.7) {
                return 10;
            }
            return 5;
        }
        nt() {
            let a = 0;
            if (!this.ch) {
                a = this.nu(this.lw);
            }
            else {
                a = this.nu(this.lx);
            }
            return a;
        }
        m2(a) {
            if (this.ni != null) {
                this.ni.h7();
            }
        }
        h9(a) {
            super.h9(a);
            let b = this.bi != null ? this.bi.vh : Rect.empty;
            let c = !b.isEmpty ? this.kd : Rect.empty;
            let d = this.j8();
            let e = this.j7();
            let f = this.k0.c(a, c, b, d, e);
            if (f != null) {
                this.lv = f.f.m;
                this.ly = f.f.l;
            }
        }
        ip(a, b) {
            super.ip(a, b);
            if (b.height != a.height || b.width != a.width) {
                this.c1();
            }
        }
        n2(a, b, c, d, e) {
            let f = typeCast(IPolarRadialRenderingParameters_$type, this.k1(b, c, d, e));
            if (f == null) {
                return;
            }
            this.nk.j(a.d, f.minLength, f.maxLength, b, c, f.center, f.minAngle, f.maxAngle);
        }
        get_a2() {
            return 3;
        }
        get a2() {
            return this.get_a2();
        }
        j5(a, b, c, d = null, e = null) {
            let f = typeCast(PolarAxisRenderingParameters.$, this.k1(c, b, d, e));
            let g = a;
            let h = new PathGeometry();
            let i = ViewportUtils.d(g, b, c);
            let j = ViewportUtils.g(g, b, c);
            if (i <= 0 || j <= 0) {
                return null;
            }
            let k = ViewportUtils.c(f.center.x, b, c);
            let l = ViewportUtils.f(f.center.y, b, c);
            if (f.maxAngle - f.minAngle < Math.PI && f.maxAngle - f.minAngle > 0) {
                let m = { $type: Point_$type, x: ViewportUtils.c(f.center.x + g * Math.cos(f.minAngle), b, c), y: ViewportUtils.f(f.center.y + g * Math.sin(f.minAngle), b, c) };
                let n = { $type: Point_$type, x: ViewportUtils.c(f.center.x + g * Math.cos(f.maxAngle), b, c), y: ViewportUtils.f(f.center.y + g * Math.sin(f.maxAngle), b, c) };
                let o = new PathFigure();
                o._startPoint = m;
                o._isClosed = false;
                o._segments.add(((() => {
                    let $ret = new ArcSegment();
                    $ret.b = false;
                    $ret.e = n;
                    $ret.f = new Size(1, i, j);
                    $ret.d = 1;
                    return $ret;
                })()));
                h.c.add(o);
            }
            else {
                let p = new PathFigure();
                p._startPoint = { $type: Point_$type, x: k, y: l - j };
                p._isClosed = true;
                p._segments.add(((() => {
                    let $ret = new ArcSegment();
                    $ret.b = false;
                    $ret.e = { $type: Point_$type, x: k, y: l + j };
                    $ret.f = new Size(1, i, j);
                    $ret.d = 1;
                    return $ret;
                })()));
                p._segments.add(((() => {
                    let $ret = new ArcSegment();
                    $ret.b = false;
                    $ret.e = { $type: Point_$type, x: k, y: l - j };
                    $ret.f = new Size(1, i, j);
                    $ret.d = 1;
                    return $ret;
                })()));
                h.c.add(p);
            }
            return h;
        }
    }
    NumericRadiusAxis.$t = /*@__PURE__*/ markType(NumericRadiusAxis, 'NumericRadiusAxis', NumericAxisBase.$);
    NumericRadiusAxis.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, NumericRadiusAxis, 'h2', ['InnerRadiusExtentScale:nx:n5', [1, 0], 'RadiusExtentScale:ny:n6', [1, 0.75]]);
    return NumericRadiusAxis;
})();
/**
 * @hidden
 */
export let AngleAxisLabelPanelView = /*@__PURE__*/ (() => {
    class AngleAxisLabelPanelView extends AxisLabelPanelBaseView {
        constructor(a) {
            super(a);
            this.az = null;
            this.az = a;
        }
        an() {
            super.an();
            this.az.da = true;
        }
        a1(a, b) {
            this.az.df = -1.7976931348623157E+308;
            this.az.dc = -1.7976931348623157E+308;
            this.az.de = -1.7976931348623157E+308;
            this.az.dd = -1.7976931348623157E+308;
            for (let c = 0; c < this.a.bb.count; c++) {
                let d = this.a.bb._inner[c];
                let e = this.a.ba._inner[c];
                let f = e.a;
                let g = this.az.di(e.c, NaN, NaN);
                let h = this.m(d);
                let i = this.l(d);
                let j = h + this.p() + this.q();
                let k = i + this.r() + this.o();
                let l = g.x - j / 2;
                let m = g.y - k / 2;
                this.az.de = Math.max(h, this.az.de);
                this.az.dd = Math.max(i, this.az.dd);
                this.az.df = Math.max(j, this.az.df);
                this.az.dc = Math.max(k, this.az.dc);
                let n = new Rect(0, l, m, j, k);
                a.add(n);
                b.add(f);
            }
        }
        a0(a, b) {
            this.az.db = -1.7976931348623157E+308;
            let c = 0;
            if (typeCast(CategoryAngleAxis.$, this.az.ad) !== null) {
                c = this.az.ad.mx() * this.az.ad.kd.width;
            }
            else if (typeCast(NumericAngleAxis.$, this.az.ad) !== null) {
                c = this.az.ad.nq() * this.az.ad.kd.width;
            }
            let d = { $type: Point_$type, x: this.az.ad.kd.width * 0.5, y: this.az.ad.kd.width * 0.5 };
            for (let e = 0; e < this.a.bb.count; e++) {
                let f = this.a.bb._inner[e];
                let g = this.a.ba._inner[e];
                let h = g.a;
                let i = this.m(f);
                let j = this.l(f);
                let k = i + this.p() + this.q();
                let l = j + this.r() + this.o();
                let m = this.az.di(g.c, k, l);
                let n = m.x - k / 2;
                let o = m.y - l / 2;
                let p = new Rect(0, n, o, i, j);
                if (!h) {
                    let q = Math.sqrt((p.left - d.x) * (p.left - d.x) + (p.top - d.y) * (p.top - d.y));
                    let r = Math.sqrt((p.right - d.x) * (p.right - d.x) + (p.top - d.y) * (p.top - d.y));
                    let s = Math.sqrt((p.left - d.x) * (p.left - d.x) + (p.bottom - d.y) * (p.bottom - d.y));
                    let t = Math.sqrt((p.right - d.x) * (p.right - d.x) + (p.bottom - d.y) * (p.bottom - d.y));
                    this.az.db = Math.max(q - c, this.az.db);
                    this.az.db = Math.max(r - c, this.az.db);
                    this.az.db = Math.max(s - c, this.az.db);
                    this.az.db = Math.max(t - c, this.az.db);
                }
                a.add(p);
                b.add(h);
            }
        }
        o() {
            return 0;
        }
        p() {
            return 0;
        }
        q() {
            return 0;
        }
        r() {
            return 0;
        }
    }
    AngleAxisLabelPanelView.$t = /*@__PURE__*/ markType(AngleAxisLabelPanelView, 'AngleAxisLabelPanelView', AxisLabelPanelBaseView.$);
    return AngleAxisLabelPanelView;
})();
/**
 * @hidden
 */
export let CategoryAngleAxisView = /*@__PURE__*/ (() => {
    class CategoryAngleAxisView extends CategoryAxisBaseView {
        constructor(a) {
            super(a);
            this.bm = null;
            this.bm = a;
        }
        al() {
            super.al();
            this.a.jw = AxisDefaults.h;
            this.a.jz = AxisDefaults.g;
        }
    }
    CategoryAngleAxisView.$t = /*@__PURE__*/ markType(CategoryAngleAxisView, 'CategoryAngleAxisView', CategoryAxisBaseView.$);
    return CategoryAngleAxisView;
})();
/**
 * @hidden
 */
export let NumericAngleAxisView = /*@__PURE__*/ (() => {
    class NumericAngleAxisView extends NumericAxisBaseView {
        constructor(a) {
            super(a);
            this.bm = null;
            this.bm = a;
        }
        al() {
            super.al();
            this.a.jw = AxisDefaults.h;
            this.a.jz = AxisDefaults.g;
        }
    }
    NumericAngleAxisView.$t = /*@__PURE__*/ markType(NumericAngleAxisView, 'NumericAngleAxisView', NumericAxisBaseView.$);
    return NumericAngleAxisView;
})();
/**
 * @hidden
 */
export let NumericRadiusAxisView = /*@__PURE__*/ (() => {
    class NumericRadiusAxisView extends NumericAxisBaseView {
        constructor(a) {
            super(a);
            this.bm = null;
            this.bm = a;
        }
        al() {
            super.al();
            this.a.jw = AxisDefaults.h;
            this.a.jz = AxisDefaults.g;
        }
    }
    NumericRadiusAxisView.$t = /*@__PURE__*/ markType(NumericRadiusAxisView, 'NumericRadiusAxisView', NumericAxisBaseView.$);
    return NumericRadiusAxisView;
})();
