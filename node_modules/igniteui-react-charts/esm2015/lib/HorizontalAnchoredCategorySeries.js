/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnchoredCategorySeries } from "./AnchoredCategorySeries";
import { IHorizontalAnchoredCategorySeriesInteractionManager_$type } from "./IHorizontalAnchoredCategorySeriesInteractionManager";
import { DVContainer } from "igniteui-react-core";
import { runOn, Point_$type, typeCast, EnumUtil, enumGetBox, markType, markDep } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { CategoryMode_$type } from "./CategoryMode";
import { Axis } from "./Axis";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { TrendLineType_$type } from "igniteui-react-core";
import { CategoryTrendLineManagerFactory } from "./CategoryTrendLineManagerFactory";
import { ISortingAxis_$type } from "./ISortingAxis";
import { CategoryXAxis } from "./CategoryXAxis";
import { PropertyMetadata } from "igniteui-react-core";
/**
 * @hidden
 */
export let HorizontalAnchoredCategorySeries = /*@__PURE__*/ (() => {
    class HorizontalAnchoredCategorySeries extends AnchoredCategorySeries {
        constructor() {
            super(...arguments);
            this.aaf = null;
            this.aab = null;
            this.aah = null;
            this.aad = 0;
        }
        get aag() {
            if (this.aaf == null) {
                this.aaf = DVContainer.instance.createInstance(IHorizontalAnchoredCategorySeriesInteractionManager_$type, () => this.dg.n);
            }
            return this.aaf;
        }
        n4() {
            super.n4();
            this.xAxis = null;
            this.yAxis = null;
        }
        ca() {
            return 1;
        }
        cb() {
            if (this.yAxis != null && this.yAxis.ch) {
                return 4;
            }
            return 3;
        }
        bt() {
            if (this.bu == 0) {
                return 1;
            }
            else {
                return super.bt();
            }
        }
        w1() {
            return this.aab;
        }
        xh() {
            return this.aah;
        }
        u7(a) {
            if (this.w2 == null || this.w2.n.count == 0 || !this.hasMarkers || !this.vr()) {
                return Rect.empty;
            }
            return this.aag.d$d(this, this.w2.n, a, runOn(this, this.aat));
        }
        aat(a) {
            return this.yv.dc(a);
        }
        aal(a, b, c) {
            return this.aag.d$c(this, this.xh(), a, b, c);
        }
        ah(a) {
            return this.aag.d$a(this, this.w2.f, this.x3(this.cl), this.x4(this.cl), a);
        }
        ai(a) {
            return this.aag.d$b(this, this.w2.f, this.x3(this.cl), this.x4(this.cl), a);
        }
        gf(a, b) {
            if (this.ge(a, b)) {
                return true;
            }
            if (this.vs(a, b)) {
                return true;
            }
            return false;
        }
        getOffsetValue() {
            return this.w7.r(this.w1(), this.cl.by, this.cl.bx, this.getEffectiveViewport1(this.cl));
        }
        getCategoryWidth() {
            let a = this.getEffectiveViewport1(this.cl);
            return this.w1().getCategorySize(this.cl.by, this.cl.bx, a);
        }
        il(a, b, c) {
            if (this.c1 == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.cl);
            let e = this.w1();
            if (e == null) {
                return NaN;
            }
            let f = new ScalerParams(0, this.c1.vh, this.cl.bx, e.ch, d);
            let g = this.w7.r(e, this.c1.vh, this.cl.bx, d);
            return this.io(this.valueColumn, a, e, f, g, runOn(this, this.x1), b, c);
        }
        jq(a, b) {
            return this.jr(a, b, this.w1(), runOn(this, this.x1), this.valueColumn);
        }
        jo(a, b) {
            return this.jp(a, b, this.w1(), runOn(this, this.x1), this.valueColumn);
        }
        h4(a, b, c, d, e) {
            if (this.valueColumn == null) {
                return Number.POSITIVE_INFINITY;
            }
            return this.h5(a, b, this.w1(), d, e, this.valueColumn.count, runOn(this, this.x1));
        }
        uu(a, b, c) {
            if (this.w1() == null || this.xh() == null) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            return this.uw(a, b, c, this.w7.r(this.w1(), this.cl.by, this.cl.bx, this.getEffectiveViewport1(this.cl)), this.xh(), this.w1(), null, null, null);
        }
        fetchXAxis() {
            return this.aab;
        }
        fetchYAxis() {
            return this.aah;
        }
        zp(a) {
            this.xAxis = typeCast(CategoryAxisBase.$, a);
        }
        zq(a) {
            this.yAxis = typeCast(NumericYAxis.$, a);
        }
        xx() {
            return this.aah != null && this.aah.c1();
        }
        aap(a) {
            this.aab = a;
        }
        aaq(a) {
            this.aah = a;
        }
        wv(a, b) {
            return this.ys(a, b, this.aab);
        }
        p5(a, b, c, d) {
            switch (b) {
                case HorizontalAnchoredCategorySeries.$$p[0]:
                    this.aap(this.xAxis);
                    if (this.yv.c6) {
                        this.yv.c5 = CategoryTrendLineManagerFactory.a(this.yv.c5, this.aab, this.ro, this, this.dg);
                    }
                    break;
                case "TrendLineType":
                    let e = EnumUtil.getEnumValue(TrendLineType_$type, d);
                    if (e != 0) {
                        this.yv.c5 = CategoryTrendLineManagerFactory.a(this.yv.c5, this.aab, this.ro, this, this.dg);
                    }
                    break;
            }
            super.p5(a, b, c, d);
            switch (b) {
                case HorizontalAnchoredCategorySeries.$$p[0]:
                    if (c != d) {
                        this.od(typeCast(Axis.$, c));
                        this.qc(typeCast(Axis.$, d));
                        this.aap(this.xAxis);
                        this.xb.cu.g(this.hu);
                        this.qm(false);
                        this.ph();
                    }
                    break;
                case HorizontalAnchoredCategorySeries.$$p[1]:
                    if (c != d) {
                        this.od(typeCast(Axis.$, c));
                        this.qc(typeCast(Axis.$, d));
                        this.aaq(this.yAxis);
                        if (this.c1 != null) {
                            this.c1.nm();
                        }
                        this.xb.cu.g(this.hu);
                        this.xx();
                        this.qm(false);
                        this.ph();
                    }
                    break;
                case "CategoryMode":
                    if (this.xAxis != null) {
                        this.xAxis.l5(true);
                    }
                    break;
            }
        }
        oc(a, b, c, d) {
            super.oc(a, b, c, d);
            if (this.aab != null && typeCast(ISortingAxis_$type, this.aab) !== null) {
                this.aab.i$i();
            }
            switch (a) {
                case 4:
                    if (this.aab != null) {
                        this.aab.c1();
                    }
                    if (this.aah != null && !this.aah.c1()) {
                        this.qm(true);
                    }
                    break;
                case 1:
                    if (this.aab != null) {
                        this.aab.c1();
                    }
                    if (this.aah != null && !this.aah.c1()) {
                        this.qm(true);
                    }
                    break;
                case 0:
                    if (this.aab != null) {
                        this.aab.c1();
                    }
                    if (this.aah != null && !this.aah.c1()) {
                        this.qm(true);
                    }
                    break;
                case 2:
                    if (this.zb != null && this.yv.cu.d > 0 && this.aah != null && !this.aah.c1()) {
                        this.qm(true);
                    }
                    break;
                case 3:
                    if (d == this.zb) {
                        if (this.aab != null) {
                            this.aab.c1();
                        }
                        if (this.aah != null && !this.aah.c1()) {
                            this.qm(true);
                        }
                    }
                    break;
            }
        }
        aaj(a) {
            if (typeCast(CategoryXAxis.$, a) !== null || a.ce) {
                return true;
            }
            return false;
        }
        aak(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        get aae() {
            return this.aad;
        }
        set aae(a) {
            let b = this.aae;
            if (a != b) {
                this.aad = a;
                this.raisePropertyChanged("CategoryMode", enumGetBox(CategoryMode_$type, b), enumGetBox(CategoryMode_$type, this.aae));
            }
        }
        get useHighMarkerFidelity() {
            return this.xy;
        }
    }
    HorizontalAnchoredCategorySeries.$t = /*@__PURE__*/ markType(HorizontalAnchoredCategorySeries, 'HorizontalAnchoredCategorySeries', AnchoredCategorySeries.$);
    HorizontalAnchoredCategorySeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, HorizontalAnchoredCategorySeries, 'raisePropertyChanged', ['XAxis::aar', [CategoryAxisBase.$, null], 'YAxis::aas', [NumericYAxis.$, null]]);
    return HorizontalAnchoredCategorySeries;
})();
