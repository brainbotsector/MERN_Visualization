/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType, runOn, delegateCombine, EnumUtil, typeCast, fromEnum, markDep } from "igniteui-react-core";
import { IBucketizer_$type } from "./IBucketizer";
import { NotImplementedException } from "igniteui-react-core";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { truncate, intDivide, isNaN_ } from "igniteui-react-core";
import { MarkerSeries } from "./MarkerSeries";
import { IHasCategoryModePreference_$type } from "./IHasCategoryModePreference";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { RadialFrame } from "./RadialFrame";
import { DependencyProperty } from "igniteui-react-core";
import { HighlightingInfo } from "igniteui-react-core";
import { RadialSeriesRenderManager } from "./RadialSeriesRenderManager";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { ScalerParams } from "./ScalerParams";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { DoubleCollection } from "igniteui-react-core";
import { RadialAxes } from "./RadialAxes";
import { Visibility_$type } from "igniteui-react-core";
import { SeriesRenderingArguments } from "./SeriesRenderingArguments";
import { PropertyMetadata } from "igniteui-react-core";
import { round10N } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let RadialBucketCalculator = /*@__PURE__*/ (() => {
    class RadialBucketCalculator extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.c = 0;
            this.d = 0;
            this.b = 0;
            this.a = a;
        }
        getBucket(a) {
            throw new NotImplementedException(0);
        }
        getBucketWithoutUnknowns(a) {
            return this.getBucket(a);
        }
        getErrorBucket(a, b) {
            return NaN;
        }
        getBucketInfo(a, b, c, d) {
            a = this.c;
            b = this.d;
            c = this.b;
            d = this.a.cu.hu;
            return {
                p0: a,
                p1: b,
                p2: c,
                p3: d
            };
        }
        e(a) {
            let b = this.a.by;
            let c = this.a.bx;
            let d = this.a.cu.wy;
            if (b.isEmpty || c.isEmpty || d == null || this.a.cu.dd == null || this.a.cu.dd.count == 0) {
                this.b = 0;
                return;
            }
            let e = Math.floor(d.mz(c, b));
            let f = Math.ceil(d.my(c, b));
            if (d.ch) {
                f = Math.ceil(d.mz(c, b));
                e = Math.floor(d.my(c, b));
            }
            if (f < e) {
                f = d.lf + f;
            }
            let g = this.a.cu.w0;
            let h = g != null ? g.no : 0.75;
            let i = Math.min(c.width, c.height) * 0.5 * (h) * 2 * Math.PI;
            let j = Math.floor((f - e + 1) * a / i);
            this.b = truncate(Math.max(1, j));
            this.c = truncate(Math.max(0, Math.floor(e / this.b) - 1));
            this.d = truncate(Math.ceil(f / this.b));
        }
        cacheValues() {
        }
        unCacheValues() {
        }
    }
    RadialBucketCalculator.$t = /*@__PURE__*/ markType(RadialBucketCalculator, 'RadialBucketCalculator', Base.$, [IBucketizer_$type]);
    return RadialBucketCalculator;
})();
/**
 * @hidden
 */
export let RadialBase = /*@__PURE__*/ (() => {
    class RadialBase extends MarkerSeries {
        px(a) {
            super.px(a);
            this.w2 = a;
        }
        constructor() {
            super();
            this.w7 = null;
            this.w8 = null;
            this.xf = false;
            this.xe = false;
            this.xc = null;
            this.xd = null;
            this.assigningRadialStyle = null;
            this.assigningRadialMarkerStyle = null;
            this.w5 = new RadialFrame(3);
            this.w6 = new RadialFrame(3);
            this.w3 = new RadialFrame(3);
            this.w1 = null;
            this.w7 = new RadialSeriesRenderManager();
            this.w8 = new SeriesRenderer$2(RadialFrame.$, RadialBaseView.$, 1, runOn(this, this.x1), runOn(this, this.x4), runOn(this, this.dr), runOn(this, this.q0), runOn(this, this.x0), (a) => this.w2.cv.e(this.hu));
        }
        x0() {
            if (this.c2.g) {
                this.c2.t();
            }
        }
        get categoryAxis() {
            return this.wy;
        }
        as() {
            return this.wy;
        }
        wv(a, b) {
            return null;
        }
        dz(a, b, c, d) {
            if (!this.hasMarkers) {
                return false;
            }
            let e = this.wy;
            let f = new ScalerParams(1, this.c1.vh, this.u9, e.ch);
            f.c = this.getEffectiveViewport1(this.cl);
            let g = this.w0;
            let h = new ScalerParams(1, this.c1.vh, this.u9, g.ch);
            h.c = this.getEffectiveViewport1(this.cl);
            a.clear();
            this.vl.ci((i) => {
                if (i._visibility == 0) {
                    let j = new SeriesPointOfInterest();
                    let k = i.n;
                    let l = i.o;
                    if (k < this.u9.left || k > this.u9.right || l < this.u9.top || l > this.u9.bottom) {
                        return;
                    }
                    let m;
                    let n;
                    let o = this.w1.g(k, l, this.cl.by, this.cl.bx, m, n);
                    m = o.p4;
                    n = o.p5;
                    j.b = m;
                    j.c = n;
                    if (b) {
                        if (c) {
                            j.d = this.xv(j.c, d);
                        }
                        else {
                            let p = this.it(i);
                            if (!isNaN_(p)) {
                                j.d = this.xv(p, d);
                            }
                            else {
                                j.d = this.xv(j.c, d);
                            }
                        }
                    }
                    else {
                        j.d = e.gd(i.ak);
                    }
                    j.a = i.content;
                    a.add(j);
                }
            });
            return true;
        }
        xv(a, b) {
            if (b >= 0) {
                return round10N(a, b).toString();
            }
            else {
                return a.toString();
            }
        }
        get_fe() {
            return true;
        }
        get_ez() {
            return true;
        }
        w9(a, b, c) {
            let d = new HighlightingInfo();
            d.i = this;
            d.g = 0;
            d.f = this.dd.count - 1;
            d.c = true;
            if (c != null && c.g == d.g && c.f == d.f) {
                return c;
            }
            return d;
        }
        xp() {
            return false;
        }
        hb() {
            let a = super.hb();
            if (this.xp()) {
                let b = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.r = true;
                    $ret.ad = "DashArray";
                    $ret.p = true;
                    $ret.x = ((() => {
                        let $ret = new DoubleCollection();
                        $ret.add(5);
                        $ret.add(5);
                        return $ret;
                    })());
                    $ret.q = true;
                    return $ret;
                })());
                a.add(b);
            }
            if (!this.xp()) {
                let c = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.r = true;
                    $ret.ad = "Brush";
                    $ret.p = true;
                    $ret.y = "ActualBrush";
                    $ret.q = true;
                    return $ret;
                })());
                c.valueResolving = delegateCombine(c.valueResolving, runOn(this, this.qu));
                a.add(c);
            }
            if (!this.xp()) {
                let d = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.r = true;
                    $ret.ad = "Outline";
                    $ret.p = true;
                    $ret.y = "ActualOutline";
                    $ret.q = true;
                    return $ret;
                })());
                d.valueResolving = delegateCombine(d.valueResolving, runOn(this, this.qu));
                a.add(d);
            }
            return a;
        }
        xa(a, b, c) {
            let d = this.w2.cv.c;
            let e = this.w2.cv.d;
            let f = this.w2.cv.b;
            let g = this.w4();
            let h = this.dd.count;
            let i = this.wy;
            let j = -1;
            let k = -1;
            let l = this.jj(b);
            j = truncate(Math.floor((intDivide(l, f)))) * f;
            k = j + (f - 1);
            if (c != null && c.g == j && c.f == k) {
                return c;
            }
            let m = new HighlightingInfo();
            m.i = this;
            m.g = j;
            m.f = k;
            return m;
        }
        xb(a, b, c) {
            let d = this.w2.cv.c;
            let e = this.w2.cv.d;
            let f = this.w2.cv.b;
            let g = this.w4();
            let h = this.dd.count;
            let i = this.wy;
            let j = -1;
            let k = -1;
            let l = this.jj(b);
            j = truncate(Math.floor((intDivide(l, f)))) * f;
            k = j + (f - 1);
            if (c != null && c.g == j && c.f == k) {
                return c;
            }
            let m = new HighlightingInfo();
            m.d = true;
            m.i = this;
            m.g = j;
            m.f = k;
            return m;
        }
        c6(a, b, c) {
            if (this.d1 && this.fk(this.bo) && !c) {
                let d = this.xa(a, b, this.xc);
                this.xc = d;
                return d;
            }
            else {
                let e = this.w9(a, b, this.xc);
                this.xc = e;
                return e;
            }
        }
        c7(a, b, c) {
            if (this.fk(this.bo) && !c) {
                let d = this.xb(a, b, this.xd);
                this.xd = d;
                return d;
            }
            else {
                let e = this.w9(a, b, this.xd);
                e.d = true;
                this.xd = e;
                return e;
            }
        }
        xo() {
            return (this.assigningRadialStyle != null && this.xf) || (this.bo != 1) || (this.cf != 1) || (this.ce != 1);
        }
        xn() {
            return (this.assigningRadialMarkerStyle != null && this.xe) || (this.bo != 1) || (this.cf != 1) || (this.ce != 1);
        }
        x3(a) {
            if (this.assigningRadialStyle != null && this.xf) {
                this.assigningRadialStyle(this, a);
            }
        }
        x2(a) {
            if (this.assigningRadialMarkerStyle != null && this.xe) {
                this.assigningRadialMarkerStyle(this, a);
            }
        }
        xr(a) {
            return a.cv.b;
        }
        xs(a) {
            return a.cv.c;
        }
        ag() {
            return [this.wy, this.w0];
        }
        rk(a, b) {
            this.w2.cv.e(this.hu);
            this.qm(false);
        }
        rj(a, b) {
            this.w2.cv.e(this.hu);
            this.qm(false);
        }
        p5(a, b, c, d) {
            super.p5(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    if (c != null && d == null) {
                        if (this.wy != null) {
                            this.wy.b0(this);
                        }
                        if (this.w0 != null) {
                            this.w0.b0(this);
                        }
                    }
                    if (c == null && d != null) {
                        if (this.wy != null) {
                            this.wy.ct(this);
                        }
                        if (this.w0 != null) {
                            this.w0.ct(this);
                        }
                    }
                    this.w2.cv.e(this.hu);
                    this.qm(false);
                    break;
                case RadialBase.$$p[0]:
                    if (this.wy != null && this.w0 != null) {
                        this.w1 = new RadialAxes(this.w0, this.wy);
                    }
                    if (c != null) {
                        c.b0(this);
                    }
                    if (d != null) {
                        d.ct(this);
                    }
                    this.w2.cv.e(this.hu);
                    this.qm(false);
                    break;
                case RadialBase.$$p[4]:
                    if (this.wy != null && this.w0 != null) {
                        this.w1 = new RadialAxes(this.w0, this.wy);
                    }
                    if (c != null) {
                        c.b0(this);
                    }
                    if (d != null) {
                        d.ct(this);
                    }
                    this.w2.cv.e(this.hu);
                    if (this.w0 == null || !this.w0.c1()) {
                        this.qm(false);
                    }
                    break;
                case "SyncLink":
                    if (this.ct != null && this.c1 != null) {
                        this.w2.cv.e(this.hu);
                        this.qm(false);
                    }
                    break;
                case "TransitionProgress":
                    this.w6.c(this.i6, this.w5, this.w3);
                    if (this.dt(this.cl)) {
                        return;
                    }
                    if (this.i6 == 1) {
                        this.x4(this.w3, this.w2);
                        this.pk();
                    }
                    else {
                        this.x4(this.w6, this.w2);
                    }
                    if (this.c1 != null) {
                        this.c1.p6(this);
                    }
                    break;
                case RadialBase.$$p[1]:
                    this.qm(false);
                    this.ph();
                    break;
                case "VisibilityProxy":
                    if (EnumUtil.getEnumValue(Visibility_$type, c) != 0 && EnumUtil.getEnumValue(Visibility_$type, d) == 0) {
                        this.w2.cv.e(this.hu);
                    }
                    break;
                case RadialBase.$$p[3]:
                    this.xf = this.xm();
                    this.qm(false);
                    break;
                case RadialBase.$$p[2]:
                    this.xe = this.xl();
                    this.qm(false);
                    break;
            }
        }
        xm() {
            return this.xk;
        }
        xl() {
            return this.xj;
        }
        xh(a) {
            if (typeCast(NumericRadiusAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        xg(a) {
            if (typeCast(CategoryAngleAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        j2(a) {
            let b = this.jj(a);
            return b >= 0 && this.dd != null && b < this.dd.count ? this.dd.item(b) : null;
        }
        xq(a) {
            let b = this.cl.by;
            let c = this.cl.bx;
            if (this.wy != null && !b.isEmpty && !c.isEmpty && this.w1 != null) {
                let d = this.w1.c(a);
                if (d < 0) {
                    d += Math.PI * 2;
                }
                if (d > Math.PI * 2) {
                    d -= Math.PI * 2;
                }
                return d;
            }
            return NaN;
        }
        h6(a) {
            let b = this.cl.by;
            let c = this.cl.bx;
            let d = -1;
            if (this.wy != null && !b.isEmpty && !c.isEmpty && this.w1 != null) {
                let e = this.w1.c(a);
                if (e < 0) {
                    e += Math.PI * 2;
                }
                if (e > Math.PI * 2) {
                    e -= Math.PI * 2;
                }
                let f = this.wy.getUnscaledAngle(e);
                if (this.wy.categoryMode != 0) {
                    f -= 0.5;
                }
                d = f;
            }
            return d;
        }
        jj(a) {
            let b = truncate(Math.round(this.h6(a)));
            if (this.dd != null && b == this.dd.count) {
                b = 0;
            }
            return b;
        }
        fx(a) {
            return false;
        }
        w4() {
            let a = this.w3;
            if (this.dr()) {
                if (this.c2.g) {
                    this.c2.t();
                }
                a = this.w6;
            }
            return a;
        }
        o6() {
            super.o6();
            if (this.wy != null) {
                this.wy.h8(false);
            }
            if (this.w0 != null) {
                this.w0.h8(false);
            }
        }
        gw(a, b, c) {
            let d = true;
            let e = c;
            if (!super.gw(a, b, c) || !c.o() || b.isEmpty || a.isEmpty || this.wy == null || this.wy.itemsSource == null || this.w0 == null || this.w1 == null || this.dd == null || this.wy.bi == null || this.w0.bi == null || this.w0.lx == this.w0.lw) {
                e.cv.b = 0;
                d = false;
            }
            return d;
        }
        qn(a) {
            super.qn(a);
            let b;
            let c;
            let d = this.getViewInfo(c, b);
            c = d.p0;
            b = d.p1;
            if (!this.gw(c, b, this.cl)) {
                this.n7(true, this.cl);
                return;
            }
            let e = new SeriesRenderingArguments(this, c, b, a, this.gb);
            let f = this.w8.g(e, this.w5, this.w3, this.w6, this.w2);
            this.w5 = f.p1;
            this.w3 = f.p2;
            this.w6 = f.p3;
        }
        xt() {
            let a = 0;
            for (let b of fromEnum(this.c1.series)) {
                if (b == this || this.be == b) {
                    return a;
                }
                let c = typeCast(RadialBase.$, b);
                if (c != null && c.wy == this.wy && c.preferredCategoryMode(c.wy) == 2) {
                    a++;
                }
            }
            return -1;
        }
    }
    RadialBase.$t = /*@__PURE__*/ markType(RadialBase, 'RadialBase', MarkerSeries.$, [IHasCategoryModePreference_$type]);
    RadialBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, RadialBase, 'raisePropertyChanged', ['AngleAxis:wy:x5', [CategoryAngleAxis.$, null], 'ClipSeriesToBounds:xi:x6', [0, false], 'IsCustomRadialMarkerStyleAllowed:xj:x7', [0, false], 'IsCustomRadialStyleAllowed:xk:x8', [0, false], 'ValueAxis:w0:x9', [NumericRadiusAxis.$, null]]);
    return RadialBase;
})();
/**
 * @hidden
 */
export let RadialBaseView = /*@__PURE__*/ (() => {
    class RadialBaseView extends MarkerSeriesView {
        constructor(a) {
            super(a);
            this.cv = null;
            this.cu = null;
            this.cw = null;
            this.cx = 0;
            this.cy = null;
            this.cu = a;
            this.cw = new Pool$1(Marker.$);
            this.cl(this.cw);
        }
        ci(a) {
            this.cw.c(a);
        }
    }
    RadialBaseView.$t = /*@__PURE__*/ markType(RadialBaseView, 'RadialBaseView', MarkerSeriesView.$);
    return RadialBaseView;
})();
