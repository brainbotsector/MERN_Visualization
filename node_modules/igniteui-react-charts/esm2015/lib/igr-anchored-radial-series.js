import { TrendLineType_$type } from "igniteui-react-core";
import { IgrRadialBase } from "./igr-radial-base";
import { ensureEnum, brushToString, stringToBrush, toDoubleCollection, fromDoubleCollection, toPoint, fromPoint } from "igniteui-react-core";
/**
 * Represents the base class for all IgxDataChartComponent anchored radial category series.
*/
export class IgrAnchoredRadialSeries extends IgrRadialBase {
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets or sets the item path that provides the values for the current series.
    */
    get valueMemberPath() {
        return this.i.y0;
    }
    set valueMemberPath(v) {
        this.i.y0 = v;
    }
    /**
     * Gets or sets the value mapping property for the current series object.
    */
    get highlightedValueMemberPath() {
        return this.i.yt;
    }
    set highlightedValueMemberPath(v) {
        this.i.yt = v;
    }
    /**
     * Gets or sets the label displayed before series value in the Data Legend.
    */
    get valueMemberAsLegendLabel() {
        return this.i.yw;
    }
    set valueMemberAsLegendLabel(v) {
        this.i.yw = v;
    }
    /**
     * Gets or sets the unit displayed after series value in the Data Legend.
    */
    get valueMemberAsLegendUnit() {
        return this.i.yy;
    }
    set valueMemberAsLegendUnit(v) {
        this.i.yy = v;
    }
    /**
     * Gets or sets the trend type for the current series object.
    */
    get trendLineType() {
        return this.i.yg;
    }
    set trendLineType(v) {
        this.i.yg = ensureEnum(TrendLineType_$type, v);
    }
    /**
     * Gets or sets the brush that specifies how to the current series
     * object's Trend line is drawn.
    */
    get trendLineBrush() {
        return brushToString(this.i.zl);
    }
    set trendLineBrush(v) {
        this.i.zl = stringToBrush(v);
    }
    /**
     * Gets the effective TrendLineBrush for this series.
    */
    get actualTrendLineBrush() {
        return brushToString(this.i.zk);
    }
    set actualTrendLineBrush(v) {
        this.i.zk = stringToBrush(v);
    }
    /**
     * Gets or sets the thickness of the current series object's trend line.
    */
    get trendLineThickness() {
        return this.i.yq;
    }
    set trendLineThickness(v) {
        this.i.yq = +v;
    }
    /**
     * Gets or sets a collection of double values that indicate the pattern of dashes and gaps that
     * is used to draw the trend line for the current series object.
    */
    get trendLineDashArray() {
        return fromDoubleCollection(this.i.zm);
    }
    set trendLineDashArray(v) {
        this.i.zm = toDoubleCollection(v);
    }
    /**
     * Gets or sets the trend line period for the current series.
     * The typical, and initial, value for bollinger band periods is 20.
    */
    get trendLinePeriod() {
        return this.i.yr;
    }
    set trendLinePeriod(v) {
        this.i.yr = +v;
    }
    /**
     * Sets or Gets the Z index of the trendline.
    */
    get trendLineZIndex() {
        return this.i.ys;
    }
    set trendLineZIndex(v) {
        this.i.ys = +v;
    }
    get hasValueAxis() {
        return this.i.d6;
    }
    get isValueAxisInverted() {
        return this.i.fq;
    }
    getItemValue(item, memberPathName) {
        let iv = this.i.j5(item, memberPathName);
        return (iv);
    }
    /**
     * Gets the value of a requested member path from the series.
    
    * @param memberPathName  * The property name of a valid member path for the series
    */
    getMemberPathValue(memberPathName) {
        let iv = this.i.li(memberPathName);
        return (iv);
    }
    getPreviousOrExactIndex(world, skipUnknowns) {
        let iv = this.i.jq(toPoint(world), skipUnknowns);
        return (iv);
    }
    getNextOrExactIndex(world, skipUnknowns) {
        let iv = this.i.jo(toPoint(world), skipUnknowns);
        return (iv);
    }
    getSeriesValue(world, useInterpolation, skipUnknowns) {
        let iv = this.i.il(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    }
    getSeriesValuePosition(world, useInterpolation, skipUnknowns) {
        let iv = this.i.uu(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    }
    /**
     * Returns the offset value for this series if grouped on a category axis.
    
    */
    getOffsetValue() {
        let iv = this.i.getOffsetValue();
        return (iv);
    }
    /**
     * Returns the width of the category grouping this series is in.
    
    */
    getCategoryWidth() {
        let iv = this.i.getCategoryWidth();
        return (iv);
    }
    /**
     * Scrolls the specified item into the view.
    
    * @param item  * The item to scroll into view.
    */
    scrollIntoView(item) {
        let iv = this.i.fx(item);
        return (iv);
    }
}
