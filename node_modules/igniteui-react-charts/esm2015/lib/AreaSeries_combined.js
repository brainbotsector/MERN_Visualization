/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { IUnknownValuePlotting_$type } from "igniteui-react-core";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { UnknownValuePlotting_$type } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { typeCast, runOn, enumGetBox, markType, markDep } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { PropertyMetadata } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { Defaults } from "./Defaults";
import { ISortingAxis_$type } from "./ISortingAxis";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
export let AreaSeries = /*@__PURE__*/ (() => {
    class AreaSeries extends HorizontalAnchoredCategorySeries {
        bb() {
            return new AreaSeries();
        }
        ci() {
            return new AreaSeriesView(this);
        }
        xc() {
            return 1;
        }
        co() {
            if (this.cp == 0) {
                return 2;
            }
            return super.co();
        }
        px(a) {
            super.px(a);
            this.aau = a;
        }
        get_eg() {
            return true;
        }
        get_ef() {
            return true;
        }
        constructor() {
            super();
            this.aav = null;
            this.aav = new CategoryLineRasterizer();
            this.ab = AreaSeries.$;
            this.aae = 0;
        }
        preferredCategoryMode(a) {
            return this.aae;
        }
        gf(a, b) {
            let c = this.uu(this.uz(a), true, false);
            if (this.aal(a, c, b)) {
                return true;
            }
            if (this.ge(a, b)) {
                return true;
            }
            if (this.vs(a, b)) {
                return true;
            }
            return false;
        }
        n7(a, b) {
            super.n7(a, b);
            let c = b;
            c.de();
        }
        yl(a, b) {
            super.yl(a, b);
            let c = b.cu.d;
            let d = typeCast(AreaSeriesView.$, b);
            let e = a.f;
            let f = this.getEffectiveViewport1(d);
            this.xa.a2(this, this.xu(), runOn(this, this.wv), this.x3(b), this.x4(b));
            let g = false;
            let h = this.xa.b;
            if (h != null) {
                g = true;
            }
            if (g) {
                let i = new ScalerParams(0, b.by, b.bx, this.aab.ch, f);
                this.yh(e, -1, this.valueColumn.count, this.aab, i, b.q, -1);
            }
            let j = d.dq;
            let k = d.dr;
            let l = d.ds;
            let m = d.dt;
            this.xa.ad(j, true, false, true, true);
            this.xa.ad(k, true, false, true, true);
            this.xa.ad(l, false, true, false, false);
            this.xa.ad(m, false, true, false, false);
            if (b.cy(a)) {
                d.dg(e.count, e, true, c, this.hu, (n, o, p, q, r) => this.zr(n, a.f.count, b), this.unknownValuePlotting, e.count == 1 ? null : this.yu(e, e.count - 1, b.bx, b.by, true));
                b.c1(a);
            }
            let n = this.fetchYAxis();
            l._opacity = this.xa.j * this.hq;
            m._opacity = 0.5 * this.xa.j * this.hq;
        }
        p5(a, b, c, d) {
            super.p5(a, b, c, d);
            switch (b) {
                case AreaSeries.$$p[0]:
                    this.w7.m = this.unknownValuePlotting == 0;
                    this.qm(false);
                    this.ph();
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.xy;
        }
    }
    AreaSeries.$t = /*@__PURE__*/ markType(AreaSeries, 'AreaSeries', HorizontalAnchoredCategorySeries.$, [IUnknownValuePlotting_$type]);
    AreaSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, AreaSeries, 'raisePropertyChanged', ['UnknownValuePlotting::aax', [UnknownValuePlotting_$type, /*@__PURE__*/ enumGetBox(UnknownValuePlotting_$type, 1)]]);
    return AreaSeries;
})();
/**
 * @hidden
 */
export let AreaSeriesView = /*@__PURE__*/ (() => {
    class AreaSeriesView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.dd = null;
            this.dl = new Path();
            this.dn = new Path();
            this.dm = new Path();
            this.dp = new Path();
            this.dh = new Path();
            this.dj = new Path();
            this.di = new Path();
            this.dk = new Path();
            this.dd = a;
        }
        au() {
            super.au();
            if (!this.q) {
                this.dd.vp = Defaults.e;
            }
        }
        get dq() {
            return this.dn;
        }
        get dr() {
            return this.dp;
        }
        get ds() {
            return this.dl;
        }
        get dt() {
            return this.dm;
        }
        de() {
            this.dl.an = null;
            this.dm.an = null;
            this.dn.an = null;
            this.dp.an = null;
            this.as();
        }
        df(a, b, c, d, e, f, g) {
            this.dg(a, b, c, d, e, f, g, null);
        }
        dg(a, b, c, d, e, f, g, h) {
            this.dd.aav.a = typeCast(ISortingAxis_$type, this.cw.fetchXAxis()) !== null ? true : false;
            this.dd.aav.j(this.dl, this.dn, this.dm, this.dp, a, b, c, d, e, f, g, h);
            this.as();
        }
        be() {
            super.be();
            this.dh.an = this.dl.an;
            this.dj.an = this.dn.an;
            this.di.an = this.dm.an;
            this.dk.an = this.dp.an;
            let a = this.br();
            this.dh._fill = a;
            this.dh._opacity = 1;
            this.di._fill = a;
            this.di._opacity = 1;
            this.dj._stroke = a;
            this.dj.ad = this.e.hv + 3;
            this.dk._stroke = a;
            this.dk.ad = this.e.hv + 3;
        }
        a8(a, b) {
            super.a8(a, b);
            if (b) {
                a.t(this.dh);
                a.t(this.di);
                a.t(this.dj);
                a.t(this.dk);
            }
            else {
                a.t(this.dl);
                a.t(this.dm);
                a.t(this.dn);
                a.t(this.dp);
            }
        }
        an(a) {
            super.an(a);
            this.e.a4.exportPathData(a, this.dn, "lowerShape", ["Lower"]);
            this.e.a4.exportPathData(a, this.dp, "upperShape", ["Upper", "Main"]);
            this.e.a4.exportPathData(a, this.dm, "translucentShape", ["Translucent"]);
            this.e.a4.exportPathData(a, this.dl, "fillShape", ["Fill"]);
        }
        af() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.uj = a;
            this.e.i2 = 5;
            this.e.i3 = 1;
            this.e.i4 = -3;
        }
    }
    AreaSeriesView.$t = /*@__PURE__*/ markType(AreaSeriesView, 'AreaSeriesView', AnchoredCategorySeriesView.$);
    return AreaSeriesView;
})();
