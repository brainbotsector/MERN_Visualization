/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { PolarLineSeriesBase } from "./PolarLineSeriesBase";
import { DependencyProperty } from "igniteui-react-core";
import { runOn, markType, markDep } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { PolarLineSeriesBaseView } from "./PolarLineSeriesBaseView";
import { PathGeometry } from "igniteui-react-core";
import { Defaults } from "./Defaults";
import { Extensions } from "igniteui-react-core";
import { Numeric } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
export let PolarSplineAreaSeries = /*@__PURE__*/ (() => {
    class PolarSplineAreaSeries extends PolarLineSeriesBase {
        bb() {
            return new PolarSplineAreaSeries();
        }
        x7() {
            return false;
        }
        get_ef() {
            return true;
        }
        get_fl() {
            return true;
        }
        ci() {
            return new PolarSplineAreaSeriesView(this);
        }
        px(a) {
            super.px(a);
            this.aa2 = a;
        }
        constructor() {
            super();
            this.ab = PolarSplineAreaSeries.$;
        }
        aa0(a) {
            let b = a;
            b.c8();
        }
        aa1(a, b) {
            this.aa0(b);
            if (a.m.count < 1) {
                return;
            }
            let c = b;
            c.c9(a.m, this.aa3);
            this.xe.az(this, this.x6(), runOn(this, this.ww));
            let d = false;
            let e = this.xe.b;
            if (e != null) {
                d = true;
            }
            if (d) {
                this.zl(-1, this.xs.count, b.q);
            }
            let f = c.df;
            let g = c.de;
            this.xe.ad(f, true, false, true, true);
            this.xe.ad(g, false, true, false, false);
            g._opacity = this.xe.j * this.hq;
        }
        get_aax() {
            return true;
        }
        p5(a, b, c, d) {
            super.p5(a, b, c, d);
            switch (b) {
                case PolarSplineAreaSeries.$$p[0]:
                    this.qm(false);
                    break;
            }
        }
    }
    PolarSplineAreaSeries.$t = /*@__PURE__*/ markType(PolarSplineAreaSeries, 'PolarSplineAreaSeries', PolarLineSeriesBase.$);
    PolarSplineAreaSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, PolarSplineAreaSeries, 'raisePropertyChanged', ['Stiffness:aa3:aa5', [1, 0.5]]);
    return PolarSplineAreaSeries;
})();
/**
 * @hidden
 */
export let PolarSplineAreaSeriesView = /*@__PURE__*/ (() => {
    class PolarSplineAreaSeriesView extends PolarLineSeriesBaseView {
        constructor(a) {
            super(a);
            this.c7 = null;
            this.dd = ((() => {
                let $ret = new Path();
                $ret.an = new PathGeometry();
                return $ret;
            })());
            this.dc = ((() => {
                let $ret = new Path();
                $ret.an = new PathGeometry();
                return $ret;
            })());
            this.db = ((() => {
                let $ret = new Path();
                $ret.an = new PathGeometry();
                return $ret;
            })());
            this.da = ((() => {
                let $ret = new Path();
                $ret.an = new PathGeometry();
                return $ret;
            })());
            this.c7 = a;
        }
        au() {
            super.au();
            if (!this.q) {
                this.c7.vp = Defaults.e;
            }
        }
        get de() {
            return this.dc;
        }
        get df() {
            return this.dd;
        }
        c8() {
            Extensions.e(this.dc.an);
            Extensions.e(this.dd.an);
            Extensions.e(this.da.an);
            Extensions.e(this.db.an);
            this.as();
        }
        c9(a, b) {
            this.dd.an.c = Numeric.h(a.count + 1, (c) => c < a.count ? a._inner[c].x : a._inner[c - a.count].x, (c) => c < a.count ? a._inner[c].y : a._inner[c - a.count].y, b);
            this.dc.an.c = Numeric.h(a.count + 1, (c) => c < a.count ? a._inner[c].x : a._inner[c - a.count].x, (c) => c < a.count ? a._inner[c].y : a._inner[c - a.count].y, b);
            this.as();
        }
        bd() {
            super.bd();
        }
        be() {
            super.be();
            let a = this.br();
            this.da.an = this.dc.an;
            this.db.an = this.dd.an;
            this.da._fill = a;
            this.da._opacity = 1;
            this.db._stroke = a;
            this.db.ad = this.e.hv + 3;
        }
        a8(a, b) {
            super.a8(a, b);
            if (a.d) {
                if (b) {
                    a.t(this.da);
                    a.t(this.db);
                }
                else {
                    a.t(this.dc);
                    a.t(this.dd);
                }
            }
        }
        an(a) {
            super.an(a);
            this.e.a4.exportPathData(a, this.dd, "polarShape", ["Main"]);
            this.e.a4.exportPathData(a, this.dc, "fillShape", ["Fill"]);
        }
        af() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.uj = a;
            this.e.i2 = 5;
            this.e.i3 = 5;
            this.e.i4 = 5;
        }
    }
    PolarSplineAreaSeriesView.$t = /*@__PURE__*/ markType(PolarSplineAreaSeriesView, 'PolarSplineAreaSeriesView', PolarLineSeriesBaseView.$);
    return PolarSplineAreaSeriesView;
})();
