/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Series } from "./Series";
import { IHasCategoryModePreference_$type } from "./IHasCategoryModePreference";
import { Axis } from "./Axis";
import { DependencyProperty } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { Point_$type, typeCast, Delegate_$type, markType, markDep } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { AxisAnnotation } from "./AxisAnnotation";
import { SeriesView } from "./SeriesView";
import { NotImplementedException } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { NumericAxisBase } from "./NumericAxisBase";
import { AxisAnnotationFrame } from "./AxisAnnotationFrame";
import { ScalerParams } from "./ScalerParams";
import { CategoryXAxis } from "./CategoryXAxis";
import { AxisAnnotationFrameManager } from "./AxisAnnotationFrameManager";
import { PropertyMetadata } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { stringFormat } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
/**
 * @hidden
 */
export let ValueOverlay = /*@__PURE__*/ (() => {
    class ValueOverlay extends Series {
        bb() {
            return new ValueOverlay();
        }
        constructor() {
            super();
            this.vu = 0;
            this.vv = 0;
            this.vr = 0;
            this.ve = null;
            this.vk = null;
            this.vj = null;
            this.ab = ValueOverlay.$;
        }
        il(a, b, c) {
            return this.vw;
        }
        vs(a, b) {
            let c = Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
            let d = Math.acos((a.x - b.x) / c);
            if ((a.y - b.y) < 0) {
                d = (2 * Math.PI) - d;
            }
            return d;
        }
        uu(a, b, c) {
            if (this.vd == null) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            let d = this.vt();
            let e = NaN;
            let f = NaN;
            let g = NaN;
            let h = { $type: Point_$type, x: 0.5, y: 0.5 };
            let i = NaN;
            switch (this.vd.a2) {
                case 2:
                    i = Math.sqrt(Math.pow(a.x - h.x, 2) + Math.pow(a.y - h.y, 2));
                    g = d;
                    e = h.x + Math.cos(g) * i;
                    f = h.y + Math.sin(g) * i;
                    f = this.cl.bx.top + this.cl.bx.height * (f - this.cl.by.top) / this.cl.by.height;
                    e = this.cl.bx.left + this.cl.bx.width * (e - this.cl.by.left) / this.cl.by.width;
                    break;
                case 0:
                    e = d;
                    f = a.y;
                    f = this.cl.bx.top + this.cl.bx.height * (f - this.cl.by.top) / this.cl.by.height;
                    break;
                case 1:
                    f = d;
                    e = a.x;
                    e = this.cl.bx.left + this.cl.bx.width * (e - this.cl.by.left) / this.cl.by.width;
                    break;
                case 3:
                    g = this.vs(a, h);
                    i = d;
                    e = h.x + Math.cos(g) * i;
                    f = h.y + Math.sin(g) * i;
                    f = this.cl.bx.top + this.cl.bx.height * (f - this.cl.by.top) / this.cl.by.height;
                    e = this.cl.bx.left + this.cl.bx.width * (e - this.cl.by.left) / this.cl.by.width;
                    break;
            }
            return { $type: Point_$type, x: e, y: f };
        }
        jj(a) {
            throw new NotImplementedException(0);
        }
        j2(a) {
            return this;
        }
        fx(a) {
            return false;
        }
        aq(a) {
            let b = typeCast(NumericAxisBase.$, a);
            let c = this.vw;
            if (isNaN_(c) || isInfinity(c)) {
                return null;
            }
            return new AxisRange(c, c);
        }
        qn(a) {
            this.n7(true, this.cl);
            if (!this.vi()) {
                if (this.ve != null) {
                    this.wf(NaN, this.dr());
                }
                return;
            }
            if (this.fz(a)) {
                if (this.dr()) {
                    if (this.c2.g) {
                        this.c2.t();
                    }
                    let b = this.vu;
                    this.vu = this.vv;
                    this.vv = b;
                }
                else {
                    this.vu = this.vr;
                }
                this.vr = this.vt();
                this.q0();
            }
            else {
                this.vr = this.vt();
                this.we(this.vr, this.vg);
            }
        }
        vt() {
            let a, b;
            let c = this.getViewInfo(b, a);
            b = c.p0;
            a = c.p1;
            let d = this.getEffectiveViewport1(this.cl);
            let e = new ScalerParams(0, a, b, this.vd.ch, d);
            return this.vd.ej(this.vw, e);
        }
        we(a, b) {
            if (this.vd == null) {
                return;
            }
            let c = typeCast(CategoryAxisBase.$, this.vd);
            if (c != null && !c.ce) {
                if (this.vw > c.lg - 1) {
                    return;
                }
                if (c.categoryMode != 0) {
                    let d = this.getEffectiveViewport1(b);
                    let e = 0.5 * c.getCategorySize(b.by, b.bx, d);
                    let f = false;
                    if (c.cp && !c.ch) {
                        f = true;
                    }
                    if (typeCast(CategoryXAxis.$, c) !== null && c.ch) {
                        f = true;
                    }
                    if (f) {
                        e = -e;
                    }
                    a += e;
                }
            }
            let g = typeCast(NumericAxisBase.$, this.vd);
            if (g != null) {
                if (this.vw < g.lx || this.vw > g.lw) {
                    return;
                }
                if (g.lj && this.vw < 0) {
                    return;
                }
            }
            let h;
            switch (this.vd.a2) {
                case 2:
                case 3:
                    h = this.vd.j5(a, b.by, b.bx, this.getEffectiveViewport1(b), this.u1(b));
                    break;
                default:
                    h = this.vd.j5(a, b.by, b.bx, this.getEffectiveViewport1(b), this.u1(b));
                    break;
            }
            if (h != null) {
                b.b1(h);
            }
            if (!b.q) {
                this.wf(a, this.dr());
            }
        }
        gw(a, b, c) {
            let d = true;
            d = super.gw(a, b, c);
            if (!c.o() || b.isEmpty || a.isEmpty || this.vd == null || this.vd.bi == null) {
                d = false;
            }
            return d;
        }
        rk(a, b) {
            this.qm(false);
        }
        rj(a, b) {
            this.qm(false);
        }
        oc(a, b, c, d) {
            throw new NotImplementedException(0);
        }
        p5(a, b, c, d) {
            super.p5(a, b, c, d);
            switch (b) {
                case ValueOverlay.$$p[11]:
                    if (c != null) {
                        c.b0(this);
                    }
                    if (d != null) {
                        d.ct(this);
                    }
                    this.qm(false);
                    this.ph();
                    break;
                case "TransitionProgress":
                    this.vv = this.vu + this.i6 * (this.vr - this.vu);
                    if (this.dt(this.cl)) {
                        return;
                    }
                    if (this.i6 == 1) {
                        this.we(this.vr, this.vg);
                        this.pk();
                    }
                    else {
                        this.we(this.vv, this.vg);
                    }
                    if (this.c1 != null) {
                        this.c1.p6(this);
                    }
                    break;
                case ValueOverlay.$$p[13]:
                    let e = typeCast(NumericAxisBase.$, this.vd);
                    if (e != null) {
                        e.c1();
                    }
                    this.qm(true);
                    this.pi();
                    break;
                case ValueOverlay.$$p[12]:
                case ValueOverlay.$$p[10]:
                case ValueOverlay.$$p[1]:
                case ValueOverlay.$$p[0]:
                case ValueOverlay.$$p[3]:
                case ValueOverlay.$$p[4]:
                case ValueOverlay.$$p[9]:
                case ValueOverlay.$$p[5]:
                case ValueOverlay.$$p[6]:
                case ValueOverlay.$$p[7]:
                case ValueOverlay.$$p[8]:
                    this.qm(true);
                    break;
            }
        }
        o6() {
            super.o6();
            if (this.vd != null) {
                this.vd.h8(false);
            }
        }
        n7(a, b) {
            super.n7(a, b);
            let c = b;
            c.b0();
        }
        vi() {
            if (this.vd == null || this.vd.bi == null || isNaN_(this.vw) || this._visibility != 0) {
                return false;
            }
            let a = typeCast(CategoryAxisBase.$, this.vd);
            if (a != null && a.lg == 0) {
                return false;
            }
            return true;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get categoryAxis() {
            return typeCast(CategoryAxisBase.$, this.vd);
        }
        ci() {
            return new ValueOverlayView(this);
        }
        px(a) {
            super.px(a);
            this.vg = typeCast(ValueOverlayView.$, a);
        }
        qo(a, b) {
            super.qo(a, b);
            if (!this.gj) {
                this.cl.a4(b);
                return;
            }
            this.cl.a4(b);
            if (this.dt(this.ck) || !this.vi()) {
                return;
            }
            let c = this.getEffectiveViewport1(this.cl);
            let d = this.vd.ej(this.vw, new ScalerParams(0, this.ck.by, a, this.vd.ch, c));
            this.we(d, typeCast(ValueOverlayView.$, this.ck));
            this.gj = false;
        }
        getOffsetValue() {
            return 0;
        }
        getCategoryWidth() {
            return 0;
        }
        get wx() {
            return new Thickness(1, this.vn, this.vp, this.vo, this.vm);
        }
        ag() {
            return [this.vd];
        }
        wf(a, b) {
            if (isNaN_(a)) {
                if (this.ve != null) {
                    AxisAnnotationFrameManager.b(this.ve);
                    AxisAnnotationFrameManager.d(this, this.ve, true, this.vj, this.vk, b, this.vx, this.vx, this.vf, this.vf);
                }
                return;
            }
            let c = false;
            if (this.vj == null) {
                c = true;
                this.vk = new List$1(Axis.$, 0);
                this.vj = new Dictionary$2(Axis.$, Pool$1.$.specialize(AxisAnnotation.$), 0);
            }
            this.ve = new AxisAnnotationFrame();
            let d = this.tw;
            if (d == null) {
                d = this.t2;
            }
            let e = this.vd.cp;
            AxisAnnotationFrameManager.c(this.ve, { $type: Point_$type, x: a, y: a }, this, this.c1, this.getEffectiveViewport(), d, this.wu, this.vl, this.ww, this.wv, this.wx, this.vq, this.wu, this.vl, this.ww, this.wv, this.wx, this.vq, !e && this.vh, e && this.vh);
            AxisAnnotationFrameManager.d(this, this.ve, c, this.vj, this.vk, b, this.vx, this.vx, this.vf, this.vf);
        }
        get_isValueOverlay() {
            return true;
        }
        wa(a) {
            if (this.vd != null) {
                return this.vd.gd(a);
            }
            return null;
        }
        get wc() {
            let a = this.wa(this.vw);
            return a != null ? a : stringFormat("{0:0.##}", this.vw);
        }
    }
    ValueOverlay.$t = /*@__PURE__*/ markType(ValueOverlay, 'ValueOverlay', Series.$, [IHasCategoryModePreference_$type]);
    ValueOverlay.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ValueOverlay, 'raisePropertyChanged', ['AxisAnnotationBackgroundCornerRadius:vl:wg', [1, /*@__PURE__*/ DeviceUtils.g(3)], 'AxisAnnotationBackground:wu:wh', [Brush.$, null], 'AxisAnnotationFormatLabel:vf:wi', [Delegate_$type], 'AxisAnnotationInterpolatedValuePrecision:vx:wj', [1, -1], 'AxisAnnotationOutline:wv:wk', [Brush.$, null], 'AxisAnnotationPaddingBottom:vm:wl', [1, NaN], 'AxisAnnotationPaddingLeft:vn:wm', [1, NaN], 'AxisAnnotationPaddingRight:vo:wn', [1, NaN], 'AxisAnnotationPaddingTop:vp:wo', [1, NaN], 'AxisAnnotationStrokeThickness:vq:wp', [1, NaN], 'AxisAnnotationTextColor:ww:wq', [Brush.$, null], 'Axis:vd:wr', [Axis.$, null], 'IsAxisAnnotationEnabled:vh:ws', [0, false], 'Value:vw:wt', [1, 0]]);
    return ValueOverlay;
})();
/**
 * @hidden
 */
export let ValueOverlayView = /*@__PURE__*/ (() => {
    class ValueOverlayView extends SeriesView {
        constructor(a) {
            super(a);
            this.b2 = null;
            this.b2 = new Path();
        }
        bd() {
            super.bd();
            this.b2._stroke = this.e.tw;
            this.b2.ad = this.e.hv;
            this.b2.ai = this.e.uk;
            this.b2.aj = this.e.ul;
        }
        be() {
            super.be();
            let a = this.br();
            this.b2._stroke = a;
            this.b2.ad = this.e.hv + 3;
            this.b2._stroke = a;
            this.b2.ad = this.e.hv + 3;
        }
        b1(a) {
            this.b2.an = a;
            this.as();
        }
        b0() {
            this.b2.an = null;
            this.as();
        }
        a8(a, b) {
            super.a8(a, b);
            if (a.d) {
                a.t(this.b2);
            }
        }
        an(a) {
            super.an(a);
            this.e.a4.exportPathData(a, this.b2, "ValueOverlayPath", []);
        }
    }
    ValueOverlayView.$t = /*@__PURE__*/ markType(ValueOverlayView, 'ValueOverlayView', SeriesView.$);
    return ValueOverlayView;
})();
