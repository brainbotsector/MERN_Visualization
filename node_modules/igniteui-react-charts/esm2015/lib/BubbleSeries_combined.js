/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ScatterBase } from "./ScatterBase";
import { IScaleLegendSeries_$type } from "igniteui-react-core";
import { ISupportsSizeScale_$type } from "./ISupportsSizeScale";
import { ISupportsFillScale_$type } from "./ISupportsFillScale";
import { List$1 } from "igniteui-react-core";
import { UIElement } from "igniteui-react-core";
import { Base, typeCast, Point_$type, fromEnum, markType, markDep, enumGetBox, runOn } from "igniteui-react-core";
import { ActualRange } from "./ActualRange";
import { DependencyProperty } from "igniteui-react-core";
import { SizeScale } from "./SizeScale";
import { BrushScale } from "./BrushScale";
import { ScatterFrame } from "./ScatterFrame";
import { IChartLegend_$type } from "igniteui-react-core";
import { ValueBrushScale } from "./ValueBrushScale";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { ScatterBaseView } from "./ScatterBaseView";
import { ScalerParams } from "./ScalerParams";
import { Dictionary$2 } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { BubbleMarkerManager } from "./BubbleMarkerManager";
import { IChartItemLegend_$type } from "igniteui-react-core";
import { IChartScaleLegend_$type } from "igniteui-react-core";
import { ContentControl } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_, isInfinity, logBase } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
import { BrushSelectionMode_$type } from "./BrushSelectionMode";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
import { Defaults } from "./Defaults";
/**
 * @hidden
 */
export let BubbleSeries = /*@__PURE__*/ (() => {
    class BubbleSeries extends ScatterBase {
        bb() {
            return new BubbleSeries();
        }
        get_d4() {
            return true;
        }
        ci() {
            return new BubbleSeriesView(this);
        }
        px(a) {
            super.px(a);
            this.aax = a;
        }
        i1() {
            return 0.7;
        }
        vg() {
            if (this.vf == 0) {
                return 2;
            }
            return super.vg();
        }
        constructor() {
            super();
            this.acn = null;
            this.acm = null;
            this.aba = null;
            this.aa2 = null;
            this.aa1 = null;
            this.aa0 = null;
            this.aay = null;
            this.ab = BubbleSeries.$;
            this.xb = new ScatterFrame();
            this.xd = new ScatterFrame();
            this.w9 = new ScatterFrame();
        }
        isAttachedTo(a) {
            return this.ax == a;
        }
        d3() {
            return true;
        }
        oz(a) {
            super.oz(a);
            if (this.aa5 != null && this.aba != null && this.aba.count > 0) {
                for (let b = 0; b < this.aba.count; b++) {
                    a(this.aba._inner[b]);
                }
            }
        }
        get aa4() {
            return this.aa6;
        }
        acl(a) {
            let b = typeCast(CustomPaletteBrushScale.$, this.aaw);
            let c = typeCast(ValueBrushScale.$, this.aaw);
            let d = this.aaw;
            if (b != null && this.dd != null) {
                return b.getBrush1(a, this.dd.count);
            }
            else if (c != null) {
                return c.getBrushByIndex(a, this.aa3);
            }
            else if (d != null) {
                return d.getBrush(a);
            }
            return null;
        }
        get legendReady() {
            return this.aa6 != null && this.aa6.count != 0;
        }
        get minScaleText() {
            let a = this.aav(this.aaz).b;
            return (Math.round(a * 1000) / 1000).toString();
        }
        get maxScaleText() {
            let a = this.aav(this.aaz).a;
            return (Math.round(a * 1000) / 1000).toString();
        }
        forScaleColors(a) {
            for (let b = 0; b < this.aa6.count; b++) {
                if (this.aaw == null || !this.aaw.isReady) {
                    return false;
                }
                let c = NaN;
                if (this.aa3 != null) {
                    c = (this.aa3.item(b) - this.aa3.minimum) / (this.aa3.maximum - this.aa3.minimum);
                }
                let d = (this.aa6.item(b) - this.aa6.minimum) / (this.aa6.maximum - this.aa6.minimum);
                if (isNaN_(c)) {
                    c = 0;
                }
                if (isNaN_(d)) {
                    d = c;
                }
                let e = this.wq;
                let f = this.acl(b);
                let g = f != null ? f : e;
                a(g, d);
            }
            return true;
        }
        j5(a, b) {
            let c = this.mh(b);
            if (c == BubbleSeries.$$p[5]) {
                return this.j6(a, b, this.abp);
            }
            if (c == BubbleSeries.$$p[11]) {
                return this.j6(a, b, this.abz);
            }
            if (c == ScatterBase.$$p[12]) {
                return this.j6(a, b, this.y1);
            }
            if (c == ScatterBase.$$p[16]) {
                return this.j6(a, b, this.y9);
            }
            if (c == BubbleSeries.$$p[2]) {
                return this.j6(a, b, this.abk);
            }
            return super.j5(a, b);
        }
        li(a) {
            let b = this.mh(a);
            if (b == BubbleSeries.$$p[5]) {
                return this.abp;
            }
            if (b == BubbleSeries.$$p[11]) {
                return this.abz;
            }
            if (b == ScatterBase.$$p[12]) {
                return this.y1;
            }
            if (b == ScatterBase.$$p[16]) {
                return this.y9;
            }
            if (b == BubbleSeries.$$p[2]) {
                return this.abk;
            }
            return super.li(a);
        }
        get aa6() {
            return this.aa2;
        }
        set aa6(a) {
            if (this.aa2 != a) {
                let b = this.aa6;
                this.aa2 = a;
                this.raisePropertyChanged("RadiusColumn", b, this.aa6);
            }
        }
        get aa5() {
            return this.aa1;
        }
        set aa5(a) {
            if (this.aa1 != a) {
                let b = this.aa5;
                this.aa1 = a;
                this.raisePropertyChanged("LabelColumn", b, this.aa5);
            }
        }
        get aa3() {
            return this.aa0;
        }
        set aa3(a) {
            if (this.aa0 != a) {
                let b = this.aa3;
                this.aa0 = a;
                this.raisePropertyChanged("FillColumn", b, this.aa3);
            }
        }
        zc(a, b, c, d, e) {
            if (c <= this.yh) {
                b.g = new Dictionary$2(Base.$, OwnedPoint.$, 1, c);
            }
            let f = this.yh;
            let g = this.dd;
            let h;
            let i;
            let j = this.getEffectiveViewport1(a);
            let k = new ScalerParams(0, d, e, this.w5.d, j);
            let l = new ScalerParams(0, d, e, this.w5.e, j);
            let m = false;
            let n = 0;
            if (this.c1 != null) {
                if (this.c1.fx()) {
                    let o = this.c1.mp(d, k);
                    m = o.c;
                    n = o.d;
                }
            }
            for (let p = 0; p < c; p++) {
                h = this.xq.item(p);
                i = this.xr.item(p);
                let q = { $type: Point_$type, x: this.w5.a.ej(h, k), y: this.w5.b.ej(i, l) };
                if (m) {
                    if (q.x < e.left || q.x > e.right) {
                        if (q.x + n >= e.left && q.x + n <= e.right) {
                            q = { $type: Point_$type, x: q.x + n, y: i };
                        }
                    }
                }
                if (!isInfinity(q.x) && !isInfinity(q.y)) {
                    let r = g.item(p);
                    if (c <= f) {
                        if (!b.g.containsKey(r)) {
                            let s = { $type: Point_$type, x: h, y: i };
                            b.g.addItem(r, ((() => {
                                let $ret = new OwnedPoint();
                                $ret.a = r;
                                $ret.b = s;
                                $ret.c = q;
                                return $ret;
                            })()));
                        }
                    }
                }
            }
        }
        zm(a, b) {
            let c = typeCast(BubbleSeriesView.$, b);
            let d = c.cy;
            d.m = this.aa6;
            super.zm(a, b);
            let e = Math.min(this.xq != null ? this.xq.count : 0, this.xr != null ? this.xr.count : 0);
            if (e < 1) {
                return;
            }
            c.dk();
            c.dl();
        }
        ab4() {
            if (this.c1 == null) {
                return;
            }
            if (this.ax == null) {
                return;
            }
            if (this.ax.isItemwise) {
                let a = this.ax;
                this.ax.clearLegendItemsForSeries(this);
                this.ab3();
                a.renderItemwiseContent(this);
            }
            if (this.ax.isScale) {
                let b = this.ax;
                b.restoreOriginalState();
                b.initializeLegend(this);
            }
        }
        static abb(a, b, c, d, e) {
            if (e <= a || isNaN_(e) || isInfinity(e)) {
                return c;
            }
            if (e >= b) {
                return d;
            }
            let f = c + ((d - c) / (b - a)) * (e - a);
            return f;
        }
        static abc(a, b, c, d, logBase_, e) {
            let f = logBase(e, logBase_);
            let g = logBase(a, logBase_);
            let h = logBase(b, logBase_);
            return BubbleSeries.abb(g, h, c, d, f);
        }
        gw(a, b, c) {
            let d = super.gw(a, b, c);
            if (this.aa6 == null || this.dd == null || this.aa6.count == 0 || this.dd.count != this.aa6.count) {
                d = false;
            }
            return d;
        }
        x0(a, b) {
            if (b != 3) {
                return true;
            }
            if (a == null) {
                return true;
            }
            if (this.y1 == a || this.y9 == a || this.abz == a) {
                return true;
            }
            return false;
        }
        ab3() {
            let a = typeCast(IChartLegend_$type, this.ax);
            if (a == null || this.dd == null) {
                return;
            }
            this.aba = new List$1(UIElement.$, 0);
            let b = typeCast(CustomPaletteBrushScale.$, this.aaw);
            let c = typeCast(ValueBrushScale.$, this.aaw);
            let d = this.aaw;
            let e = this.aau();
            let f = e.b;
            let g = e.a;
            let h = this.dd;
            for (let i = 0; i < h.count; i++) {
                let j = null;
                if (c != null && this.aa3 != null) {
                    let k = this.aa3.item(i);
                    j = c.getBrushByRange(k, f, g);
                }
                else if (b != null) {
                    j = b.getBrush1(i, h.count);
                }
                else if (d != null) {
                    j = d.getBrush(i);
                }
                let l = new ContentControl();
                let m = this.aa5 != null && this.aa5.item(i) != null ? this.aa5.item(i).toString() : "";
                l.content = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this;
                    $ret.item = h.item(i);
                    $ret.itemBrush = j;
                    $ret.itemLabel = m;
                    return $ret;
                })());
                let n = this.rq;
                if (n == null) {
                    n = this.cl.bn(this.cq);
                }
                l.ah = n;
                this.aba.add(l);
            }
        }
        oc(a, b, c, d) {
            super.oc(a, b, c, d);
            if (this.aaz != null) {
                this.aaz.aa();
            }
            if (this.aaw != null) {
                this.aaw.x();
            }
            this.ab4();
        }
        o9() {
            super.o9();
            this.ab4();
        }
        pg() {
            super.pg();
            this.ab4();
        }
        p5(a, b, c, d) {
            super.p5(a, b, c, d);
            switch (b) {
                case ScatterBase.$$p[10]:
                case ScatterBase.$$p[14]:
                case ScatterBase.$$p[11]:
                case ScatterBase.$$p[15]:
                case BubbleSeries.$$p[9]:
                case BubbleSeries.$$p[10]:
                    this.pb();
                    break;
                case "FastItemsSource":
                    if (this.aaz != null) {
                        this.aaz.aa();
                    }
                    if (this.aaw != null) {
                        this.aaw.x();
                    }
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        c.deregisterColumn(this.aa6);
                        c.deregisterColumn(this.aa3);
                        c.deregisterColumn(this.aa5);
                        this.aa6 = null;
                        this.aa3 = null;
                        this.aa5 = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        this.aa6 = this.da(this.abz);
                        if (!stringIsNullOrEmpty(this.abk)) {
                            this.aa3 = this.da(this.abk);
                        }
                        this.aa5 = this.dc(this.abp);
                    }
                    this.qm(false);
                    this.ab4();
                    break;
                case BubbleSeries.$$p[11]:
                    if (this.aaz != null) {
                        this.aaz.aa();
                    }
                    if (this.dd != null) {
                        this.dd.deregisterColumn(this.aa6);
                        this.aa6 = this.da(this.abz);
                        this.ab4();
                    }
                    break;
                case "RadiusColumn":
                    if (this.aaz != null) {
                        this.aaz.aa();
                    }
                    this.w6.c0.g$i();
                    this.qm(this.f0 && this.dv);
                    this.pi();
                    break;
                case BubbleSeries.$$p[12]:
                    if (c != null) {
                        c.l.remove(this);
                        c.aa();
                    }
                    if (d != null) {
                        d.l.add(this);
                        d.aa();
                    }
                    this.qm(false);
                    this.ph();
                    break;
                case BubbleSeries.$$p[13]:
                    this.qm(false);
                    this.ph();
                    break;
                case "DiscreteLegendItemTemplate":
                    this.ab4();
                    break;
                case BubbleSeries.$$p[3]:
                    if (c != null) {
                        c.o.remove(this);
                        c.x();
                    }
                    if (d != null) {
                        d.o.add(this);
                        d.x();
                    }
                    this.qm(false);
                    this.ab4();
                    this.ph();
                    break;
                case BubbleSeries.$$p[4]:
                case BubbleSeries.$$p[8]:
                case BubbleSeries.$$p[7]:
                case BubbleSeries.$$p[6]:
                    this.qm(false);
                    this.ab4();
                    this.ph();
                    break;
                case "FillColumn":
                    this.qm(this.f0 && this.dv);
                    this.ph();
                    break;
                case BubbleSeries.$$p[2]:
                    if (this.aaw != null) {
                        this.aaw.x();
                    }
                    if (this.dd != null) {
                        this.dd.deregisterColumn(this.aa3);
                        this.aa3 = this.da(this.abk);
                        this.ab4();
                    }
                    break;
                case BubbleSeries.$$p[5]:
                    if (this.dd != null) {
                        this.dd.deregisterColumn(this.aa5);
                        this.aa5 = this.dc(this.abp);
                        this.ab4();
                    }
                    break;
                case "ActualLegend":
                    let e = typeCast(IChartLegend_$type, c);
                    if (e != null && e.isItemwise) {
                        let f = typeCast(IChartItemLegend_$type, e);
                        f.clearLegendItemsForSeries(this);
                    }
                    if (e != null && e.isScale) {
                        let g = typeCast(IChartScaleLegend_$type, e);
                        let h = true;
                        let i = null;
                        if (this.c1 != null) {
                            for (let j of fromEnum(this.c1.series)) {
                                if (j.legend == g) {
                                    i = j;
                                    h = false;
                                }
                            }
                        }
                        if (h) {
                            g.restoreOriginalState();
                        }
                        else {
                            g.initializeLegend(typeCast(IScaleLegendSeries_$type, i));
                        }
                    }
                    this.ab4();
                    break;
                case "SeriesViewer":
                    this.ab4();
                    break;
            }
        }
        updateSizeScaleGlobals() {
            let a = new ActualRange();
            a.b = NaN;
            a.a = NaN;
            if (this.aa6 != null) {
                a.b = this.aa6.minimum;
                a.a = this.aa6.maximum;
            }
            if (this.aaz != null) {
                this.aaz.ab(a.b, a.a);
            }
        }
        updateFillScaleGlobals() {
            let a = new ActualRange();
            a.b = NaN;
            a.a = NaN;
            if (this.aa3 != null) {
                a.b = this.aa3.minimum;
                a.a = this.aa3.maximum;
            }
            if (this.aaw != null) {
                this.aaw.z(a.b, a.a);
            }
        }
        aav(a) {
            let b = new ActualRange();
            b.b = NaN;
            b.a = NaN;
            if (this.aa6 != null) {
                b.b = this.aa6.minimum;
                b.a = this.aa6.maximum;
            }
            if (a != null) {
                a.x();
                if (this.aa9) {
                    b.b = a.globalMinimum;
                    b.a = a.globalMaximum;
                }
            }
            return b;
        }
        aau() {
            let a = new ActualRange();
            a.b = NaN;
            a.a = NaN;
            if (this.aa3 != null) {
                a.b = this.aa3.minimum;
                a.a = this.aa3.maximum;
            }
            let b = typeCast(ValueBrushScale.$, this.aaw);
            if (b != null) {
                b.s();
                if (this.aa7 && this.aaw.o.count > 1) {
                    a.b = b.q;
                    a.a = b.p;
                }
            }
            return a;
        }
        ab6(a, b, c, d) {
            let e = c.width;
            if (!this.cl.bx.isEmpty) {
                e = this.cl.bx.width;
            }
            else if (this.c1 != null && !this.c1.vw.isEmpty) {
                e = this.c1.vw.width;
            }
            let f = DeviceUtils.c(e);
            this.aay = this.aaz || ((() => {
                let $ret = new SizeScale();
                $ret.minimumValue = f / 10;
                $ret.maximumValue = f / 5;
                return $ret;
            })());
            if (this.aay != null) {
                let g = this.aay.minimumValue;
                let h = this.aay.maximumValue;
                let i = this.aay.logarithmBase;
                let j = this.aav(this.aay);
                let k = j.b;
                let l = j.a;
                if (this.aay.isLogarithmic) {
                    for (let m = 0; m < b.count; m++) {
                        b._inner[m] = BubbleSeries.abc(k, l, g, h, i, b._inner[m]);
                    }
                }
                else {
                    for (let n = 0; n < b.count; n++) {
                        b._inner[n] = BubbleSeries.abb(k, l, g, h, b._inner[n]);
                    }
                }
            }
            let o = 1;
            o = DeviceUtils.d();
            let p = this.aaz == null;
            if (d) {
                let q = c.width / e;
                for (let r = 0; r < b.count; r++) {
                    if (p) {
                        b._inner[r] = b._inner[r] / o;
                    }
                    b._inner[r] = b._inner[r] * q;
                }
            }
            for (let s = 0; s < a.count; s++) {
                let t = a._inner[s];
                if (p && !d) {
                    t.width = Math.max(0, b._inner[s] / o);
                    t.height = Math.max(0, b._inner[s] / o);
                }
                else {
                    t.width = Math.max(0, b._inner[s]);
                    t.height = Math.max(0, b._inner[s]);
                }
            }
        }
        ab5(a) {
            let b = typeCast(BubbleSeriesView.$, this.ck);
            this.aax.b6 = false;
            if (b != null) {
                b.b6 = false;
            }
            let c = typeCast(CustomPaletteBrushScale.$, this.aaw);
            let d = typeCast(ValueBrushScale.$, this.aaw);
            let e = this.aaw;
            let f = this.aau();
            let g = f.b;
            let h = f.a;
            let i = this.aaw == null || !this.aaw.isReady || (d != null && this.abk == null);
            if (i) {
                this.aax.dj();
                if (b != null) {
                    b.dj();
                }
                return;
            }
            this.aax.b6 = true;
            if (b != null) {
                b.b6 = true;
            }
            let j = a.count;
            let k = this.dd;
            for (let l = 0; l < j; l++) {
                let m = a._inner[l];
                let n = typeCast(DataContext.$, m.content);
                if (n != null) {
                    let o = null;
                    let p = k.indexOf(n.item);
                    if (c != null) {
                        o = c.getBrush1(p, k.count);
                    }
                    else if (d != null && this.aa3 != null) {
                        let q = this.aa3.item(p);
                        o = d.getBrushByRange(q, g, h);
                    }
                    else if (e != null) {
                        o = e.getBrush(p);
                    }
                    else {
                        if (this.ws == null) {
                            o = this.wq;
                        }
                        else {
                            o = this.ws;
                        }
                    }
                    let r = null;
                    if (this.wt == null) {
                        r = this.wr;
                    }
                    else {
                        r = this.wt;
                    }
                    if (this.aa8 && o != null) {
                        r = o;
                    }
                    if (r != null && !isNaN_(this.abe)) {
                        r = BrushUtil.m(r, this.abe);
                    }
                    if (o != null && !isNaN_(this.abd)) {
                        o = BrushUtil.m(o, this.abd);
                    }
                    n.itemBrush = o;
                    n.actualItemBrush = o;
                    n.outline = r;
                }
            }
        }
        getDataLegendSeriesContextAt(a, b) {
            let c = { $type: Point_$type, x: a, y: b };
            let d = this.j2(c);
            let e = d == null ? NaN : this.ic(d, "XMemberPath");
            let f = d == null ? NaN : this.ic(d, "YMemberPath");
            let g = new DataLegendSeriesValueInfo();
            g.a = 13;
            g.l = e;
            g.q = "X";
            g.r = this.y1 != null ? this.y1 : "X";
            g.s = this.yx != null ? this.yx : "X:";
            g.t = this.yz != null ? this.yz : "";
            let h = new DataLegendSeriesValueInfo();
            h.l = f;
            h.a = 14;
            h.q = "Y";
            h.r = this.y9 != null ? this.y9 : "Y";
            h.s = this.y5 != null ? this.y5 : "Y:";
            h.t = this.y7 != null ? this.y7 : "";
            let i = new DataLegendSeriesContext();
            i.e = ((() => {
                let $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
                $ret.add(g);
                $ret.add(h);
                return $ret;
            })());
            i.h = this.lh();
            if (!stringIsNullOrEmpty(this.abz)) {
                let j = d == null ? NaN : this.ic(d, "RadiusMemberPath");
                let k = new DataLegendSeriesValueInfo();
                k.l = j;
                k.a = 11;
                k.q = "Radius";
                k.r = this.abz != null ? this.abz : "Radius";
                k.s = this.abv != null ? this.abv : "R:";
                k.t = this.abx != null ? this.abx : "";
                i.e.add(k);
            }
            else if (this.aay != null) {
                let l = new DataLegendSeriesValueInfo();
                l.l = this.aay.maximumValue;
                l.a = 11;
                l.q = "Radius";
                l.r = this.abz != null ? this.abz : "Radius";
                l.s = this.abv != null ? this.abv : "R:";
                l.t = this.abx != null ? this.abx : "";
                i.e.add(l);
            }
            if (!stringIsNullOrEmpty(this.abk)) {
                let m = d == null ? NaN : this.ic(d, "FillMemberPath");
                let n = new DataLegendSeriesValueInfo();
                n.l = m;
                n.a = 12;
                n.q = "Fill";
                n.r = this.abk != null ? this.abk : "Fill";
                n.s = this.abg != null ? this.abg : "F:";
                n.t = this.abi != null ? this.abi : "";
                i.e.add(n);
            }
            return i;
        }
        get actualMarkerBrush() {
            return this.wq;
        }
    }
    BubbleSeries.$t = /*@__PURE__*/ markType(BubbleSeries, 'BubbleSeries', ScatterBase.$, [IScaleLegendSeries_$type, ISupportsSizeScale_$type, ISupportsFillScale_$type]);
    BubbleSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, BubbleSeries, 'raisePropertyChanged', ['FillMemberAsLegendLabel:abg:ab7', [2, null], 'FillMemberAsLegendUnit:abi:ab8', [2, null], 'FillMemberPath:abk:ab9', [2], 'FillScale:aaw:aca', [BrushScale.$], 'FillScaleUseGlobalValues:aa7:acb', [0, false], 'LabelMemberPath:abp:acc', [2], 'MarkerBrushBrightness:abd:acd', [1, NaN], 'MarkerOutlineBrightness:abe:ace', [1, NaN], 'MarkerOutlineUsesFillScale:aa8:acf', [0, false], 'RadiusMemberAsLegendLabel:abv:acg', [2, null], 'RadiusMemberAsLegendUnit:abx:ach', [2, null], 'RadiusMemberPath:abz:aci', [2, null], 'RadiusScale:aaz:acj', [SizeScale.$], 'RadiusScaleUseGlobalValues:aa9:ack', [0, false]]);
    return BubbleSeries;
})();
/**
 * @hidden
 */
export let CustomPaletteBrushScale = /*@__PURE__*/ (() => {
    class CustomPaletteBrushScale extends BrushScale {
        constructor() {
            super();
        }
        getBrush1(a, b) {
            if (this.brushes == null || this.brushes.count == 0) {
                return null;
            }
            if (this.brushSelectionMode == 0) {
                return super.getBrush(a % this.brushes.count);
            }
            let c = BubbleSeries.abb(0, b - 1, 0, this.brushes.count - 1, a);
            return this.ab(c);
        }
        get_isReady() {
            return this.brushes != null && this.brushes.count > 0;
        }
    }
    CustomPaletteBrushScale.$t = /*@__PURE__*/ markType(CustomPaletteBrushScale, 'CustomPaletteBrushScale', BrushScale.$);
    CustomPaletteBrushScale.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, CustomPaletteBrushScale, 'v', ['BrushSelectionMode', [BrushSelectionMode_$type, /*@__PURE__*/ enumGetBox(BrushSelectionMode_$type, 0)]]);
    return CustomPaletteBrushScale;
})();
/**
 * @hidden
 */
export let BubbleSeriesView = /*@__PURE__*/ (() => {
    class BubbleSeriesView extends ScatterBaseView {
        constructor(a) {
            super(a);
            this.di = null;
            this.di = a;
            this.c0 = new ScatterTrendLineManager();
        }
        au() {
            super.au();
            if (!this.q) {
                this.b4.vp = Defaults.e;
            }
        }
        cx() {
            return new BubbleMarkerManager((a) => this.c1.item(a), (a) => this.cz.w5.c.item(a), runOn(this, this.dc), runOn(this, this.cu), runOn(this, this.c2));
        }
        dk() {
            let a = this.cy;
            this.di.ab6(a.n, a.o, this.bx, this == this.e.ck);
            this.as();
        }
        dl() {
            let a = this.cy;
            this.di.ab5(a.n);
        }
        dj() {
            let a = this.cy;
            for (let b of fromEnum(a.n)) {
                let c = typeCast(DataContext.$, b.content);
                if (c != null) {
                    c.itemBrush = null;
                    c.outline = null;
                }
            }
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'><span";
            let b = this.e.a2.a$t(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.di.title + "</span><br/><span>" + "(${item." + this.di.y1 + "}, ${item." + this.di.y9 + "})</span>";
            if (!stringIsNullOrEmpty(this.di.abz)) {
                a += "<span>, Radius: ${item." + this.di.abz + "}</span>";
            }
            a += "</div>";
            return a;
        }
    }
    BubbleSeriesView.$t = /*@__PURE__*/ markType(BubbleSeriesView, 'BubbleSeriesView', ScatterBaseView.$);
    return BubbleSeriesView;
})();
