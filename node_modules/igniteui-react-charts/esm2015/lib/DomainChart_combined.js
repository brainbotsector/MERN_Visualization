/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, INotifyPropertyChanged_$type, BaseError, Type, PropertyChangedEventArgs, Delegate_$type, fromEnum, String_$type, runOn, delegateCombine, EnumUtil, enumGetBox, typeCast, delegateRemove, markType, TypeRegistrar, getInstanceType } from "igniteui-react-core";
import { IDataLegendTarget_$type } from "igniteui-react-core";
import { IToolbarTarget_$type } from "igniteui-react-core";
import { ArrayExtension } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { DataSeriesType_$type } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { Color } from "igniteui-react-core";
import { ColorUtil } from "igniteui-react-core";
import { DVContainer } from "igniteui-react-core";
import { DataToolTipLayerGroupingMode_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionX_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionY_$type } from "igniteui-react-core";
import { DataAbbreviationMode_$type } from "igniteui-react-core";
import { DataLegendValueMode_$type } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-react-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-react-core";
import { DataLegendSummaryType_$type } from "igniteui-react-core";
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
import { DataLegendUnitsMode_$type } from "igniteui-react-core";
import { DataLegendLabelMode_$type } from "igniteui-react-core";
import { ChartSortDescriptionCollection } from "./ChartSortDescriptionCollection";
import { FilterExpressionCollection } from "igniteui-react-core";
import { ChartSummaryDescriptionCollection } from "./ChartSummaryDescriptionCollection";
import { SeriesSelectionMode_$type } from "./SeriesSelectionMode";
import { SeriesSelectionBehavior_$type } from "./SeriesSelectionBehavior";
import { ChartSelectedItemCollection } from "./ChartSelectedItemCollection";
import { SortGroupParser } from "igniteui-react-core";
import { FilterExpressionParsingHelper } from "igniteui-react-core";
import { FilterStringErrorsParsingEventArgs } from "./FilterStringErrorsParsingEventArgs";
import { SummaryParser } from "igniteui-react-core";
import { BrushCollection } from "igniteui-react-core";
import { SeriesHighlightedValuesDisplayMode_$type } from "./SeriesHighlightedValuesDisplayMode";
import { Rect } from "igniteui-react-core";
import { HorizontalAlignment_$type } from "igniteui-react-core";
import { UnknownValuePlotting_$type } from "igniteui-react-core";
import { SeriesOutlineMode_$type } from "./SeriesOutlineMode";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { MarkerAutomaticBehavior_$type } from "./MarkerAutomaticBehavior";
import { TrendLineType_$type } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode_$type } from "./ComputedPlotAreaMarginMode";
import { SeriesPlotAreaMarginHorizontalMode_$type } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode_$type } from "./SeriesPlotAreaMarginVerticalMode";
import { SeriesHighlightingMode_$type } from "./SeriesHighlightingMode";
import { SeriesHighlightingBehavior_$type } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode_$type } from "./LegendHighlightingMode";
import { LegendItemBadgeMode_$type } from "igniteui-react-core";
import { ToolTipType_$type } from "./ToolTipType";
import { CrosshairsDisplayMode_$type } from "./CrosshairsDisplayMode";
import { SeriesViewerScrollbarMode_$type } from "./SeriesViewerScrollbarMode";
import { SeriesViewerHorizontalScrollbarPosition_$type } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition_$type } from "./SeriesViewerVerticalScrollbarPosition";
import { Defaults } from "./Defaults";
import { Series } from "./Series";
import { ICommandStateChangedListener_$type } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { DataSeriesAdapter } from "igniteui-react-core";
import { ChartSortDescription } from "./ChartSortDescription";
import { ChartSummaryDescription } from "./ChartSummaryDescription";
import { ObservableCollection$1 } from "igniteui-react-core";
import { Random } from "igniteui-react-core";
import { ValueLayerValueMode_$type } from "./ValueLayerValueMode";
import { ObservableColorCollection } from "igniteui-react-core";
import { BrushCollectionUtil } from "igniteui-react-core";
import { ChartSeriesEventArgs } from "./ChartSeriesEventArgs";
import { DomainChartSeriesPointerEventArgs } from "./DomainChartSeriesPointerEventArgs";
import { BrushUtil } from "igniteui-react-core";
import { IUnknownValuePlotting_$type } from "igniteui-react-core";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { isNaN_ } from "igniteui-react-core";
import { stringIsNullOrEmpty, stringEmpty, stringStartsWith } from "igniteui-react-core";
/**
 * @hidden
 */
export let DomainChart = /*@__PURE__*/ (() => {
    class DomainChart extends Base {
        provideContainer(a) {
            if (a == null) {
                this.tx((b) => {
                    b.destroy();
                    b.provideContainer(null);
                });
                return;
            }
            let b = this.kz;
            this.kz = a;
            if (this.e9 != null && this.kz != null && b == null) {
                this.kz.setTimeout(this.e9, 0);
                this.e9 = null;
            }
            let c = ((() => {
                let $ret = new XamDataChart();
                $ret.e3 = true;
                return $ret;
            })());
            c.provideContainer(a);
            this.dataChart = c;
            this.th();
        }
        destroy() {
            this.fq = true;
            this.provideContainer(null);
        }
        th() {
            if (this.dataChart == null) {
                return;
            }
            let a = this.dataChart.c8.j.e();
            this.ab = a.a;
            this.af = a.f;
            this.ad = a.b;
            this.ae = a.c;
            this.ah = a.g;
            this.i2 = Defaults.j;
            this.ti();
        }
        ti() {
        }
        te(a) {
            if (a == null) {
                return;
            }
            a.h6 = this.jw;
            a.h4 = this.ju;
            a.h5 = this.jv;
            a.h3 = this.jt;
            a.u3 = this.wq;
            a.h0 = this.jp;
            a.h2 = this.jr;
            a.h1 = this.jq;
            a.hz = this.jo;
            a.u2 = this.wp;
            if (!isNaN_(this.jh)) {
                a.hu = this.jh;
            }
        }
        tb() {
        }
        tk(a, b) {
            a.jt = this.ks;
            a.c3 = this.en;
        }
        t8(a, b, c) {
            switch (a) {
                case "TitleTopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h6 = this.jw;
                    }
                    break;
                case "TitleLeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h4 = this.ju;
                    }
                    break;
                case "PixelScalingRatio":
                    if (this.dataChart != null) {
                        this.tx((d) => d.hu = this.jh);
                    }
                    break;
                case "TitleRightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h5 = this.jv;
                    }
                    break;
                case "TitleBottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h3 = this.jt;
                    }
                    break;
                case "TitleTextColor":
                    if (this.dataChart != null) {
                        this.dataChart.u3 = this.wq;
                    }
                    break;
                case "SubtitleLeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h0 = this.jp;
                    }
                    break;
                case "SubtitleTopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h2 = this.jr;
                    }
                    break;
                case "SubtitleRightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h1 = this.jq;
                    }
                    break;
                case "SubtitleBottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.hz = this.jo;
                    }
                    break;
                case "SubtitleTextColor":
                    if (this.dataChart != null) {
                        this.dataChart.u2 = this.wp;
                    }
                    break;
                case "LeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.ht = this.je;
                    }
                    break;
                case "TopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h7 = this.jx;
                    }
                    break;
                case "RightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.hy = this.jn;
                    }
                    break;
                case "BottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.hg = this.i1;
                    }
                    break;
                case "TransitionDuration":
                    this.s7((d) => d.jt = this.ks);
                    break;
                case "TransitionEasingFunction":
                    this.s7((d) => d.c3 = this.en);
                    break;
            }
        }
        get tooltipTemplate() {
            return ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, 0);
        }
        set tooltipTemplate(a) {
            this.tooltipTemplates = a == null ? null : new List$1(Base.$, 1, [a]);
        }
        get tooltipTemplates() {
            return this.hc;
        }
        set tooltipTemplates(a) {
            let b = this.tooltipTemplates;
            if (a != b) {
                this.hc = a;
                this.t5("TooltipTemplates", b, this.tooltipTemplates);
            }
        }
        get jh() {
            return this.h4;
        }
        set jh(a) {
            let b = this.h4;
            if (a != b) {
                this.h4 = a;
                this.t5("PixelScalingRatio", b, this.jh);
            }
        }
        get toolTip() {
            return this.kw;
        }
        set toolTip(a) {
            let b = this.toolTip;
            if (b != a) {
                this.kw = a;
                this.t5("ToolTip", b, this.toolTip);
            }
        }
        get ju() {
            return this.ii;
        }
        set ju(a) {
            let b = this.ju;
            if (a != b) {
                this.ii = a;
                this.t5("TitleLeftMargin", b, this.ju);
            }
        }
        get jv() {
            return this.ij;
        }
        set jv(a) {
            let b = this.jv;
            if (a != b) {
                this.ij = a;
                this.t5("TitleRightMargin", b, this.jv);
            }
        }
        get jw() {
            return this.ik;
        }
        set jw(a) {
            let b = this.jw;
            if (a != b) {
                this.ik = a;
                this.t5("TitleTopMargin", b, this.jw);
            }
        }
        get jt() {
            return this.ih;
        }
        set jt(a) {
            let b = this.jt;
            if (a != b) {
                this.ih = a;
                this.t5("TitleBottomMargin", b, this.jt);
            }
        }
        get jp() {
            return this.ic;
        }
        set jp(a) {
            let b = this.jp;
            if (a != b) {
                this.ic = a;
                this.t5("SubtitleLeftMargin", b, this.jp);
            }
        }
        get jr() {
            return this.ie;
        }
        set jr(a) {
            let b = this.jr;
            if (a != b) {
                this.ie = a;
                this.t5("SubtitleTopMargin", b, this.jr);
            }
        }
        get jq() {
            return this.id;
        }
        set jq(a) {
            let b = this.jq;
            if (a != b) {
                this.id = a;
                this.t5("SubtitleRightMargin", b, this.jq);
            }
        }
        get jo() {
            return this.ib;
        }
        set jo(a) {
            let b = this.jo;
            if (a != b) {
                this.ib = a;
                this.t5("SubtitleBottomMargin", b, this.jo);
            }
        }
        get wp() {
            return this.vu;
        }
        set wp(a) {
            let b = this.wp;
            if (a != b) {
                this.vu = a;
                this.t5("SubtitleTextColor", b, this.wp);
            }
        }
        get wq() {
            return this.vv;
        }
        set wq(a) {
            let b = this.wq;
            if (a != b) {
                this.vv = a;
                this.t5("TitleTextColor", b, this.wq);
            }
        }
        get_je() {
            return this.h1;
        }
        set_je(a) {
            let b = this.je;
            if (a != b) {
                this.h1 = a;
                this.t5("LeftMargin", b, this.je);
            }
        }
        get je() {
            return this.get_je();
        }
        set je(a) {
            this.set_je(a);
        }
        get jx() {
            return this.il;
        }
        set jx(a) {
            let b = this.jx;
            if (a != b) {
                this.il = a;
                this.t5("TopMargin", b, this.jx);
            }
        }
        get jn() {
            return this.ia;
        }
        set jn(a) {
            let b = this.jn;
            if (a != b) {
                this.ia = a;
                this.t5("RightMargin", b, this.jn);
            }
        }
        get i1() {
            return this.ho;
        }
        set i1(a) {
            let b = this.i1;
            if (a != b) {
                this.ho = a;
                this.t5("BottomMargin", b, this.i1);
            }
        }
        get ks() {
            return this.kk;
        }
        set ks(a) {
            let b = this.ks;
            if (a != b) {
                this.kk = a;
                this.t5("TransitionDuration", b, this.ks);
            }
        }
        get en() {
            return this.em;
        }
        set en(a) {
            let b = this.en;
            if (a != b) {
                this.em = a;
                this.t5("TransitionEasingFunction", b, this.en);
            }
        }
        tf(a) {
            if (this.dataChart == null) {
                return;
            }
            a.lv = this.rq;
            a.lj = this.rf;
        }
        tl(a, b) {
            this.tm(a, b);
        }
        tc() {
        }
        tm(a, b) {
            if (a == null) {
                return;
            }
            if (this.d3 == 3) {
                return;
            }
            let toolTipTemplate_ = ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, b);
            if (toolTipTemplate_ == null) {
                a.f9 = true;
            }
            else {
                let series_ = a;
                a.f9 = false;
                series_.externalObject.tooltipTemplate = toolTipTemplate_;
            }
        }
        u0(a, b, c) {
        }
        k1(a) {
            return a;
            return null;
        }
        kc(a) {
            return null;
        }
        t9(a, b, c) {
            switch (a) {
                case "SubtitleTextStyle":
                    if (this.dataChart != null) {
                        this.dataChart.lj = this.rf;
                    }
                    break;
                case "TitleTextStyle":
                    if (this.dataChart != null) {
                        this.dataChart.lv = this.rq;
                    }
                    break;
                case "TooltipTemplate":
                    if (this.g1) {
                        return;
                    }
                    this.g1 = true;
                    this.tooltipTemplate = this.k1(this.tooltipTemplate);
                    this.g1 = false;
                    if (this.dataChart != null) {
                        this.dataChart.i1 = this.tooltipTemplate;
                    }
                    this.toolTip = this.tooltipTemplate;
                    break;
                case "ToolTip":
                    this.s8((d, e) => this.tm(d, e));
                    break;
                case "TooltipTemplates":
                    if (this.tooltipTemplates == null) {
                        break;
                    }
                    this.g1 = true;
                    this.s8((d, e) => {
                        let f = this.k1(ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, e));
                        let series_ = d;
                        let templ_ = f;
                        series_.externalObject.tooltipTemplate = templ_;
                    });
                    this.g1 = false;
                    break;
            }
        }
        get cf() {
            return this.ce;
        }
        set cf(a) {
            let b = this.cf;
            if (a != b) {
                this.ce = a;
                this.t5("Widget", b, this.cf);
            }
        }
        get rf() {
            return this.lv;
        }
        set rf(a) {
            let b = this.rf;
            if (a != b) {
                this.lv = a;
                this.t5("SubtitleTextStyle", b, this.rf);
            }
        }
        get rq() {
            return this.lx;
        }
        set rq(a) {
            let b = this.rq;
            if (a != b) {
                this.lx = a;
                this.t5("TitleTextStyle", b, this.rq);
            }
        }
        get dataChart() {
            return this.ea;
        }
        set dataChart(a) {
            let b = this.dataChart;
            if (b != a) {
                this.ea = a;
                this.t5("DataChart", b, this.dataChart);
            }
        }
        get isDetached() {
            return this.fr || this.fq;
        }
        onDetachedFromUI() {
            this.fr = true;
            this.tx((a) => a.onDetachedFromUI());
        }
        onAttachedToUI() {
            this.fr = false;
            this.tx((a) => a.onAttachedToUI());
        }
        constructor() {
            super();
            this.kz = null;
            this.kx = null;
            this.hc = null;
            this.h4 = NaN;
            this.kw = null;
            this.ii = 0;
            this.ij = 0;
            this.ik = 0;
            this.ih = 0;
            this.ic = 0;
            this.ie = 0;
            this.id = 0;
            this.ib = 0;
            this.vu = null;
            this.vv = null;
            this.h1 = NaN;
            this.il = NaN;
            this.ia = NaN;
            this.ho = NaN;
            this.kk = 0;
            this.em = null;
            this.kb = null;
            this.g1 = false;
            this.ce = null;
            this.lv = null;
            this.lx = null;
            this.ea = null;
            this.fr = false;
            this.fq = false;
            this.hg = null;
            this.propertyChanged = null;
            this.kj = 0;
            this.gu = false;
            this.b7 = null;
            this.hb = null;
            this.cb = null;
            this.ft = false;
            this.cc = null;
            this._commandCompleted = null;
            this._invalidateActions = null;
            this.g9 = new List$1(ICommandStateChangedListener_$type, 0);
            this.by = 0;
            this.hs = NaN;
            this.ht = NaN;
            this.hq = DeviceUtils.g(10);
            this.hr = DeviceUtils.g(10);
            this.bu = 0;
            this.bw = 0;
            this.fk = true;
            this.e = null;
            this.b = null;
            this.d = null;
            this.a = null;
            this.be = 0;
            this.kf = -1;
            this.kg = -1;
            this.bs = 0;
            this.ll = stringEmpty();
            this.fl = true;
            this.lm = null;
            this.f = null;
            this.w7 = new Thickness(0, DeviceUtils.g(5));
            this.fm = true;
            this.ln = "N/A";
            this.fn = false;
            this.w8 = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(2), DeviceUtils.g(0));
            this.vn = null;
            this.ex = null;
            this.lf = null;
            this.c = null;
            this.le = stringEmpty();
            this.bi = 0;
            this.bk = 0;
            this.lg = null;
            this.vf = null;
            this.w1 = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.w0 = new Thickness(0, DeviceUtils.g(5));
            this.fj = true;
            this.ep = null;
            this.ve = null;
            this.wz = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.wy = new Thickness(0, DeviceUtils.g(5));
            this.fi = false;
            this.eo = null;
            this.vi = null;
            this.es = null;
            this.bo = 0;
            this.li = null;
            this.w4 = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.w3 = new Thickness(0, DeviceUtils.g(5));
            this.vk = null;
            this.eu = null;
            this.lh = null;
            this.vh = null;
            this.er = null;
            this.lj = null;
            this.vj = null;
            this.et = null;
            this.wx = new Thickness(0, DeviceUtils.g(0));
            this.ck = 0;
            this.bq = 0;
            this.lk = null;
            this.vm = null;
            this.w6 = new Thickness(0, DeviceUtils.g(0));
            this.ew = null;
            this.w5 = new Thickness(0, DeviceUtils.g(0));
            this.vl = null;
            this.ev = null;
            this.bm = 0;
            this.vg = null;
            this.w2 = new Thickness(1, DeviceUtils.g(8), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.eq = null;
            this.seriesAdded = null;
            this.seriesRemoved = null;
            this.seriesPointerEnter = null;
            this.seriesPointerLeave = null;
            this.seriesPointerMove = null;
            this.seriesPointerDown = null;
            this.seriesPointerUp = null;
            this.calloutStyleUpdating = null;
            this.calloutRenderStyleUpdating = null;
            this.selectedSeriesItemsChanged = null;
            this.focusedSeriesItemsChanged = null;
            this.hf = null;
            this.e9 = null;
            this.fc = false;
            this.g8 = new Dictionary$2(String_$type, Base.$, 0);
            this.ha = new List$1(String_$type, 0);
            this.ay = null;
            this.au = null;
            this.at = null;
            this.ec = null;
            this.ed = null;
            this.a6 = null;
            this.ek = null;
            this.el = null;
            this.f2 = true;
            this.f0 = true;
            this.f3 = true;
            this.f1 = true;
            this.fz = true;
            this.ax = null;
            this.aw = null;
            this.av = null;
            this.ef = null;
            this.ee = null;
            this.a5 = null;
            this.dp = 0;
            this.dn = 0;
            this.vt = null;
            this.vq = null;
            this.dl = 0;
            this.ao = new ChartSelectedItemCollection();
            this.an = new ChartSelectedItemCollection();
            this.ls = null;
            this.lo = null;
            this.lq = null;
            this.lp = null;
            this.lr = null;
            this.filterStringErrorsParsing = null;
            this.lt = null;
            this.kv = null;
            this.ku = null;
            this.h = null;
            this.g = null;
            this.t = null;
            this.w = null;
            this.r = null;
            this.s = null;
            this.b9 = null;
            this.fs = true;
            this.fv = true;
            this.fx = false;
            this.f4 = false;
            this.c9 = 1;
            this.fu = false;
            this.wu = new Rect(0, 0, 0, 1, 1);
            this.lw = null;
            this.lu = null;
            this.u5 = 1;
            this.u4 = 1;
            this.d6 = 0;
            this.h9 = NaN;
            this.ig = NaN;
            this.df = 0;
            this.cs = 0;
            this.cq = 0;
            this.h2 = NaN;
            this.h3 = NaN;
            this.cy = null;
            this.co = 4;
            this.u = null;
            this.v = null;
            this.ki = 400;
            this.hn = NaN;
            this.fb = false;
            this.x = null;
            this.d4 = 0;
            this.im = DeviceUtils.g(1.5);
            this.fa = true;
            this.h6 = NaN;
            this.h8 = NaN;
            this.h7 = NaN;
            this.h5 = NaN;
            this.a9 = 0;
            this.dh = 0;
            this.dj = 0;
            this.dd = 0;
            this.db = 0;
            this.cg = 0;
            this.cl = 0;
            this.ci = 0;
            this.kl = 7;
            this.d2 = 4;
            this.bc = 0;
            this.fh = false;
            this.vd = null;
            this.hp = NaN;
            this.vc = null;
            this.fg = true;
            this.u8 = null;
            this.va = null;
            this.u9 = null;
            this.vb = null;
            this.kd = -1;
            this.ke = -1;
            this.fw = false;
            this.fy = true;
            this.fo = false;
            this.vo = null;
            this.vp = null;
            this.kh = -1;
            this.fd = false;
            this.ff = false;
            this.fe = false;
            this.hk = null;
            this.aj = null;
            this.lc = null;
            this.ld = null;
            this.lb = "CalloutLabel";
            this.la = "CalloutContent";
            this.d8 = null;
            this.y = null;
            this.io = NaN;
            this.du = 0;
            this.dv = 0;
            this.ds = 0;
            this.d0 = 0;
            this.vr = null;
            this.vs = null;
            this.hy = NaN;
            this.hx = NaN;
            this.hu = NaN;
            this.hv = NaN;
            this.hw = NaN;
            this.h0 = NaN;
            this.hz = NaN;
            this.fp = true;
            this.vw = null;
            this.vx = null;
            this.is = NaN;
            this.ir = NaN;
            this.ip = NaN;
            this.iv = NaN;
            this.iq = NaN;
            this.iu = NaN;
            this.it = NaN;
            this.f5 = true;
            this.ix = NaN;
            this.iw = NaN;
            this.iz = NaN;
            this.iy = NaN;
            this.hf = new List$1(Delegate_$type, 0);
            this.tg();
            this.sw();
        }
        tg() {
            this.hg = new List$1(MarkerType_$type, 0);
            this.bh = new DataSeriesAdapter().e;
            this.ay = new ChartSortDescriptionCollection();
            this.au = new ChartSortDescriptionCollection();
            this.at = new ChartSortDescriptionCollection();
            this.a6 = new ChartSummaryDescriptionCollection();
            this.ec = new FilterExpressionCollection();
            this.ed = new FilterExpressionCollection();
            this.a4.e = this.bh.sortDescriptions;
            this.az.e = this.bh.groupDescriptions;
            this.eg.syncTarget = this.bh.filterExpressions;
            this.eh.syncTarget = this.bh.filterExpressions;
            this.a8.e = this.bh.summaryDescriptions;
            this.a0.e = this.bh.postSortDescriptions;
            this.ek = new SortGroupParser();
            this.el = new SummaryParser();
            this.ax = ((() => {
                let $ret = new ChartSortDescriptionCollection();
                $ret.i = true;
                return $ret;
            })());
            this.aw = ((() => {
                let $ret = new ChartSortDescriptionCollection();
                $ret.i = true;
                return $ret;
            })());
            this.av = ((() => {
                let $ret = new ChartSortDescriptionCollection();
                $ret.i = true;
                return $ret;
            })());
            this.a5 = ((() => {
                let $ret = new ChartSummaryDescriptionCollection();
                $ret.i = true;
                return $ret;
            })());
            this.ee = ((() => {
                let $ret = new FilterExpressionCollection();
                $ret.shouldDetachOnTargetChange = true;
                return $ret;
            })());
            this.ef = ((() => {
                let $ret = new FilterExpressionCollection();
                $ret.shouldDetachOnTargetChange = true;
                return $ret;
            })());
            if (this.fz) {
                if (this.eg.k.count == 0) {
                    this.ee.syncTarget = this.bh.filterExpressions;
                }
                this.fz = false;
            }
            if (this.f1) {
                if (this.eh.k.count == 0) {
                    this.ef.syncTarget = this.bh.highlightFilterExpressions;
                }
                this.f1 = false;
            }
            if (this.f2) {
                if (this.a4.j.count == 0) {
                    this.ax.e = this.bh.sortDescriptions;
                }
                if (this.a0.j.count == 0) {
                    this.aw.e = this.bh.postSortDescriptions;
                }
                this.f2 = false;
            }
            if (this.f0) {
                if (this.az.j.count == 0) {
                    this.av.e = this.bh.groupDescriptions;
                }
                this.f0 = false;
            }
            if (this.f3) {
                if (this.a8.j.count == 0) {
                    this.a5.e = this.bh.summaryDescriptions;
                }
                this.f3 = false;
            }
            if (this.q != null) {
                this.bh.includedProperties = this.q;
            }
            if (this.o != null) {
                this.bh.excludedProperties = this.o;
            }
            this.bh.supportedSeriesTypes = this.hi.toArray();
            this.bh.rules.clear();
            for (let a of fromEnum(this.hh)) {
                this.bh.rules.add(a);
            }
            let b = new List$1(String_$type, 0);
            for (let c of fromEnum(this.bh.rules)) {
                b.add(getInstanceType(c).typeName);
            }
            let d = this.bh.dataSeries;
            d.collectionChanged = delegateCombine(d.collectionChanged, runOn(this, this.t0));
        }
        gw(a) {
            return a != 24 && this.hi.contains(a);
        }
        notifyResized() {
            this.tx((a) => a.notifyContainerResized());
        }
        tv() {
            this.tx((a) => {
                for (let b = 0; b < a.series.count; b++) {
                    a.series._inner[b].pj();
                }
            });
        }
        s1() {
            if (this.dataChart == null) {
                return;
            }
            if (this.gu) {
                this.ut();
            }
            this.dataChart.flush();
        }
        s9() {
            if (this.dataChart == null) {
                return;
            }
            this.dataChart.nh();
        }
        ug(a) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        s3(a) {
            this.s4((b, c) => a(b));
        }
        s4(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                a(this.dataChart.series._inner[b], b);
            }
        }
        s7(a) {
            this.s8((b, c) => a(b));
        }
        s8(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (!c.ec) {
                    a(c, b);
                }
            }
        }
        s5(a) {
            this.s6((b, c) => a(b));
        }
        s6(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (c.ed) {
                    a(c, b);
                }
            }
        }
        uq() {
            this.s3((a) => a.qq());
        }
        tx(a) {
            this.ty(a, true);
        }
        ty(a, b) {
            this.tz(a, b, null);
        }
        tz(a, b, c) {
            if (this.dataChart == null) {
                return;
            }
            a(this.dataChart);
        }
        gy(a) {
            if (!this.gw(a.suggestedSeries)) {
                return false;
            }
            let b = a.data;
            if (b == null) {
                return false;
            }
            return true;
        }
        gp() {
            if (this.dataChart == null) {
                return false;
            }
            return true;
        }
        pe(a) {
            let b = "series_" + (this.dataChart.series.count + 1) + "_" + EnumUtil.getName(DataSeriesType_$type, a.suggestedSeries);
            return b;
        }
        pf(a, b) {
            if (this.gs && this.g6) {
                let c = "";
                let d = 5 + Math.round(DomainChart.k8.nextDouble() * 4);
                for (let e = 0; e < d; e++) {
                    c = c + "\u2588";
                }
                return c;
            }
            if (stringIsNullOrEmpty(a.title)) {
                let f = EnumUtil.getName(DataSeriesType_$type, b);
                return f + (this.dataChart.series.count + 1);
            }
            else {
                return a.title;
            }
        }
        pd() {
            return stringEmpty();
        }
        ut() {
            if (this.dataChart == null) {
                return;
            }
            this.gu = false;
            this.uv();
            if (this.actualItemsSource == null) {
                return;
            }
            let a = new List$1(MarkerType_$type, 0);
            for (let b of fromEnum(this.bh.dataSeries)) {
                a.add(this.cu(b.suggestedMarker));
            }
            this.hg = a;
            let c = 0;
            for (let d of fromEnum(this.bh.dataSeries)) {
                if (!this.gy(d)) {
                    continue;
                }
                if (d.index < 0) {
                    d.index = c;
                }
                this.ur(d);
                this.us(d);
                c++;
            }
            this.u1();
            this.s4(runOn(this, this.tj));
        }
        c8(seriesType_) {
            return (this.externalObject.createSeries(seriesType_).i);
        }
        c0() {
            return this.c8(28);
        }
        c2() {
            return this.c8(27);
        }
        c4() {
            return this.c8(29);
        }
        c5() {
            return this.c8(25);
        }
        c1() {
            return this.c8(26);
        }
        c3() {
            return this.c8(32);
        }
        c7() {
            return this.c8(33);
        }
        get b8() {
            if (TypeRegistrar.isRegistered("AnnotationLayerProxy")) {
                return TypeRegistrar.create("AnnotationLayerProxy");
            }
            else {
                throw new BaseError(1, "annotation layer module is not loaded, but is required.");
            }
        }
        get gl() {
            return (TypeRegistrar.isRegistered("AnnotationLayerProxy"));
        }
        gn(a) {
            if (!this.gl) {
                return false;
            }
            return this.b8.matchesType(a);
        }
        u1() {
            let a = this.he("", true);
            if (a != null) {
                for (let b = 0; b < a.count; b++) {
                    this.dataChart.series.add(a._inner[b]);
                }
            }
        }
        gq() {
            return this.bd == 0 || this.bd == 4 || this.bd == 2;
        }
        gr() {
            return this.bd == 0 || this.bd == 4 || this.bd == 3;
        }
        get_go() {
            return this.f9;
        }
        get go() {
            return this.get_go();
        }
        he(a, b) {
            if (!this.gl) {
                return null;
            }
            let c = new List$1(Series.$, 0);
            if (b) {
                let d = 1;
                if (this.ff) {
                    if (this.hk == null) {
                        if (this.lc != null || this.ld != null || this.lb != null || this.la != null) {
                            for (let e of fromEnum(this.dataChart.series)) {
                                let f = this.c0();
                                this.b8.setTargetSeries(f, e);
                                this.b8.setCollisionChannel(f, "MainChartCollisionChannel");
                                this.uz(f, e, this.bh.dataSeries._inner[d - 1]);
                                f.name = a + getInstanceType(f).typeName + d.toString();
                                c.add(f);
                                d++;
                            }
                            ;
                        }
                    }
                    else {
                        let g = this.c0();
                        this.uz(g, null, this.bh.dataSeries._inner[d - 1]);
                        g.name = a + getInstanceType(g).typeName + d.toString();
                        if (this.ff && this.fd) {
                            this.b8.setCollisionChannel(g, "MainChartCollisionChannel");
                        }
                        c.add(g);
                    }
                }
                if (this.fd) {
                    let h = this.c0();
                    this.sv(h, this.g5);
                    h.name = a + getInstanceType(h).typeName + d.toString();
                    if (this.ff && this.fd) {
                        this.b8.setCollisionChannel(h, "MainChartCollisionChannel");
                    }
                    c.add(h);
                }
            }
            switch (this.bc) {
                case 0:
                case 4:
                case 3:
                case 2:
                    {
                        let i = this.c2();
                        this.b8.setCrosshairThickness(i, this.hp);
                        this.b8.setCrosshairUseInterpolation(i, !this.fh);
                        this.b8.setCrosshairHorizontalLineVisibility(i, this.gq() ? 0 : 1);
                        this.b8.setCrosshairHorizontalLineStroke(i, this.vc);
                        this.b8.setCrosshairVerticalLineVisibility(i, this.gr() ? 0 : 1);
                        this.b8.setCrosshairVerticalLineStroke(i, this.vd);
                        this.b8.setCrosshairOnAxesEnabled(i, this.fg);
                        this.b8.setCrosshairXAxisBackground(i, this.u8);
                        this.b8.setCrosshairXAxisForeground(i, this.u9);
                        this.b8.setCrosshairYAxisBackground(i, this.va);
                        this.b8.setCrosshairYAxisForeground(i, this.vb);
                        this.b8.setCrosshairXAxisPrecision(i, this.kd);
                        this.b8.setCrosshairYAxisPrecision(i, this.ke);
                        c.add(i);
                        break;
                    }
                case 1:
                    {
                        break;
                    }
            }
            if (this.fo) {
                let j = this.c4();
                this.b8.setFinalValueBackground(j, this.vo);
                this.b8.setFinalValueForeground(j, this.vp);
                this.b8.setFinalValuePrecision(j, this.kh);
                c.add(j);
            }
            if (b) {
                switch (this.d2) {
                    case 1:
                        {
                            let k = this.c5();
                            c.add(k);
                            break;
                        }
                    case 2:
                        {
                            let l = this.c1();
                            c.add(l);
                            break;
                        }
                    case 4:
                        {
                            let m = this.c3();
                            c.add(m);
                            break;
                        }
                    case 3:
                        {
                            this.s3((n) => n.f9 = false);
                            break;
                        }
                    case 0:
                        {
                            this.s3((n) => n.f9 = true);
                            break;
                        }
                }
            }
            if (this.d9 != null && this.d9.count > 0) {
                for (let n = 0; n < this.d9.count; n++) {
                    let o = this.c7();
                    this.b8.setValueMode(o, this.d9._inner[n]);
                    this.b8.setValueAxisAnnotationEnabled(o, true);
                    if (this.ai != null && n < this.ai.count) {
                        this.b8.setBrush(o, this.ai.item(n));
                    }
                    c.add(o);
                }
            }
            for (let p of fromEnum(c)) {
                if (stringIsNullOrEmpty(p.name) == false) {
                    continue;
                }
                p.name = a + getInstanceType(p).typeName;
            }
            return c;
        }
        sv(a, b) {
            this.b8.setIsAutoCalloutBehaviorEnabled(a, true);
            this.b8.setGreedyCollisionMode(a, true);
            this.b8.setUseDedicatedLanes(a, b);
        }
        uz(a, b, c) {
            a.itemsSource = this.hk != null ? this.hk : b.itemsSource;
            this.b8.setXMemberPath(a, this.lc);
            this.b8.setYMemberPath(a, this.ld);
            this.b8.setLabelMemberPath(a, this.lb);
            this.b8.setContentMemberPath(a, this.la);
            if (this.aj != null) {
                this.b8.setCalloutsAllowedPositions(a, this.aj);
            }
        }
        uv() {
            this.uw(this.dataChart);
        }
        uw(a) {
            if (a != null && a == this.dataChart) {
                this.uu();
            }
            if (a == null || a.series.count == 0) {
                return;
            }
            this.s3((b) => {
                if (this.gn(b) && this.b8.isCalloutLayer(b)) {
                    this.b8.removeCalloutStyleUpdating(b, runOn(this, this.ue));
                }
                if (this.gn(b) && this.b8.isCalloutLayer(b)) {
                    this.b8.removeCalloutRenderStyleUpdating(b, runOn(this, this.ud));
                }
                this.uo(b);
            });
            for (let b of fromEnum(a.series)) {
                this.ux(b);
            }
            a.series.clear();
        }
        ux(a) {
            a.itemsSource = null;
            a.legend = null;
            a.n4();
        }
        t0(a, b) {
            if (this.dataChart == null) {
                return;
            }
            let c = b.oldItems == null ? "null" : b.oldItems.count.toString();
            let d = b.newItems == null ? "null" : b.newItems.count.toString();
            if (this.gu) {
                return;
            }
            let e = this.uc(runOn(this, this.sz), this.gu);
            this.gu = e.p1;
        }
        sz() {
            this.ut();
        }
        wh(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.z, a);
        }
        wk(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.aa, a);
        }
        wi(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.ad, a);
        }
        wj(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.ae, a);
        }
        wt(a) {
            let b = new Color();
            if (this.z == null || this.z.count == 0) {
                b = ArrayExtension.getModulus$1(Color.$, this.hd, a);
            }
            else {
                let c = ArrayExtension.getModulus$1(Brush.$, this.z, a);
                if (c == null) {
                    b = ArrayExtension.getModulus$1(Color.$, this.hd, a);
                }
                else {
                    b = ColorUtil.q(c);
                }
            }
            return b;
        }
        e8(a) {
            let b = new ObservableColorCollection();
            b.add(ColorUtil.v(a, 0.5));
            b.add(a);
            return b;
        }
        ac(a) {
            let b = this.e8(a);
            let c = BrushCollectionUtil.a(b);
            return c;
        }
        get hd() {
            if (this.hb != null) {
                return this.hb;
            }
            this.hb = new List$1(Color.$, 0);
            this.hb.add(ColorUtil.r("#8BDC5C"));
            this.hb.add(ColorUtil.r("#8961A9"));
            this.hb.add(ColorUtil.r("#6DB1FF"));
            this.hb.add(ColorUtil.r("#82E9D9"));
            this.hb.add(ColorUtil.r("#EA3C63"));
            this.hb.add(ColorUtil.r("#735656"));
            this.hb.add(ColorUtil.r("#F8CE4F"));
            this.hb.add(ColorUtil.r("#A8A8B7"));
            this.hb.add(ColorUtil.r("#E051A9"));
            this.hb.add(ColorUtil.r("#FF903B"));
            return this.hb;
        }
        get_g5() {
            return false;
        }
        get g5() {
            return this.get_g5();
        }
        k0() {
            if (this.dataChart == null) {
                return null;
            }
            return this.dataChart.x4();
        }
        to(a, b) {
        }
        tp(a, b, c) {
        }
        cu(a) {
            if (a == 2) {
                return 3;
            }
            else if (a == 12) {
                return 13;
            }
            else if (a == 6) {
                return 7;
            }
            else if (a == 8) {
                return 9;
            }
            else if (a == 11) {
                return 12;
            }
            else if (a == 1) {
                return 1;
            }
            else if (a == 7) {
                return 8;
            }
            else if (a == 10) {
                return 11;
            }
            else if (a == 4) {
                return 5;
            }
            else if (a == 5) {
                return 6;
            }
            else if (a == 9) {
                return 10;
            }
            else if (a == 3) {
                return 4;
            }
            else if (a == 13) {
                return 0;
            }
            return 2;
        }
        attachDataLegend(a) {
            this.su(a);
        }
        su(a) {
            this.cb = a;
            if (this.dataChart != null) {
                if (!this.ft) {
                    this.ft = true;
                    this.dataChart.attachDataLegend(a);
                }
            }
        }
        detachDataLegend(a) {
            this.sy(a);
        }
        sy(a) {
            if (this.dataChart != null) {
                this.ft = false;
                this.dataChart.detachDataLegend(a);
            }
            this.cb = null;
        }
        getDataLegendSeries() {
            return this.p();
        }
        p() {
            if (this.dataChart != null) {
                return this.dataChart.getDataLegendSeries();
            }
            else {
                return new Array(0);
            }
        }
        u2(a) {
            if (this.dataChart != null) {
                this.dataChart.rh(a);
            }
        }
        u3(a) {
            if (this.dataChart != null) {
                this.dataChart.ri(a);
            }
        }
        uy() {
            if (this.dataChart != null) {
                this.dataChart.qq();
            }
        }
        get_gx() {
            return false;
        }
        get gx() {
            return this.get_gx();
        }
        get cd() {
            if (this.cc == null) {
                this.cc = DVContainer.instance.createInstance(IDomainChartToolbarProvider_$type, () => "Domain chart toolbar module is not loaded.");
                this.cc.container = this.kz;
                this.cc.commandChanged = runOn(this, this.t6);
            }
            return this.cc;
        }
        t6(a) {
            for (let b of fromEnum(this.g9)) {
                b.onCommandStateChanged(a.c, a.a, a.b);
            }
        }
        getDesiredToolbarActions() {
            if (!this.gx) {
                return null;
            }
            if (this.dataChart != null) {
                let a = this.dataChart.getDesiredToolbarActions();
                return this.cd.getDesiredToolbarActions(this, a);
            }
            return null;
        }
        onToolCommandExecuting(a) {
            if (!this.gx) {
                return 1;
            }
            return this.cd.onToolCommandExecuting(this, a);
        }
        get commandCompleted() {
            return this._commandCompleted;
        }
        set commandCompleted(a) {
            this._commandCompleted = a;
        }
        get invalidateActions() {
            return this._invalidateActions;
        }
        set invalidateActions(a) {
            this._invalidateActions = a;
        }
        tn() {
            if (this.invalidateActions != null) {
                this.invalidateActions();
            }
        }
        addCommandAvailabilityListener(a) {
        }
        removeCommandAvailabilityListener(a) {
        }
        addCommandStateChangedListener(a) {
            if (!this.g9.contains(a)) {
                this.g9.add(a);
            }
        }
        removeCommandStateChangedListener(a) {
            if (this.g9.contains(a)) {
                this.g9.remove(a);
            }
        }
        tu(source_, a, b, c) {
            if (this.bh != null) {
                this.bh.notifySetItem(source_, a, b, c);
            }
            if (this.dataChart != null) {
                this.dataChart.n0(source_, a, b, c);
            }
        }
        tq(source_) {
            if (this.bh != null) {
                this.bh.notifyClearItems(source_);
            }
            if (this.dataChart != null) {
                this.dataChart.nr(source_);
            }
        }
        tr(source_, a, b) {
            if (this.bh != null) {
                this.bh.notifyInsertItem(source_, a, b);
            }
            if (this.dataChart != null) {
                this.dataChart.ny(source_, a, b);
            }
        }
        ts(source_, a, b) {
            if (this.bh != null) {
                this.bh.notifyRemoveItem(source_, a, b);
            }
            if (this.dataChart != null) {
                this.dataChart.nz(source_, a, b);
            }
        }
        get bz() {
            return this.by;
        }
        set bz(a) {
            let b = this.by;
            this.by = a;
            if (b != this.by) {
                this.t5("DataToolTipGroupingMode", enumGetBox(DataToolTipLayerGroupingMode_$type, b), enumGetBox(DataToolTipLayerGroupingMode_$type, this.by));
            }
        }
        get i5() {
            return this.hs;
        }
        set i5(a) {
            let b = this.hs;
            this.hs = a;
            if (b != this.hs) {
                this.t5("DataToolTipPositionOffsetX", b, this.hs);
            }
        }
        get i6() {
            return this.ht;
        }
        set i6(a) {
            let b = this.ht;
            this.ht = a;
            if (b != this.ht) {
                this.t5("DataToolTipPositionOffsetY", b, this.ht);
            }
        }
        get i3() {
            return this.hq;
        }
        set i3(a) {
            let b = this.hq;
            this.hq = a;
            if (b != this.hq) {
                this.t5("DataToolTipDefaultPositionOffsetX", b, this.hq);
            }
        }
        get i4() {
            return this.hr;
        }
        set i4(a) {
            let b = this.hr;
            this.hr = a;
            if (b != this.hr) {
                this.t5("DataToolTipDefaultPositionOffsetY", b, this.hr);
            }
        }
        get bv() {
            return this.bu;
        }
        set bv(a) {
            let b = this.bu;
            this.bu = a;
            if (b != this.bu) {
                this.t5("DataToolTipGroupedPositionModeX", enumGetBox(DataTooltipGroupedPositionX_$type, b), enumGetBox(DataTooltipGroupedPositionX_$type, this.bu));
            }
        }
        get bx() {
            return this.bw;
        }
        set bx(a) {
            let b = this.bw;
            this.bw = a;
            if (b != this.bw) {
                this.t5("DataToolTipGroupedPositionModeY", enumGetBox(DataTooltipGroupedPositionY_$type, b), enumGetBox(DataTooltipGroupedPositionY_$type, this.bw));
            }
        }
        get gg() {
            return this.fk;
        }
        set gg(a) {
            let b = this.fk;
            this.fk = a;
            if (b != this.fk) {
                this.t5(DomainChart.nx, b, this.fk);
            }
        }
        get m() {
            return this.e;
        }
        set m(a) {
            let b = this.e;
            this.e = a;
            if (b != this.e) {
                this.t5("DataToolTipIncludedSeries", b, this.e);
            }
        }
        get j() {
            return this.b;
        }
        set j(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.t5("DataToolTipExcludedSeries", b, this.b);
            }
        }
        get l() {
            return this.d;
        }
        set l(a) {
            let b = this.d;
            this.d = a;
            if (b != this.d) {
                this.t5("DataToolTipIncludedColumns", b, this.d);
            }
        }
        get i() {
            return this.a;
        }
        set i(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.t5("DataToolTipExcludedColumns", b, this.a);
            }
        }
        get bf() {
            return this.be;
        }
        set bf(a) {
            let b = this.be;
            this.be = a;
            if (b != this.be) {
                this.t5("DataToolTipValueFormatAbbreviation", enumGetBox(DataAbbreviationMode_$type, b), enumGetBox(DataAbbreviationMode_$type, this.be));
            }
        }
        get ko() {
            return this.kf;
        }
        set ko(a) {
            let b = this.kf;
            this.kf = a;
            if (b != this.kf) {
                this.t5("DataToolTipValueFormatMaxFractions", b, this.kf);
            }
        }
        get kp() {
            return this.kg;
        }
        set kp(a) {
            let b = this.kg;
            this.kg = a;
            if (b != this.kg) {
                this.t5("DataToolTipValueFormatMinFractions", b, this.kg);
            }
        }
        get bt() {
            return this.bs;
        }
        set bt(a) {
            let b = this.bs;
            this.bs = a;
            if (b != this.bs) {
                this.t5("DataToolTipValueFormatMode", enumGetBox(DataLegendValueMode_$type, b), enumGetBox(DataLegendValueMode_$type, this.bs));
            }
        }
        get op() {
            return this.ll;
        }
        set op(a) {
            let b = this.ll;
            this.ll = a;
            if (b != this.ll) {
                this.t5("DataToolTipValueFormatCulture", b, this.ll);
            }
        }
        get gh() {
            return this.fl;
        }
        set gh(a) {
            let b = this.fl;
            this.fl = a;
            if (b != this.fl) {
                this.t5("DataToolTipValueFormatUseGrouping", b, this.fl);
            }
        }
        get ov() {
            return this.lm;
        }
        set ov(a) {
            let b = this.lm;
            this.lm = a;
            if (b != this.lm) {
                this.t5("DataToolTipValueFormatString", b, this.lm);
            }
        }
        get n() {
            return this.f;
        }
        set n(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.t5("DataToolTipValueFormatSpecifiers", b, this.f);
            }
        }
        get xj() {
            return this.w7;
        }
        set xj(a) {
            let b = this.w7;
            this.w7 = a;
            if (b != this.w7) {
                this.t5("DataToolTipValueRowMargin", b, this.w7);
            }
        }
        get gi() {
            return this.fm;
        }
        set gi(a) {
            let b = this.fm;
            this.fm = a;
            if (b != this.fm) {
                this.t5("DataToolTipValueRowVisible", b, this.fm);
            }
        }
        get o4() {
            return this.ln;
        }
        set o4(a) {
            let b = this.ln;
            this.ln = a;
            if (b != this.ln) {
                this.t5("DataToolTipValueTextWhenMissingData", b, this.ln);
            }
        }
        get gj() {
            return this.fn;
        }
        set gj(a) {
            let b = this.fn;
            this.fn = a;
            if (b != this.fn) {
                this.t5("DataToolTipValueTextUseSeriesColors", b, this.fn);
            }
        }
        get xk() {
            return this.w8;
        }
        set xk(a) {
            let b = this.w8;
            this.w8 = a;
            if (b != this.w8) {
                this.t5("DataToolTipValueTextMargin", b, this.w8);
            }
        }
        get wd() {
            return this.vn;
        }
        set wd(a) {
            let b = this.vn;
            this.vn = a;
            if (b != this.vn) {
                this.t5("DataToolTipValueTextColor", b, this.vn);
            }
        }
        get e7() {
            return this.ex;
        }
        set e7(a) {
            let b = this.ex;
            this.ex = a;
            if (b != this.ex) {
                this.t5("DataToolTipValueTextStyle", b, this.ex);
            }
        }
        get nf() {
            return this.lf;
        }
        set nf(a) {
            let b = this.lf;
            this.lf = a;
            if (b != this.lf) {
                this.t5("DataToolTipHeaderFormatString", b, this.lf);
            }
        }
        get k() {
            return this.c;
        }
        set k(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.t5("DataToolTipHeaderFormatSpecifiers", b, this.c);
            }
        }
        get nb() {
            return this.le;
        }
        set nb(a) {
            let b = this.le;
            this.le = a;
            if (b != this.le) {
                this.t5("DataToolTipHeaderFormatCulture", b, this.le);
            }
        }
        get bj() {
            return this.bi;
        }
        set bj(a) {
            let b = this.bi;
            this.bi = a;
            if (b != this.bi) {
                this.t5("DataToolTipHeaderFormatDate", enumGetBox(DataLegendHeaderDateMode_$type, b), enumGetBox(DataLegendHeaderDateMode_$type, this.bi));
            }
        }
        get bl() {
            return this.bk;
        }
        set bl(a) {
            let b = this.bk;
            this.bk = a;
            if (b != this.bk) {
                this.t5("DataToolTipHeaderFormatTime", enumGetBox(DataLegendHeaderTimeMode_$type, b), enumGetBox(DataLegendHeaderTimeMode_$type, this.bk));
            }
        }
        get nk() {
            return this.lg;
        }
        set nk(a) {
            let b = this.lg;
            this.lg = a;
            if (b != this.lg) {
                this.t5("DataToolTipHeaderText", b, this.lg);
            }
        }
        get v5() {
            return this.vf;
        }
        set v5(a) {
            let b = this.vf;
            this.vf = a;
            if (b != this.vf) {
                this.t5("DataToolTipHeaderTextColor", b, this.vf);
            }
        }
        get xd() {
            return this.w1;
        }
        set xd(a) {
            let b = this.w1;
            this.w1 = a;
            if (b != this.w1) {
                this.t5("DataToolTipHeaderTextMargin", b, this.w1);
            }
        }
        get xc() {
            return this.w0;
        }
        set xc(a) {
            let b = this.w0;
            this.w0 = a;
            if (b != this.w0) {
                this.t5("DataToolTipHeaderRowMargin", b, this.w0);
            }
        }
        get gf() {
            return this.fj;
        }
        set gf(a) {
            let b = this.fj;
            this.fj = a;
            if (b != this.fj) {
                this.t5("DataToolTipHeaderRowVisible", b, this.fj);
            }
        }
        get ez() {
            return this.ep;
        }
        set ez(a) {
            let b = this.ep;
            this.ep = a;
            if (b != this.ep) {
                this.t5("DataToolTipHeaderTextStyle", b, this.ep);
            }
        }
        get v4() {
            return this.ve;
        }
        set v4(a) {
            let b = this.ve;
            this.ve = a;
            if (b != this.ve) {
                this.t5("DataToolTipGroupTextColor", b, this.ve);
            }
        }
        get xb() {
            return this.wz;
        }
        set xb(a) {
            let b = this.wz;
            this.wz = a;
            if (b != this.wz) {
                this.t5("DataToolTipGroupTextMargin", b, this.wz);
            }
        }
        get xa() {
            return this.wy;
        }
        set xa(a) {
            let b = this.wy;
            this.wy = a;
            if (b != this.wy) {
                this.t5("DataToolTipGroupRowMargin", b, this.wy);
            }
        }
        get ge() {
            return this.fi;
        }
        set ge(a) {
            let b = this.fi;
            this.fi = a;
            if (b != this.fi) {
                this.t5("DataToolTipGroupRowVisible", b, this.fi);
            }
        }
        get ey() {
            return this.eo;
        }
        set ey(a) {
            let b = this.eo;
            this.eo = a;
            if (b != this.eo) {
                this.t5("DataToolTipGroupTextStyle", b, this.eo);
            }
        }
        get v8() {
            return this.vi;
        }
        set v8(a) {
            let b = this.vi;
            this.vi = a;
            if (b != this.vi) {
                this.t5("DataToolTipSummaryTitleTextColor", b, this.vi);
            }
        }
        get e2() {
            return this.es;
        }
        set e2(a) {
            let b = this.es;
            this.es = a;
            if (b != this.es) {
                this.t5("DataToolTipSummaryTitleTextStyle", b, this.es);
            }
        }
        get bp() {
            return this.bo;
        }
        set bp(a) {
            let b = this.bo;
            this.bo = a;
            if (b != this.bo) {
                this.t5("DataToolTipSummaryType", enumGetBox(DataLegendSummaryType_$type, b), enumGetBox(DataLegendSummaryType_$type, this.bo));
            }
        }
        get n3() {
            return this.li;
        }
        set n3(a) {
            let b = this.li;
            this.li = a;
            if (b != this.li) {
                this.t5("DataToolTipSummaryTitleText", b, this.li);
            }
        }
        get xg() {
            return this.w4;
        }
        set xg(a) {
            let b = this.w4;
            this.w4 = a;
            if (b != this.w4) {
                this.t5("DataToolTipSummaryTitleTextMargin", b, this.w4);
            }
        }
        get xf() {
            return this.w3;
        }
        set xf(a) {
            let b = this.w3;
            this.w3 = a;
            if (b != this.w3) {
                this.t5("DataToolTipSummaryRowMargin", b, this.w3);
            }
        }
        get wa() {
            return this.vk;
        }
        set wa(a) {
            let b = this.vk;
            this.vk = a;
            if (b != this.vk) {
                this.t5("DataToolTipSummaryValueTextColor", b, this.vk);
            }
        }
        get e4() {
            return this.eu;
        }
        set e4(a) {
            let b = this.eu;
            this.eu = a;
            if (b != this.eu) {
                this.t5("DataToolTipSummaryValueTextStyle", b, this.eu);
            }
        }
        get ny() {
            return this.lh;
        }
        set ny(a) {
            let b = this.lh;
            this.lh = a;
            if (b != this.lh) {
                this.t5("DataToolTipSummaryLabelText", b, this.lh);
            }
        }
        get v7() {
            return this.vh;
        }
        set v7(a) {
            let b = this.vh;
            this.vh = a;
            if (b != this.vh) {
                this.t5("DataToolTipSummaryLabelTextColor", b, this.vh);
            }
        }
        get e1() {
            return this.er;
        }
        set e1(a) {
            let b = this.er;
            this.er = a;
            if (b != this.er) {
                this.t5("DataToolTipSummaryLabelTextStyle", b, this.er);
            }
        }
        get n9() {
            return this.lj;
        }
        set n9(a) {
            let b = this.lj;
            this.lj = a;
            if (b != this.lj) {
                this.t5("DataToolTipSummaryUnitsText", b, this.lj);
            }
        }
        get v9() {
            return this.vj;
        }
        set v9(a) {
            let b = this.vj;
            this.vj = a;
            if (b != this.vj) {
                this.t5("DataToolTipSummaryUnitsTextColor", b, this.vj);
            }
        }
        get e3() {
            return this.et;
        }
        set e3(a) {
            let b = this.et;
            this.et = a;
            if (b != this.et) {
                this.t5("DataToolTipSummaryUnitsTextStyle", b, this.et);
            }
        }
        get w9() {
            return this.wx;
        }
        set w9(a) {
            let b = this.wx;
            this.wx = a;
            if (b != this.wx) {
                this.t5("DataToolTipBadgeMargin", b, this.wx);
            }
        }
        get cm() {
            return this.ck;
        }
        set cm(a) {
            let b = this.ck;
            this.ck = a;
            if (b != this.ck) {
                this.t5("DataToolTipBadgeShape", enumGetBox(LegendItemBadgeShape_$type, b), enumGetBox(LegendItemBadgeShape_$type, this.ck));
            }
        }
        get br() {
            return this.bq;
        }
        set br(a) {
            let b = this.bq;
            this.bq = a;
            if (b != this.bq) {
                this.t5("DataToolTipUnitsDisplayMode", enumGetBox(DataLegendUnitsMode_$type, b), enumGetBox(DataLegendUnitsMode_$type, this.bq));
            }
        }
        get oj() {
            return this.lk;
        }
        set oj(a) {
            let b = this.lk;
            this.lk = a;
            if (b != this.lk) {
                this.t5("DataToolTipUnitsText", b, this.lk);
            }
        }
        get wc() {
            return this.vm;
        }
        set wc(a) {
            let b = this.vm;
            this.vm = a;
            if (b != this.vm) {
                this.t5("DataToolTipUnitsTextColor", b, this.vm);
            }
        }
        get xi() {
            return this.w6;
        }
        set xi(a) {
            let b = this.w6;
            this.w6 = a;
            if (b != this.w6) {
                this.t5("DataToolTipUnitsTextMargin", b, this.w6);
            }
        }
        get e6() {
            return this.ew;
        }
        set e6(a) {
            let b = this.ew;
            this.ew = a;
            if (b != this.ew) {
                this.t5("DataToolTipUnitsTextStyle", b, this.ew);
            }
        }
        get xh() {
            return this.w5;
        }
        set xh(a) {
            let b = this.w5;
            this.w5 = a;
            if (b != this.w5) {
                this.t5("DataToolTipTitleTextMargin", b, this.w5);
            }
        }
        get wb() {
            return this.vl;
        }
        set wb(a) {
            let b = this.vl;
            this.vl = a;
            if (b != this.vl) {
                this.t5("DataToolTipTitleTextColor", b, this.vl);
            }
        }
        get e5() {
            return this.ev;
        }
        set e5(a) {
            let b = this.ev;
            this.ev = a;
            if (b != this.ev) {
                this.t5("DataToolTipTitleTextStyle", b, this.ev);
            }
        }
        get bn() {
            return this.bm;
        }
        set bn(a) {
            let b = this.bm;
            this.bm = a;
            if (b != this.bm) {
                this.t5("DataToolTipLabelDisplayMode", enumGetBox(DataLegendLabelMode_$type, b), enumGetBox(DataLegendLabelMode_$type, this.bm));
            }
        }
        get v6() {
            return this.vg;
        }
        set v6(a) {
            let b = this.vg;
            this.vg = a;
            if (b != this.vg) {
                this.t5("DataToolTipLabelTextColor", b, this.vg);
            }
        }
        get xe() {
            return this.w2;
        }
        set xe(a) {
            let b = this.w2;
            this.w2 = a;
            if (b != this.w2) {
                this.t5("DataToolTipLabelTextMargin", b, this.w2);
            }
        }
        get e0() {
            return this.eq;
        }
        set e0(a) {
            let b = this.eq;
            this.eq = a;
            if (b != this.eq) {
                this.t5("DataToolTipLabelTextStyle", b, this.eq);
            }
        }
        ui(a) {
            if (this.seriesAdded != null && a != null) {
                this.seriesAdded(this, new ChartSeriesEventArgs(a));
            }
        }
        uo(a) {
            if (this.seriesRemoved != null && a != null) {
                this.seriesRemoved(this, new ChartSeriesEventArgs(a));
            }
        }
        uk(a, b) {
            if (this.seriesPointerEnter != null && a != null) {
                this.seriesPointerEnter(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        ul(a, b) {
            if (this.seriesPointerLeave != null && a != null) {
                this.seriesPointerLeave(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        um(a, b) {
            if (this.seriesPointerMove != null && a != null) {
                this.seriesPointerMove(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        uj(a, b) {
            if (this.seriesPointerDown != null && a != null) {
                this.seriesPointerDown(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        un(a, b) {
            if (this.seriesPointerUp != null && a != null) {
                this.seriesPointerUp(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        ue(a, b) {
            if (this.calloutStyleUpdating != null && a != null) {
                this.calloutStyleUpdating(this, b);
            }
        }
        ud(a, b) {
            if (this.calloutRenderStyleUpdating != null && a != null) {
                this.calloutRenderStyleUpdating(this, b);
            }
        }
        uh(a, b) {
            if (this.selectedSeriesItemsChanged != null && a != null) {
                this.selectedSeriesItemsChanged(this, b);
            }
        }
        uf(a, b) {
            if (this.focusedSeriesItemsChanged != null && a != null) {
                this.focusedSeriesItemsChanged(this, b);
            }
        }
        ub(a) {
            if (!this.hf.contains(a)) {
                this.hf.add(a);
                let b = false;
                let c = this.uc(() => {
                    a();
                    this.hf.remove(a);
                }, b);
                b = c.p1;
            }
        }
        uc(a, b) {
            if (!b) {
                b = true;
                if (this.kz != null) {
                    this.kz.setTimeout(a, 0);
                }
                else {
                    this.e9 = a;
                }
            }
            return {
                p1: b
            };
        }
        get_gz() {
            return true;
        }
        get gz() {
            return this.get_gz();
        }
        td(a) {
            let b = a == this.dataChart;
            if (b) {
                a.ag = this.z;
            }
            if (b) {
                a.aj = this.aa;
            }
            a.ah = this.ad;
            a.ai = this.ae;
            a.bg = this.cp;
            a.legend = this.legend;
            a.ws = this.gt;
            a.wv = this.g0 && this.gz;
            a.fy = this.g4;
            if (b) {
                if (this.an != null && this.an.count > 0) {
                    for (let c of fromEnum(this.an)) {
                        a.focusedSeriesItems.add(c);
                    }
                }
                if (this.ao != null && this.ao.count > 0) {
                    for (let d of fromEnum(this.ao)) {
                        a.selectedSeriesItems.add(d);
                    }
                }
                a.ch = this.dw;
                a.ci = this.dx;
                a.hl = this.i7;
                a.uv = this.wl;
                a.hm = this.i8;
                a.hn = this.i9;
                a.ho = this.ja;
                a.uw = this.wm;
                a.ce = this.dt;
                a.et = this.gm;
                a.hp = this.jb;
                a.hq = this.jc;
                a.hr = this.jd;
                a.h8 = this.j0;
                a.u5 = this.wr;
                a.ie = this.j6;
                a.h9 = this.j1;
                a.ia = this.j2;
                a.u6 = this.ws;
                a.cl = this.d1;
                a.gb = this.g7;
                a.ib = this.j3;
                a.ic = this.j4;
                a.id = this.j5;
                a.ii = this.j7;
                a.ij = this.j8;
                a.il = this.ka;
                a.ik = this.j9;
                if (a.cb != this.dr || a.b6 != this.dm) {
                    a.c8.b4(this.kz);
                    a.cb = this.dr;
                    a.b6 = this.dm;
                }
                if (a.b9 != this.dq) {
                    a.c8.b4(this.kz);
                    a.b9 = this.dq;
                }
                if (this.wo != null) {
                    a.u1 = this.wo;
                }
                if (this.wg != null) {
                    a.uk = this.wg;
                }
                a.selectedSeriesItemsChanged = delegateCombine(a.selectedSeriesItemsChanged, runOn(this, this.uh));
                a.focusedSeriesItemsChanged = delegateCombine(a.focusedSeriesItemsChanged, runOn(this, this.uf));
            }
            a.wd = this.di;
            a.wg = this.dk;
            if (this.cb != null) {
                if (!this.ft) {
                    this.su(this.cb);
                }
            }
            if (a.by != this.de || a.bw != this.dc) {
                a.c8.b4(this.kz);
                a.by = this.de;
                a.bw = this.dc;
            }
            a.v6 = this.bb();
            if (!isNaN_(this.jj)) {
                a.xx = this.jj;
            }
            if (!isNaN_(this.jl)) {
                a.xz = this.jl;
            }
            if (!isNaN_(this.jk)) {
                a.xy = this.jk;
            }
            if (!isNaN_(this.ji)) {
                a.xw = this.ji;
            }
            a.bd = this.ch;
            a.seriesMouseEnter = delegateCombine(a.seriesMouseEnter, (e, f) => this.uk(f.series, f.item));
            a.seriesMouseLeave = delegateCombine(a.seriesMouseLeave, (e, f) => this.ul(f.series, f.item));
            a.seriesMouseMove = delegateCombine(a.seriesMouseMove, (e, f) => this.um(f.series, f.item));
            a.seriesMouseLeftButtonDown = delegateCombine(a.seriesMouseLeftButtonDown, (e, f) => this.uj(f.series, f.item));
            a.seriesMouseLeftButtonUp = delegateCombine(a.seriesMouseLeftButtonUp, (e, f) => this.un(f.series, f.item));
            if (b) {
                a.vx = this.ww;
            }
            if (b) {
                a.lo = this.rj;
            }
            a.ue = this.u7;
            if (b) {
                a.lc = this.q8;
            }
            a.ud = this.u6;
            a.wo = this.f6;
            a.eg = this.f7;
            a.ht = this.je;
            a.hy = this.jn;
            a.h7 = this.jx;
            a.hg = this.i1;
            if (a == this.dataChart) {
                this.ut();
            }
            this.te(a);
            this.tf(a);
            this.tn();
        }
        ag(a) {
            if (!this.g3 || !this.g6 || this.itemsSource != null) {
                return a;
            }
            if (a == null) {
                return null;
            }
            let b = new BrushCollection();
            for (let c of fromEnum(a)) {
                let d = BrushUtil.t(c);
                b.add(d);
            }
            return b;
        }
        wn(a) {
            if (!this.g3 || !this.g6 || this.itemsSource != null) {
                return a;
            }
            let b = BrushUtil.h(0, 0, 0, 0);
            return b;
        }
        tj(a, b) {
            if (!isNaN_(this.jm)) {
                a.iz = this.jm;
            }
            if (!isNaN_(this.js) && !a.ed) {
                a.i5 = this.js;
            }
            if (!isNaN_(this.i2) && a.ea) {
                a.i5 = this.i2;
            }
            if (!isNaN_(this.jz) && a.ee) {
                a.i5 = this.jz;
            }
            a.legendItemBadgeShape = this.cn;
            a.a5 = this.cj;
            a.b8 = this.dg;
            a.re(this.ct);
            a.rd(this.cr);
            a.iw = this.jf;
            if (!isNaN_(this.jg)) {
                a.rf(this.jg);
            }
            if (!isNaN_(this.i0)) {
                a.h0 = this.i0;
            }
            if (a.isUsableInLegend) {
                a.legend = this.legend;
            }
            if (typeCast(IUnknownValuePlotting_$type, a) !== null) {
                a.unknownValuePlotting = this.d7;
            }
            a.ey = this.gv;
            a.bm = this.da;
            if (this.gn(a) && this.b8.isCalloutLayer(a)) {
                this.b8.setCalloutStyleUpdatingEventEnabled(a, this.ga);
                this.b8.addCalloutStyleUpdating(a, runOn(this, this.ue));
            }
            if (this.gn(a) && this.b8.isCalloutLayer(a)) {
                this.b8.setCalloutRenderStyleUpdatingEventEnabled(a, this.ga);
                this.b8.addCalloutRenderStyleUpdating(a, runOn(this, this.ud));
            }
            if (this.gn(a) && this.b8.isDataToolTipLayer(a)) {
                this.sq(a);
            }
            this.ss(a, b);
            this.st(a, b);
            this.tk(a, b);
            this.tl(a, b);
            this.ui(a);
        }
        get f8() {
            return this.fc;
        }
        s0() {
            if (!this.fc) {
                this.fc = true;
                this.ta();
            }
        }
        ta() {
            this.tb();
            this.tc();
        }
        up(a) {
            if (this.ft && this.cb != null) {
                this.ft = false;
                if (a != null) {
                    a.detachDataLegend(this.cb);
                }
            }
            this.uw(a);
        }
        st(a, b) {
            let c = typeCast(ITrendLineSeries_$type, a);
            if (c != null) {
                c.trendLineBrush = ArrayExtension.getModulus$1(Brush.$, this.ah, b);
                c.trendLineThickness = this.jy;
                c.trendLineType = this.d5;
                c.trendLinePeriod = this.kt;
            }
        }
        cw(a, b) {
            if (this.cz == null || this.cz.count == 0) {
                let c = this.cx(a);
                if (this.hg == null || this.hg.count == 0) {
                    return a != null && a.e6 ? c : 2;
                }
                let d = ArrayExtension.getModulus$1(MarkerType_$type, this.hg, b);
                if (d == 0 && a != null) {
                    d = a.e6 ? c : 2;
                    if (d == 2) {
                        d = this.cv(a);
                    }
                }
                if (d == 2) {
                    if (a == null) {
                        return 1;
                    }
                    else {
                        return 2;
                    }
                }
                return d;
            }
            return ArrayExtension.getModulus$1(MarkerType_$type, this.cz, b);
        }
        cv(a) {
            return 2;
        }
        cx(a) {
            return 1;
        }
        k4() {
            if (this.itemsSource != null) {
                return this.itemsSource;
            }
            if (this.g3) {
                return this.hm();
            }
            return null;
        }
        get_gs() {
            if (this.itemsSource == null && this.g3) {
                if (this.hm() != null) {
                    return true;
                }
            }
            return false;
        }
        get gs() {
            return this.get_gs();
        }
        hm() {
            return null;
        }
        t5(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            switch (a) {
                case "DataChart":
                    this.up(typeCast(XamDataChart.$, b));
                    this.td(typeCast(XamDataChart.$, c));
                    break;
                case "ShouldUseSkeletonStyleForMockData":
                case "ShouldDisplayMockData":
                    this.actualItemsSource = this.k4();
                    this.z = this.ag(this.ab);
                    this.aa = this.ag(this.af);
                    break;
                case "ActualBrushes":
                    this.tz((d) => d.ag = this.z, true, a);
                    break;
                case "ActualOutlines":
                    this.tz((d) => d.aj = this.aa, true, a);
                    break;
                case "ActualItemsSource":
                    if (this.g3) {
                        this.z = this.ag(this.ab);
                        this.aa = this.ag(this.af);
                    }
                    this.bh.itemsSource = this.actualItemsSource;
                    break;
                case "ItemsSource":
                    this.actualItemsSource = this.k4();
                    break;
                case "IncludedProperties":
                    this.bh.includedProperties = this.q;
                    break;
                case "ExcludedProperties":
                    this.bh.excludedProperties = this.o;
                    break;
                case "Brushes":
                    this.z = this.ag(this.ab);
                    break;
                case "Outlines":
                    this.aa = this.ag(this.af);
                    break;
                case "Legend":
                    this.tx((d) => d.legend = this.legend);
                    break;
                case "HighlightingMode":
                    this.tx((d) => d.by = this.de);
                    break;
                case "HighlightingBehavior":
                    this.tx((d) => d.bw = this.dc);
                    break;
                case "LegendHighlightingMode":
                    this.tx((d) => d.bd = this.ch);
                    break;
                case "LegendItemBadgeShape":
                    this.tx((d) => d.bf = this.cn);
                    break;
                case "LegendItemBadgeMode":
                    this.tx((d) => d.be = this.cj);
                    break;
                case "PlotAreaMarginLeft":
                    this.tx((d) => d.xx = this.jj);
                    break;
                case "PlotAreaMarginTop":
                    this.tx((d) => d.xz = this.jl);
                    break;
                case "PlotAreaMarginRight":
                    this.tx((d) => d.xy = this.jk);
                    break;
                case "PlotAreaMarginBottom":
                    this.tx((d) => d.xw = this.ji);
                    break;
                case "ComputedPlotAreaMarginMode":
                    this.tx((d) => d.v6 = this.bb());
                    break;
                case "IsHorizontalZoomEnabled":
                    this.tx((d) => d.ws = this.gt);
                    break;
                case "IsVerticalZoomEnabled":
                    this.tx((d) => d.wv = this.g0);
                    break;
                case "WindowRect":
                    this.ty((d) => d.vx = this.ww, false);
                    break;
                case "WindowRectMinWidth":
                    this.ty((d) => d.ij = this.j8, false);
                    break;
                case "WindowRectMinHeight":
                    this.ty((d) => d.ii = this.j7, false);
                    break;
                case "WindowSizeMinWidth":
                    this.ty((d) => d.il = this.ka, false);
                    break;
                case "WindowSizeMinHeight":
                    this.ty((d) => d.ik = this.j9, false);
                    break;
                case "Title":
                    this.ty((d) => d.lo = this.rj, false);
                    break;
                case "Subtitle":
                    this.ty((d) => d.lc = this.q8, false);
                    break;
                case "TitleAlignment":
                    this.tx((d) => d.ue = this.u7);
                    break;
                case "SubtitleAlignment":
                    this.tx((d) => d.ud = this.u6);
                    break;
                case "UnknownValuePlotting":
                    this.s3((d) => {
                        if (typeCast(IUnknownValuePlotting_$type, d) !== null) {
                            d.unknownValuePlotting = this.d7;
                        }
                    });
                    break;
                case "IsSeriesHighlightingEnabled":
                    this.s3((d) => d.ey = this.gv);
                    break;
                case "HighlightedValuesDisplayMode":
                    this.s7((d) => d.bm = this.da);
                    break;
                case "Thickness":
                    if (!isNaN_(this.js)) {
                        this.s7((d) => d.i5 = this.js);
                    }
                    break;
                case "OutlineMode":
                    this.s7((d) => d.b8 = this.dg);
                    break;
                case "MarkerFillOpacity":
                    this.s7((d) => d.iw = this.jf);
                    break;
                case "MarkerThickness":
                    if (!isNaN_(this.jg)) {
                        this.s7((d) => d.rf(this.jg));
                    }
                    break;
                case "MarkerOutlineMode":
                    this.s7((d) => d.re(this.ct));
                    break;
                case "MarkerFillMode":
                    this.s7((d) => d.rd(this.cr));
                    break;
                case "Resolution":
                    if (!isNaN_(this.jm)) {
                        this.s3((d) => d.iz = this.jm);
                    }
                    break;
                case "AreaFillOpacity":
                    if (!isNaN_(this.i0)) {
                        this.s3((d) => d.h0 = this.i0);
                    }
                    break;
                case "ShouldAvoidAxisAnnotationCollisions":
                    this.s2((d) => {
                        d.cu = this.g2;
                        d.cw = this.g2;
                    }, true);
                    break;
                case "ShouldPanOnMaximumZoom":
                    this.tx((d) => d.fy = this.g4);
                    break;
                case "TrendLineBrushes":
                case "TrendLineType":
                case "TrendLineThickness":
                case "TrendLinePeriod":
                    this.s4((d, e) => this.st(d, e));
                    break;
                case "MarkerMaxCount":
                    this.s8((d, e) => this.ss(d, e));
                    break;
                case "MarkerTypes":
                    let d = typeCast(ObservableCollection$1.$.specialize(MarkerType_$type), b);
                    if (d != null) {
                        d.collectionChanged = delegateRemove(d.collectionChanged, runOn(this, this.t3));
                    }
                    let e = typeCast(ObservableCollection$1.$.specialize(MarkerType_$type), c);
                    if (e != null) {
                        e.collectionChanged = delegateCombine(e.collectionChanged, runOn(this, this.t3));
                    }
                    this.s8((f, g) => this.ss(f, g));
                    break;
                case "MarkerAutomaticBehavior":
                    this.tx((f) => f.bg = this.cp);
                    this.s8((f, g) => this.ss(f, g));
                    break;
                case "MarkerBrushes":
                    this.tx((f) => f.ah = this.ad);
                    break;
                case "MarkerOutlines":
                    this.tx((f) => f.ai = this.ae);
                    break;
                case "AlignsGridLinesToPixels":
                    this.tx((f) => f.wo = this.f6);
                    break;
                case "AnimateSeriesWhenAxisRangeChanges":
                    this.tx((f) => f.eg = this.f7);
                    break;
                case "ToolTipType":
                case "CrosshairsDisplayMode":
                case "CrosshairsSnapToData":
                case "CrosshairsLineVerticalStroke":
                case "CrosshairsLineHorizontalStroke":
                case "CrosshairsLineThickness":
                case "CrosshairsAnnotationXAxisBackground":
                case "CrosshairsAnnotationXAxisTextColor":
                case "CrosshairsAnnotationYAxisBackground":
                case "CrosshairsAnnotationYAxisTextColor":
                case "CrosshairsAnnotationEnabled":
                case "CrosshairsAnnotationXAxisPrecision":
                case "CrosshairsAnnotationYAxisPrecision":
                case "FinalValueAnnotationsVisible":
                case "FinalValueAnnotationsPrecision":
                case "FinalValueAnnotationsTextColor":
                case "FinalValueAnnotationsBackground":
                case "CalloutsVisible":
                case "AutoCalloutsVisible":
                case "CalloutsAllowedPositions":
                case "CalloutsItemsSource":
                case "CalloutsXMemberPath":
                case "CalloutsYMemberPath":
                case "CalloutsLabelMemberPath":
                case "CalloutsContentMemberPath":
                    let f = this.uc(runOn(this, this.sz), this.gu);
                    this.gu = f.p1;
                    break;
                case "DataToolTipGroupingMode":
                case "DataToolTipPositionOffsetX":
                case "DataToolTipPositionOffsetY":
                case "DataToolTipDefaultPositionOffsetX":
                case "DataToolTipDefaultPositionOffsetY":
                case "DataToolTipGroupedPositionModeX":
                case "DataToolTipGroupedPositionModeY":
                case DomainChart.nx:
                case "DataToolTipIncludedSeries":
                case "DataToolTipExcludedSeries":
                case "DataToolTipIncludedColumns":
                case "DataToolTipExcludedColumns":
                case "DataToolTipValueFormatAbbreviation":
                case "DataToolTipValueFormatMaxFractions":
                case "DataToolTipValueFormatMinFractions":
                case "DataToolTipValueFormatMode":
                case "DataToolTipValueFormatCulture":
                case "DataToolTipValueFormatUseGrouping":
                case "DataToolTipValueFormatString":
                case "DataToolTipValueFormatSpecifiers":
                case "DataToolTipValueRowMargin":
                case "DataToolTipValueRowVisible":
                case "DataToolTipValueTextWhenMissingData":
                case "DataToolTipValueTextUseSeriesColors":
                case "DataToolTipValueTextMargin":
                case "DataToolTipValueTextColor":
                case "DataToolTipValueTextStyle":
                case "DataToolTipHeaderFormatString":
                case "DataToolTipHeaderFormatSpecifiers":
                case "DataToolTipHeaderFormatCulture":
                case "DataToolTipHeaderFormatDate":
                case "DataToolTipHeaderFormatTime":
                case "DataToolTipHeaderText":
                case "DataToolTipHeaderTextColor":
                case "DataToolTipHeaderTextMargin":
                case "DataToolTipHeaderRowMargin":
                case "DataToolTipHeaderRowVisible":
                case "DataToolTipHeaderTextStyle":
                case "DataToolTipGroupTextColor":
                case "DataToolTipGroupTextMargin":
                case "DataToolTipGroupRowMargin":
                case "DataToolTipGroupRowVisible":
                case "DataToolTipGroupTextStyle":
                case "DataToolTipSummaryTitleTextColor":
                case "DataToolTipSummaryTitleTextStyle":
                case "DataToolTipSummaryType":
                case "DataToolTipSummaryTitleText":
                case "DataToolTipSummaryTitleTextMargin":
                case "DataToolTipSummaryRowMargin":
                case "DataToolTipSummaryValueTextColor":
                case "DataToolTipSummaryValueTextStyle":
                case "DataToolTipSummaryLabelText":
                case "DataToolTipSummaryLabelTextColor":
                case "DataToolTipSummaryLabelTextStyle":
                case "DataToolTipSummaryUnitsText":
                case "DataToolTipSummaryUnitsTextColor":
                case "DataToolTipSummaryUnitsTextStyle":
                case "DataToolTipBadgeMargin":
                case "DataToolTipBadgeShape":
                case "DataToolTipUnitsDisplayMode":
                case "DataToolTipUnitsText":
                case "DataToolTipUnitsTextColor":
                case "DataToolTipUnitsTextMargin":
                case "DataToolTipUnitsTextStyle":
                case "DataToolTipTitleTextMargin":
                case "DataToolTipTitleTextColor":
                case "DataToolTipTitleTextStyle":
                case "DataToolTipLabelDisplayMode":
                case "DataToolTipLabelTextColor":
                case "DataToolTipLabelTextMargin":
                case "DataToolTipLabelTextStyle":
                    this.t1(a, b, c);
                    break;
                case "SelectionMode":
                    this.ty((g) => g.cb = this.dr, false);
                    break;
                case "FocusMode":
                    this.ty((g) => g.b9 = this.dq, false);
                    break;
                case "SelectionBehavior":
                    this.ty((g) => g.b6 = this.dm, false);
                    break;
                case "SelectionBrush":
                    this.ty((g) => g.u1 = this.wo, false);
                    break;
                case "FocusBrush":
                    this.ty((g) => g.uk = this.wg, false);
                    break;
                case "HorizontalViewScrollbarMode":
                    this.tx((g) => g.ch = this.dw);
                    break;
                case "VerticalViewScrollbarMode":
                    this.tx((g) => g.ci = this.dx);
                    break;
                case "HorizontalViewScrollbarCornerRadius":
                    this.tx((g) => g.hl = this.i7);
                    break;
                case "HorizontalViewScrollbarFill":
                    this.tx((g) => g.uv = this.wl);
                    break;
                case "HorizontalViewScrollbarMaxOpacity":
                    this.tx((g) => g.ho = this.ja);
                    break;
                case "HorizontalViewScrollbarOutline":
                    this.tx((g) => g.uw = this.wm);
                    break;
                case "HorizontalViewScrollbarStrokeThickness":
                    this.tx((g) => g.hp = this.jb);
                    break;
                case "VerticalViewScrollbarCornerRadius":
                    this.tx((g) => g.h8 = this.j0);
                    break;
                case "VerticalViewScrollbarFill":
                    this.tx((g) => g.u5 = this.wr);
                    break;
                case "VerticalViewScrollbarMaxOpacity":
                    this.tx((g) => g.ia = this.j2);
                    break;
                case "VerticalViewScrollbarOutline":
                    this.tx((g) => g.u6 = this.ws);
                    break;
                case "VerticalViewScrollbarStrokeThickness":
                    this.tx((g) => g.ib = this.j3);
                    break;
                case "HorizontalViewScrollbarHeight":
                    this.tx((g) => g.hm = this.i8);
                    break;
                case "HorizontalViewScrollbarInset":
                    this.tx((g) => g.hn = this.i9);
                    break;
                case DomainChart.pt:
                    this.tx((g) => g.et = this.gm);
                    break;
                case "HorizontalViewScrollbarTrackStartInset":
                    this.tx((g) => g.hr = this.jd);
                    break;
                case "HorizontalViewScrollbarTrackEndInset":
                    this.tx((g) => g.hq = this.jc);
                    break;
                case "VerticalViewScrollbarPosition":
                    this.tx((g) => g.cl = this.d1);
                    break;
                case "HorizontalViewScrollbarPosition":
                    this.tx((g) => g.ce = this.dt);
                    break;
                case "ValueLines":
                    let g = typeCast(ObservableCollection$1.$.specialize(ValueLayerValueMode_$type), b);
                    if (g != null) {
                        g.collectionChanged = delegateRemove(g.collectionChanged, runOn(this, this.t7));
                    }
                    let h = typeCast(ObservableCollection$1.$.specialize(ValueLayerValueMode_$type), c);
                    if (h != null) {
                        h.collectionChanged = delegateCombine(h.collectionChanged, runOn(this, this.t7));
                    }
                    let i = this.uc(runOn(this, this.sz), this.gu);
                    this.gu = i.p1;
                    break;
            }
            this.t8(a, b, c);
            this.t9(a, b, c);
            if (this.gx) {
                this.cd.onTargetPropertyChanged(this, a, b, c);
            }
        }
        t1(a, b, c) {
            this.sr(a, c);
        }
        sr(a, b) {
            if (!this.g8.containsKey(a)) {
                this.ha.add(a);
                this.g8.addItem(a, b);
            }
            else {
                this.g8.item(a, b);
            }
            this.s5((c) => {
                if (this.b8.isDataToolTipLayer(c)) {
                    this.sq(c);
                }
            });
        }
        sq(a) {
            for (let b = 0; b < this.ha.count; b++) {
                let c = this.ha._inner[b];
                let d = this.g8.item(c);
                if (stringStartsWith(c, "DataToolTip")) {
                    c = c.substr(("DataToolTip").length);
                }
                this.b8.updateDataToolTipPropertyByName(a, c, d);
            }
        }
        t3(a, b) {
            this.s8((c, d) => this.ss(c, d));
        }
        t7(a, b) {
            let c = this.uc(runOn(this, this.sz), this.gu);
            this.gu = c.p1;
        }
        get a4() {
            return this.ay;
        }
        get a0() {
            return this.au;
        }
        get az() {
            return this.at;
        }
        get eg() {
            return this.ec;
        }
        get eh() {
            return this.ed;
        }
        get a8() {
            return this.a6;
        }
        get dr() {
            return this.dp;
        }
        set dr(a) {
            let b = this.dp;
            this.dp = a;
            if (b != this.dp) {
                this.t5("SelectionMode", enumGetBox(SeriesSelectionMode_$type, b), enumGetBox(SeriesSelectionMode_$type, this.dp));
            }
        }
        get dq() {
            return this.dn;
        }
        set dq(a) {
            let b = this.dn;
            this.dn = a;
            if (b != this.dn) {
                this.t5("FocusMode", enumGetBox(SeriesSelectionMode_$type, b), enumGetBox(SeriesSelectionMode_$type, this.dn));
            }
        }
        get wo() {
            return this.vt;
        }
        set wo(a) {
            let b = this.vt;
            this.vt = a;
            if (b != this.vt) {
                this.t5("SelectionBrush", b, this.vt);
            }
        }
        get wg() {
            return this.vq;
        }
        set wg(a) {
            let b = this.vq;
            this.vq = a;
            if (b != this.vq) {
                this.t5("FocusBrush", b, this.vq);
            }
        }
        get dm() {
            return this.dl;
        }
        set dm(a) {
            let b = this.dl;
            this.dl = a;
            if (b != this.dl) {
                this.t5("SelectionBehavior", enumGetBox(SeriesSelectionBehavior_$type, b), enumGetBox(SeriesSelectionBehavior_$type, this.dl));
            }
        }
        get selectedSeriesItems() {
            if (this.dataChart != null) {
                return this.dataChart.selectedSeriesItems;
            }
            return this.ao;
        }
        get focusedSeriesItems() {
            if (this.dataChart != null) {
                return this.dataChart.focusedSeriesItems;
            }
            return this.an;
        }
        get a3() {
            return this.ax;
        }
        get a2() {
            return this.aw;
        }
        get a1() {
            return this.av;
        }
        get ei() {
            return this.ee;
        }
        get ej() {
            return this.ef;
        }
        get a7() {
            return this.a5;
        }
        get p4() {
            return this.ls;
        }
        set p4(a) {
            let b = this.ls;
            this.ls = a;
            if (b != a) {
                this.ax.n();
                this.ek.b(this.ls, (c, d, e) => this.ax.j.add(new ChartSortDescription(2, c, d)));
            }
        }
        get pg() {
            return this.lo;
        }
        set pg(a) {
            let b = this.lo;
            this.lo = a;
            if (b != a) {
                this.aw.n();
                this.ek.b(this.lo, (c, d, e) => this.aw.j.add(new ChartSortDescription(2, c, d)));
            }
        }
        get p0() {
            return this.lq;
        }
        set p0(a) {
            let b = this.lq;
            this.lq = a;
            if (b != a) {
                this.av.n();
                this.ek.b(this.lq, (c, d, e) => this.av.j.add(new ChartSortDescription(2, c, d)));
            }
        }
        get py() {
            return this.lp;
        }
        set py(a) {
            let b = this.lp;
            this.lp = a;
            if (b != a) {
                this.ee.clear();
                let c = FilterExpressionParsingHelper.getFilterExpression(a);
                if (!stringIsNullOrEmpty(c.b)) {
                    if (this.filterStringErrorsParsing != null) {
                        this.filterStringErrorsParsing(this, ((() => {
                            let $ret = new FilterStringErrorsParsingEventArgs();
                            $ret.propertyName = "InitialFilter";
                            $ret.errors = c.b;
                            return $ret;
                        })()));
                    }
                    return;
                }
                this.ee.k.add(c.a);
            }
        }
        get p2() {
            return this.lr;
        }
        set p2(a) {
            let b = this.lr;
            this.lr = a;
            if (b != a) {
                this.ef.clear();
                let c = FilterExpressionParsingHelper.getFilterExpression(a);
                if (!stringIsNullOrEmpty(c.b)) {
                    if (this.filterStringErrorsParsing != null) {
                        this.filterStringErrorsParsing(this, ((() => {
                            let $ret = new FilterStringErrorsParsingEventArgs();
                            $ret.propertyName = "InitialFilter";
                            $ret.errors = c.b;
                            return $ret;
                        })()));
                    }
                    return;
                }
                this.ef.k.add(c.a);
            }
        }
        get p6() {
            return this.lt;
        }
        set p6(a) {
            let b = this.lt;
            this.lt = a;
            if (b != a) {
                this.a5.n();
                this.el.a(this.lt, (c, d, e) => this.a5.j.add(((() => {
                    let $ret = new ChartSummaryDescription(2, c, d);
                    $ret.n = e;
                    return $ret;
                })())));
            }
        }
        get itemsSource() {
            return this.kv;
        }
        set itemsSource(a) {
            let b = this.itemsSource;
            if (b != a) {
                this.kv = a;
                this.t5("ItemsSource", b, this.itemsSource);
            }
        }
        get actualItemsSource() {
            return this.ku;
        }
        set actualItemsSource(a) {
            let b = this.actualItemsSource;
            if (b != a) {
                this.ku = a;
                this.t5("ActualItemsSource", b, this.actualItemsSource);
            }
        }
        get q() {
            return this.h;
        }
        set q(a) {
            let b = this.h;
            this.h = a;
            if (b != this.h) {
                this.t5("IncludedProperties", b, this.h);
            }
        }
        get o() {
            return this.g;
        }
        set o(a) {
            let b = this.g;
            this.g = a;
            if (b != this.g) {
                this.t5("ExcludedProperties", b, this.g);
            }
        }
        get ab() {
            return this.t;
        }
        set ab(a) {
            let b = this.ab;
            if (a != b) {
                this.t = a;
                this.t5("Brushes", b, this.ab);
            }
        }
        get af() {
            return this.w;
        }
        set af(a) {
            let b = this.af;
            if (a != b) {
                this.w = a;
                this.t5("Outlines", b, this.af);
            }
        }
        get z() {
            return this.r;
        }
        set z(a) {
            let b = this.r;
            if (a != b) {
                this.r = a;
                this.t5("ActualBrushes", b, this.z);
            }
        }
        get aa() {
            return this.s;
        }
        set aa(a) {
            let b = this.s;
            if (a != b) {
                this.s = a;
                this.t5("ActualOutlines", b, this.aa);
            }
        }
        get legend() {
            return this.b9;
        }
        set legend(a) {
            let b = this.legend;
            if (a != b) {
                this.b9 = a;
                this.t5("Legend", b, this.legend);
            }
        }
        get_gt() {
            return this.fs;
        }
        set_gt(a) {
            let b = this.gt;
            if (a != b) {
                this.fs = a;
                this.t5("IsHorizontalZoomEnabled", b, this.gt);
            }
        }
        get gt() {
            return this.get_gt();
        }
        set gt(a) {
            this.set_gt(a);
        }
        get_g0() {
            return this.fv;
        }
        set_g0(a) {
            let b = this.g0;
            if (a != b) {
                this.fv = a;
                this.t5("IsVerticalZoomEnabled", b, this.g0);
            }
        }
        get g0() {
            return this.get_g0();
        }
        set g0(a) {
            this.set_g0(a);
        }
        get_g3() {
            return this.fx;
        }
        set_g3(a) {
            let b = this.g3;
            if (a != b) {
                this.fx = a;
                this.t5("ShouldDisplayMockData", b, this.g3);
            }
        }
        get g3() {
            return this.get_g3();
        }
        set g3(a) {
            this.set_g3(a);
        }
        get_g6() {
            return this.f4;
        }
        set_g6(a) {
            let b = this.g6;
            if (a != b) {
                this.f4 = a;
                this.t5("ShouldUseSkeletonStyleForMockData", b, this.g6);
            }
        }
        get g6() {
            return this.get_g6();
        }
        set g6(a) {
            this.set_g6(a);
        }
        get_da() {
            return this.c9;
        }
        set_da(a) {
            let b = this.da;
            if (a != b) {
                this.c9 = a;
                this.t5("HighlightedValuesDisplayMode", enumGetBox(SeriesHighlightedValuesDisplayMode_$type, b), enumGetBox(SeriesHighlightedValuesDisplayMode_$type, this.da));
            }
        }
        get da() {
            return this.get_da();
        }
        set da(a) {
            this.set_da(a);
        }
        get_gv() {
            return this.fu;
        }
        set_gv(a) {
            let b = this.gv;
            if (a != b) {
                this.fu = a;
                this.t5("IsSeriesHighlightingEnabled", b, this.gv);
            }
        }
        get gv() {
            return this.get_gv();
        }
        set gv(a) {
            this.set_gv(a);
        }
        get ww() {
            return this.wu;
        }
        set ww(a) {
            let b = this.ww;
            if (Rect.l_op_Inequality(a, b)) {
                this.wu = a;
                this.t5("WindowRect", b, this.ww);
            }
        }
        get wv() {
            return this.dataChart != null ? this.dataChart.vw : Rect.empty;
        }
        get rj() {
            return this.lw;
        }
        set rj(a) {
            let b = this.rj;
            if (a != b) {
                this.lw = a;
                this.t5("Title", b, this.rj);
            }
        }
        get q8() {
            return this.lu;
        }
        set q8(a) {
            let b = this.q8;
            if (a != b) {
                this.lu = a;
                this.t5("Subtitle", b, this.q8);
            }
        }
        get u7() {
            return this.u5;
        }
        set u7(a) {
            let b = this.u7;
            if (b != a) {
                this.u5 = a;
                this.t5("TitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.u7));
            }
        }
        get u6() {
            return this.u4;
        }
        set u6(a) {
            let b = this.u6;
            if (b != a) {
                this.u4 = a;
                this.t5("SubtitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.u6));
            }
        }
        get d7() {
            return this.d6;
        }
        set d7(a) {
            let b = this.d7;
            if (a != b) {
                this.d6 = a;
                this.t5("UnknownValuePlotting", enumGetBox(UnknownValuePlotting_$type, b), enumGetBox(UnknownValuePlotting_$type, this.d7));
            }
        }
        get_jm() {
            return this.h9;
        }
        set_jm(a) {
            let b = this.jm;
            if (a != b) {
                this.h9 = a;
                this.t5("Resolution", b, this.jm);
            }
        }
        get jm() {
            return this.get_jm();
        }
        set jm(a) {
            this.set_jm(a);
        }
        get js() {
            return this.ig;
        }
        set js(a) {
            let b = this.js;
            if (a != b) {
                this.ig = a;
                this.t5("Thickness", b, this.js);
            }
        }
        get dg() {
            return this.df;
        }
        set dg(a) {
            let b = this.dg;
            if (a != b) {
                this.df = a;
                this.t5("OutlineMode", enumGetBox(SeriesOutlineMode_$type, b), enumGetBox(SeriesOutlineMode_$type, this.dg));
            }
        }
        get ct() {
            return this.cs;
        }
        set ct(a) {
            let b = this.ct;
            if (a != b) {
                this.cs = a;
                this.t5("MarkerOutlineMode", enumGetBox(MarkerOutlineMode_$type, b), enumGetBox(MarkerOutlineMode_$type, this.ct));
            }
        }
        get cr() {
            return this.cq;
        }
        set cr(a) {
            let b = this.cr;
            if (a != b) {
                this.cq = a;
                this.t5("MarkerFillMode", enumGetBox(MarkerFillMode_$type, b), enumGetBox(MarkerFillMode_$type, this.cr));
            }
        }
        get jf() {
            return this.h2;
        }
        set jf(a) {
            let b = this.jf;
            if (a != b) {
                this.h2 = a;
                this.t5("MarkerFillOpacity", b, this.jf);
            }
        }
        get jg() {
            return this.h3;
        }
        set jg(a) {
            let b = this.jg;
            if (a != b) {
                this.h3 = a;
                this.t5("MarkerThickness", b, this.jg);
            }
        }
        get cz() {
            return this.cy;
        }
        set cz(a) {
            let b = this.cz;
            if (a != b) {
                this.cy = a;
                this.t5("MarkerTypes", b, this.cz);
            }
        }
        get cp() {
            return this.co;
        }
        set cp(a) {
            let b = this.cp;
            if (a != b) {
                this.co = a;
                this.t5("MarkerAutomaticBehavior", enumGetBox(MarkerAutomaticBehavior_$type, b), enumGetBox(MarkerAutomaticBehavior_$type, this.cp));
            }
        }
        get ad() {
            return this.u;
        }
        set ad(a) {
            let b = this.ad;
            if (a != b) {
                this.u = a;
                this.t5("MarkerBrushes", b, this.ad);
            }
        }
        get ae() {
            return this.v;
        }
        set ae(a) {
            let b = this.ae;
            if (!Base.equalsStatic(a, b)) {
                this.v = a;
                this.t5("MarkerOutlines", b, this.ae);
            }
        }
        get kr() {
            return this.ki;
        }
        set kr(a) {
            let b = this.ki;
            if (a != b) {
                this.ki = a;
                this.t5("MarkerMaxCount", b, this.ki);
            }
        }
        get i0() {
            return this.hn;
        }
        set i0(a) {
            let b = this.i0;
            if (a != b) {
                this.hn = a;
                this.t5("AreaFillOpacity", b, this.i0);
            }
        }
        get f7() {
            return this.fb;
        }
        set f7(a) {
            let b = this.fb;
            if (a != b) {
                this.fb = a;
                this.t5("AnimateSeriesWhenAxisRangeChanges", b, this.fb);
            }
        }
        get ah() {
            return this.x;
        }
        set ah(a) {
            let b = this.ah;
            if (a != b) {
                this.x = a;
                this.t5("TrendLineBrushes", b, this.ah);
            }
        }
        get d5() {
            return this.d4;
        }
        set d5(a) {
            let b = this.d5;
            if (a != b) {
                this.d4 = a;
                this.t5("TrendLineType", enumGetBox(TrendLineType_$type, b), enumGetBox(TrendLineType_$type, this.d5));
            }
        }
        get jy() {
            return this.im;
        }
        set jy(a) {
            let b = this.jy;
            if (a != b) {
                this.im = a;
                this.t5("TrendLineThickness", b, this.jy);
            }
        }
        get f6() {
            return this.fa;
        }
        set f6(a) {
            let b = this.f6;
            if (a != b) {
                this.fa = a;
                this.t5("AlignsGridLinesToPixels", b, this.f6);
            }
        }
        get jj() {
            return this.h6;
        }
        set jj(a) {
            let b = this.h6;
            this.h6 = a;
            if (a != b) {
                this.t5("PlotAreaMarginLeft", b, a);
            }
        }
        get jl() {
            return this.h8;
        }
        set jl(a) {
            let b = this.h8;
            this.h8 = a;
            if (a != b) {
                this.t5("PlotAreaMarginTop", b, a);
            }
        }
        get jk() {
            return this.h7;
        }
        set jk(a) {
            let b = this.h7;
            this.h7 = a;
            if (a != b) {
                this.t5("PlotAreaMarginRight", b, a);
            }
        }
        get ji() {
            return this.h5;
        }
        set ji(a) {
            let b = this.h5;
            this.h5 = a;
            if (a != b) {
                this.t5("PlotAreaMarginBottom", b, a);
            }
        }
        t4() {
        }
        get ba() {
            return this.a9;
        }
        set ba(a) {
            let b = this.ba;
            if (a != b) {
                this.a9 = a;
                this.t5("ComputedPlotAreaMarginMode", enumGetBox(ComputedPlotAreaMarginMode_$type, b), enumGetBox(ComputedPlotAreaMarginMode_$type, this.ba));
            }
        }
        bb() {
            return this.ba;
        }
        get di() {
            return this.dh;
        }
        set di(a) {
            let b = this.di;
            if (a != b) {
                this.dh = a;
                this.t5("SeriesPlotAreaMarginHorizontalMode", enumGetBox(SeriesPlotAreaMarginHorizontalMode_$type, b), enumGetBox(SeriesPlotAreaMarginHorizontalMode_$type, this.di));
            }
        }
        get dk() {
            return this.dj;
        }
        set dk(a) {
            let b = this.dk;
            if (a != b) {
                this.dj = a;
                this.t5("SeriesPlotAreaMarginVerticalMode", enumGetBox(SeriesPlotAreaMarginVerticalMode_$type, b), enumGetBox(SeriesPlotAreaMarginVerticalMode_$type, this.dk));
            }
        }
        get de() {
            return this.dd;
        }
        set de(a) {
            let b = this.de;
            if (a != b) {
                this.dd = a;
                this.t5("HighlightingMode", enumGetBox(SeriesHighlightingMode_$type, b), enumGetBox(SeriesHighlightingMode_$type, this.de));
            }
        }
        get dc() {
            return this.db;
        }
        set dc(a) {
            let b = this.dc;
            if (a != b) {
                this.db = a;
                this.t5("HighlightingBehavior", enumGetBox(SeriesHighlightingBehavior_$type, b), enumGetBox(SeriesHighlightingBehavior_$type, this.dc));
            }
        }
        get ch() {
            return this.cg;
        }
        set ch(a) {
            let b = this.ch;
            if (a != b) {
                this.cg = a;
                this.t5("LegendHighlightingMode", enumGetBox(LegendHighlightingMode_$type, b), enumGetBox(LegendHighlightingMode_$type, this.ch));
            }
        }
        get cn() {
            return this.cl;
        }
        set cn(a) {
            let b = this.cn;
            if (a != b) {
                this.cl = a;
                this.t5("LegendItemBadgeShape", enumGetBox(LegendItemBadgeShape_$type, b), enumGetBox(LegendItemBadgeShape_$type, this.cn));
            }
        }
        get cj() {
            return this.ci;
        }
        set cj(a) {
            let b = this.cj;
            if (a != b) {
                this.ci = a;
                this.t5("LegendItemBadgeMode", enumGetBox(LegendItemBadgeMode_$type, b), enumGetBox(LegendItemBadgeMode_$type, this.cj));
            }
        }
        get kt() {
            return this.kl;
        }
        set kt(a) {
            let b = this.kt;
            if (a != b) {
                this.kl = a;
                this.t5("TrendLinePeriod", b, this.kt);
            }
        }
        get d3() {
            return this.d2;
        }
        set d3(a) {
            let b = this.d3;
            if (a != b) {
                this.d2 = a;
                this.t5("ToolTipType", enumGetBox(ToolTipType_$type, b), enumGetBox(ToolTipType_$type, this.d3));
            }
        }
        get bd() {
            return this.bc;
        }
        set bd(a) {
            let b = this.bd;
            if (a != b) {
                this.bc = a;
                this.t5("CrosshairsDisplayMode", enumGetBox(CrosshairsDisplayMode_$type, b), enumGetBox(CrosshairsDisplayMode_$type, this.bd));
            }
        }
        get gd() {
            return this.fh;
        }
        set gd(a) {
            let b = this.gd;
            if (a != b) {
                this.fh = a;
                this.t5("CrosshairsSnapToData", b, this.gd);
            }
        }
        get v3() {
            return this.vd;
        }
        set v3(a) {
            let b = this.v3;
            if (a != b) {
                this.vd = a;
                this.t5("CrosshairsLineVerticalStroke", b, this.v3);
            }
        }
        get i2() {
            return this.hp;
        }
        set i2(a) {
            let b = this.i2;
            if (a != b) {
                this.hp = a;
                this.t5("CrosshairsLineThickness", b, this.i2);
            }
        }
        get v2() {
            return this.vc;
        }
        set v2(a) {
            let b = this.v2;
            if (a != b) {
                this.vc = a;
                this.t5("CrosshairsLineHorizontalStroke", b, this.v2);
            }
        }
        get gc() {
            return this.fg;
        }
        set gc(a) {
            let b = this.gc;
            if (a != b) {
                this.fg = a;
                this.t5("CrosshairsAnnotationEnabled", b, this.gc);
            }
        }
        get vy() {
            return this.u8;
        }
        set vy(a) {
            let b = this.vy;
            if (a != b) {
                this.u8 = a;
                this.t5("CrosshairsAnnotationXAxisBackground", b, this.vy);
            }
        }
        get v0() {
            return this.va;
        }
        set v0(a) {
            let b = this.v0;
            if (a != b) {
                this.va = a;
                this.t5("CrosshairsAnnotationYAxisBackground", b, this.v0);
            }
        }
        get vz() {
            return this.u9;
        }
        set vz(a) {
            let b = this.vz;
            if (a != b) {
                this.u9 = a;
                this.t5("CrosshairsAnnotationXAxisTextColor", b, this.vz);
            }
        }
        get v1() {
            return this.vb;
        }
        set v1(a) {
            let b = this.v1;
            if (a != b) {
                this.vb = a;
                this.t5("CrosshairsAnnotationYAxisTextColor", b, this.v1);
            }
        }
        get km() {
            return this.kd;
        }
        set km(a) {
            let b = this.km;
            if (a != b) {
                this.kd = a;
                this.t5("CrosshairsAnnotationXAxisPrecision", b, this.km);
            }
        }
        get kn() {
            return this.ke;
        }
        set kn(a) {
            let b = this.kn;
            if (a != b) {
                this.ke = a;
                this.t5("CrosshairsAnnotationYAxisPrecision", b, this.kn);
            }
        }
        get g2() {
            return this.fw;
        }
        set g2(a) {
            let b = this.g2;
            if (a != b) {
                this.fw = a;
                this.t5("ShouldAvoidAxisAnnotationCollisions", b, this.g2);
            }
        }
        get g4() {
            return this.fy;
        }
        set g4(a) {
            let b = this.fy;
            if (a != b) {
                this.fy = a;
                this.t5("ShouldPanOnMaximumZoom", b, this.fy);
            }
        }
        get gk() {
            return this.fo;
        }
        set gk(a) {
            let b = this.gk;
            if (a != b) {
                this.fo = a;
                this.t5("FinalValueAnnotationsVisible", b, this.gk);
            }
        }
        get we() {
            return this.vo;
        }
        set we(a) {
            let b = this.we;
            if (a != b) {
                this.vo = a;
                this.t5("FinalValueAnnotationsBackground", b, this.we);
            }
        }
        get wf() {
            return this.vp;
        }
        set wf(a) {
            let b = this.wf;
            if (a != b) {
                this.vp = a;
                this.t5("FinalValueAnnotationsTextColor", b, this.wf);
            }
        }
        get kq() {
            return this.kh;
        }
        set kq(a) {
            let b = this.kq;
            if (a != b) {
                this.kh = a;
                this.t5("FinalValueAnnotationsPrecision", b, this.kq);
            }
        }
        get f9() {
            return this.fd;
        }
        set f9(a) {
            let b = this.f9;
            if (a != b) {
                this.fd = a;
                this.t5("AutoCalloutsVisible", b, this.f9);
            }
        }
        get gb() {
            return this.ff;
        }
        set gb(a) {
            let b = this.gb;
            if (a != b) {
                this.ff = a;
                this.t5("CalloutsVisible", b, this.gb);
            }
        }
        get ga() {
            return this.fe;
        }
        set ga(a) {
            let b = this.ga;
            if (a != b) {
                this.fe = a;
                this.t5("CalloutStyleUpdatingEventEnabled", b, this.ga);
            }
        }
        get calloutsItemsSource() {
            return this.hk;
        }
        set calloutsItemsSource(a) {
            let b = this.calloutsItemsSource;
            if (a != b) {
                this.hk = a;
                this.t5("CalloutsItemsSource", b, this.calloutsItemsSource);
            }
        }
        get ak() {
            return this.aj;
        }
        set ak(a) {
            let b = this.ak;
            if (a != b) {
                this.aj = a;
                this.t5("CalloutsAllowedPositions", b, this.ak);
            }
        }
        get mf() {
            return this.lc;
        }
        set mf(a) {
            let b = this.mf;
            if (a != b) {
                this.lc = a;
                this.t5("CalloutsXMemberPath", b, this.mf);
            }
        }
        get mh() {
            return this.ld;
        }
        set mh(a) {
            let b = this.mh;
            if (a != b) {
                this.ld = a;
                this.t5("CalloutsYMemberPath", b, this.mh);
            }
        }
        get mb() {
            return this.lb;
        }
        set mb(a) {
            let b = this.mb;
            if (a != b) {
                this.lb = a;
                this.t5("CalloutsLabelMemberPath", b, this.mb);
            }
        }
        get l8() {
            return this.la;
        }
        set l8(a) {
            let b = this.l8;
            if (a != b) {
                this.la = a;
                this.t5("CalloutsContentMemberPath", b, this.l8);
            }
        }
        get d9() {
            return this.d8;
        }
        set d9(a) {
            let b = this.d8;
            if (a != b) {
                this.d8 = a;
                this.t5("ValueLines", b, this.d8);
            }
        }
        get ai() {
            return this.y;
        }
        set ai(a) {
            let b = this.y;
            if (a != b) {
                this.y = a;
                this.t5("ValueLinesBrushes", b, this.y);
            }
        }
        get jz() {
            return this.io;
        }
        set jz(a) {
            let b = this.io;
            if (a != b) {
                this.io = a;
                this.t5("ValueLinesThickness", b, this.io);
            }
        }
        get dw() {
            return this.du;
        }
        set dw(a) {
            let b = this.du;
            this.du = a;
            if (b != this.du) {
                this.t5("HorizontalViewScrollbarMode", enumGetBox(SeriesViewerScrollbarMode_$type, b), enumGetBox(SeriesViewerScrollbarMode_$type, this.du));
            }
        }
        get dx() {
            return this.dv;
        }
        set dx(a) {
            let b = this.dv;
            this.dv = a;
            if (b != this.dv) {
                this.t5("VerticalViewScrollbarMode", enumGetBox(SeriesViewerScrollbarMode_$type, b), enumGetBox(SeriesViewerScrollbarMode_$type, this.dv));
            }
        }
        get dt() {
            return this.ds;
        }
        set dt(a) {
            let b = this.ds;
            this.ds = a;
            if (b != this.ds) {
                this.t5("HorizontalViewScrollbarPosition", enumGetBox(SeriesViewerHorizontalScrollbarPosition_$type, b), enumGetBox(SeriesViewerHorizontalScrollbarPosition_$type, this.ds));
            }
        }
        get d1() {
            return this.d0;
        }
        set d1(a) {
            let b = this.d0;
            this.d0 = a;
            if (b != this.d0) {
                this.t5("VerticalViewScrollbarPosition", enumGetBox(SeriesViewerVerticalScrollbarPosition_$type, b), enumGetBox(SeriesViewerVerticalScrollbarPosition_$type, this.d0));
            }
        }
        get wl() {
            return this.vr;
        }
        set wl(a) {
            let b = this.vr;
            this.vr = a;
            if (b != this.vr) {
                this.t5("HorizontalViewScrollbarFill", b, this.vr);
            }
        }
        get wm() {
            return this.vs;
        }
        set wm(a) {
            let b = this.vs;
            this.vs = a;
            if (b != this.vs) {
                this.t5("HorizontalViewScrollbarOutline", b, this.vs);
            }
        }
        get jb() {
            return this.hy;
        }
        set jb(a) {
            let b = this.hy;
            this.hy = a;
            if (b != this.hy) {
                this.t5("HorizontalViewScrollbarStrokeThickness", b, this.hy);
            }
        }
        get ja() {
            return this.hx;
        }
        set ja(a) {
            let b = this.hx;
            this.hx = a;
            if (b != this.hx) {
                this.t5("HorizontalViewScrollbarMaxOpacity", b, this.hx);
            }
        }
        get i7() {
            return this.hu;
        }
        set i7(a) {
            let b = this.hu;
            this.hu = a;
            if (b != this.hu) {
                this.t5("HorizontalViewScrollbarCornerRadius", b, this.hu);
            }
        }
        get i8() {
            return this.hv;
        }
        set i8(a) {
            let b = this.hv;
            this.hv = a;
            if (b != this.hv) {
                this.t5("HorizontalViewScrollbarHeight", b, this.hv);
            }
        }
        get i9() {
            return this.hw;
        }
        set i9(a) {
            let b = this.hw;
            this.hw = a;
            if (b != this.hw) {
                this.t5("HorizontalViewScrollbarInset", b, this.hw);
            }
        }
        get jd() {
            return this.h0;
        }
        set jd(a) {
            let b = this.h0;
            this.h0 = a;
            if (b != this.h0) {
                this.t5("HorizontalViewScrollbarTrackStartInset", b, this.h0);
            }
        }
        get jc() {
            return this.hz;
        }
        set jc(a) {
            let b = this.hz;
            this.hz = a;
            if (b != this.hz) {
                this.t5("HorizontalViewScrollbarTrackEndInset", b, this.hz);
            }
        }
        get gm() {
            return this.fp;
        }
        set gm(a) {
            let b = this.fp;
            this.fp = a;
            if (b != this.fp) {
                this.t5(DomainChart.pt, b, this.fp);
            }
        }
        get wr() {
            return this.vw;
        }
        set wr(a) {
            let b = this.vw;
            this.vw = a;
            if (b != this.vw) {
                this.t5("VerticalViewScrollbarFill", b, this.vw);
            }
        }
        get ws() {
            return this.vx;
        }
        set ws(a) {
            let b = this.vx;
            this.vx = a;
            if (b != this.vx) {
                this.t5("VerticalViewScrollbarOutline", b, this.vx);
            }
        }
        get j3() {
            return this.is;
        }
        set j3(a) {
            let b = this.is;
            this.is = a;
            if (b != this.is) {
                this.t5("VerticalViewScrollbarStrokeThickness", b, this.is);
            }
        }
        get j2() {
            return this.ir;
        }
        set j2(a) {
            let b = this.ir;
            this.ir = a;
            if (b != this.ir) {
                this.t5("VerticalViewScrollbarMaxOpacity", b, this.ir);
            }
        }
        get j0() {
            return this.ip;
        }
        set j0(a) {
            let b = this.ip;
            this.ip = a;
            if (b != this.ip) {
                this.t5("VerticalViewScrollbarCornerRadius", b, this.ip);
            }
        }
        get j6() {
            return this.iv;
        }
        set j6(a) {
            let b = this.iv;
            this.iv = a;
            if (b != this.iv) {
                this.t5("VerticalViewScrollbarWidth", b, this.iv);
            }
        }
        get j1() {
            return this.iq;
        }
        set j1(a) {
            let b = this.iq;
            this.iq = a;
            if (b != this.iq) {
                this.t5("VerticalViewScrollbarInset", b, this.iq);
            }
        }
        get j5() {
            return this.iu;
        }
        set j5(a) {
            let b = this.iu;
            this.iu = a;
            if (b != this.iu) {
                this.t5("VerticalViewScrollbarTrackStartInset", b, this.iu);
            }
        }
        get j4() {
            return this.it;
        }
        set j4(a) {
            let b = this.it;
            this.it = a;
            if (b != this.it) {
                this.t5("VerticalViewScrollbarTrackEndInset", b, this.it);
            }
        }
        get g7() {
            return this.f5;
        }
        set g7(a) {
            let b = this.f5;
            this.f5 = a;
            if (b != this.f5) {
                this.t5(DomainChart.sf, b, this.f5);
            }
        }
        get j8() {
            return this.ix;
        }
        set j8(a) {
            let b = this.ix;
            this.ix = a;
            if (b != this.ix) {
                this.t5("WindowRectMinWidth", b, this.ix);
            }
        }
        get j7() {
            return this.iw;
        }
        set j7(a) {
            let b = this.iw;
            this.iw = a;
            if (b != this.iw) {
                this.t5("WindowRectMinHeight", b, this.iw);
            }
        }
        get ka() {
            return this.iz;
        }
        set ka(a) {
            let b = this.iz;
            this.iz = a;
            if (b != this.iz) {
                this.t5("WindowSizeMinWidth", b, this.iz);
            }
        }
        get j9() {
            return this.iy;
        }
        set j9(a) {
            let b = this.iy;
            this.iy = a;
            if (b != this.iy) {
                this.t5("WindowSizeMinHeight", b, this.iy);
            }
        }
    }
    DomainChart.$t = /*@__PURE__*/ markType(DomainChart, 'DomainChart', Base.$, [INotifyPropertyChanged_$type, IDataLegendTarget_$type, IToolbarTarget_$type]);
    DomainChart.k9 = /*@__PURE__*/ new Random(0);
    DomainChart.k8 = /*@__PURE__*/ new Random(0);
    DomainChart.nx = "DataToolTipShouldUpdateWhenSeriesDataChanges";
    DomainChart.pt = "HorizontalViewScrollbarShouldAddAutoTrackInsets";
    DomainChart.sf = "VerticalViewScrollbarShouldAddAutoTrackInsets";
    return DomainChart;
})();
/**
 * @hidden
 */
export let IDomainChartToolbarProvider_$type = /*@__PURE__*/ new Type(null, 'IDomainChartToolbarProvider');
