/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { RadialBucketCalculator } from "./RadialBucketCalculator";
import { markType, Point_$type, runOn, delegateCombine, enumGetBox, typeCast, markDep } from "igniteui-react-core";
import { isNaN_, intDivide, isInfinity } from "igniteui-react-core";
import { RadialBase } from "./RadialBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { DependencyProperty } from "igniteui-react-core";
import { TrendLineType_$type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { RadialFrame } from "./RadialFrame";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { NumericAxisBase } from "./NumericAxisBase";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { RadialBaseView } from "./RadialBaseView";
import { CollisionAvoider } from "./CollisionAvoider";
import { Clipper } from "igniteui-react-core";
import { TrendResolutionParams } from "./TrendResolutionParams";
import { RadialTrendLineManager } from "./RadialTrendLineManager";
import { CategoryMarkerManager } from "./CategoryMarkerManager";
import { PropertyMetadata } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let AnchoredRadialBucketCalculator = /*@__PURE__*/ (() => {
    class AnchoredRadialBucketCalculator extends RadialBucketCalculator {
        constructor(a) {
            super(a);
            this.f = null;
            this.f = a;
        }
        getBucket(a) {
            let b = this.f.cz.yi;
            let c = Math.min(a * this.b, b.count - 1);
            let d = Math.min(c + this.b - 1, b.count - 1);
            let e = NaN;
            let f = NaN;
            for (let g = c; g <= d; ++g) {
                let h = b.item(g);
                if (!isNaN_(e)) {
                    if (!isNaN_(h)) {
                        e = Math.min(e, h);
                        f = Math.max(f, h);
                    }
                }
                else {
                    e = h;
                    f = h;
                }
            }
            if (!isNaN_(e)) {
                return [0.5 * (c + d), e, f];
            }
            return [0.5 * (c + d), NaN, NaN];
        }
    }
    AnchoredRadialBucketCalculator.$t = /*@__PURE__*/ markType(AnchoredRadialBucketCalculator, 'AnchoredRadialBucketCalculator', RadialBucketCalculator.$);
    return AnchoredRadialBucketCalculator;
})();
/**
 * @hidden
 */
export let AnchoredRadialSeries = /*@__PURE__*/ (() => {
    class AnchoredRadialSeries extends RadialBase {
        ci() {
            return new AnchoredRadialSeriesView(this);
        }
        n4() {
            super.n4();
            this.wy = null;
            this.w0 = null;
        }
        j5(a, b) {
            let c = this.mh(b);
            if (c == AnchoredRadialSeries.$$p[3]) {
                return this.j6(a, b, this.y0);
            }
            if (c == AnchoredRadialSeries.$$p[0]) {
                return this.j6(a, b, this.yt);
            }
            return super.j5(a, b);
        }
        li(a) {
            let b = this.mh(a);
            if (b == AnchoredRadialSeries.$$p[3]) {
                return this.y0;
            }
            if (b == AnchoredRadialSeries.$$p[0]) {
                return this.yt;
            }
            return super.li(a);
        }
        px(a) {
            super.px(a);
            this.yc = a;
        }
        constructor() {
            super();
            this.yd = null;
            this.yh = null;
            this.zo = { $type: Point_$type, x: 0, y: 0 };
            this.yf = null;
            this.ye = null;
            this.yf = new RadialFrame(3);
            this.yd = new CategoryLineRasterizer();
        }
        jq(a, b) {
            return this.jr(a, b, this.wy, null, this.yi);
        }
        jo(a, b) {
            return this.jp(a, b, this.wy, null, this.yi);
        }
        h4(a, b, c, d, e) {
            if (this.yi == null) {
                return Number.POSITIVE_INFINITY;
            }
            return this.h5(a, b, this.wy, d, e, this.yi.count, null);
        }
        il(a, b, c) {
            let d = this.getEffectiveViewport1(this.cl);
            let e = this.yn(this.wy, this.cl.by, this.cl.bx, d);
            let f = new ScalerParams(0, this.cl.by, this.cl.bx, this.wy.ch, d);
            f.c = this.c1.vw;
            return this.io(this.yi, a, this.wy, f, e, null, b, c);
        }
        uu(a, b, c) {
            if (this.w0 == null || this.wy == null || this.cl == null || this.cl.by.isEmpty || this.cl.bx.isEmpty) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            let d = this.getEffectiveViewport1(this.cl);
            let e = new ScalerParams(0, this.cl.by, this.cl.bx, this.w0.ch, d);
            e.c = this.getEffectiveViewport1(this.cl);
            let f = this.il(a, b, c);
            f = this.w0.ej(f, e);
            let g = this.w1.c(a);
            if (!b && this.wy != null) {
                let h = this.jq(a, c);
                let i = this.jo(a, c);
                let j = this.yn(this.wy, this.cl.by, this.cl.bx, d);
                let k = new ScalerParams(0, this.cl.by, this.cl.bx, this.wy.ch, d);
                k.c = this.c1.vw;
                let l = this.h4(a, h, this.wy, k, j);
                let m = this.h4(a, i, this.wy, k, j);
                if (m <= l) {
                    g = this.wy.ej(i, k) + j;
                }
                else {
                    g = this.wy.ej(h, k) + j;
                }
            }
            let n = this.w1.d(g, f, this.cl.by, this.cl.bx);
            let o = this.w1.e(g, f, this.cl.by, this.cl.bx);
            return { $type: Point_$type, x: n, y: o };
        }
        fv() {
            return this.highlightedItemsSource != null || this.yt != null;
        }
        hb() {
            let a = super.hb();
            {
                let b = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.ad = "ValueMemberPath";
                    $ret.p = true;
                    $ret.y = "HighlightedValueMemberPath";
                    $ret.q = true;
                    return $ret;
                })());
                b.valueResolving = delegateCombine(b.valueResolving, runOn(this, this.y4));
                a.add(b);
            }
            return a;
        }
        y4(a, b) {
            if (this.yt != null) {
                b.value = this.yt;
                return;
            }
            b.value = this.y0;
        }
        get yi() {
            return this.yh;
        }
        set yi(a) {
            if (this.yh != a) {
                let b = this.yh;
                this.yh = a;
                this.raisePropertyChanged("ValueColumn", b, this.yh);
            }
        }
        getDataLegendSeriesContextAt(a, b) {
            let c = new DataLegendSeriesValueInfo();
            c.a = 0;
            c.l = this.il({ $type: Point_$type, x: a, y: b }, false, false);
            c.q = "Value";
            c.r = this.y0 != null ? this.y0 : "Value";
            c.s = this.yw != null ? this.yw : "V:";
            c.t = this.yy != null ? this.yy : "";
            let d = new DataLegendSeriesContext();
            d.e = ((() => {
                let $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
                $ret.add(c);
                return $ret;
            })());
            d.h = this.lh();
            return d;
        }
        get zk() {
            return this.c(AnchoredRadialSeries.y8);
        }
        set zk(a) {
            this.h(AnchoredRadialSeries.y8, a);
        }
        aq(a) {
            if (a != null && a == this.wy && this.yi != null && this.yi.count > 0) {
                return new AxisRange(0, this.yi.count - 1);
            }
            if (a != null && a == this.w0 && this.yi != null && this.yi.count > 0) {
                return new AxisRange(this.yi.minimum, this.yi.maximum);
            }
            return null;
        }
        p5(a, b, c, d) {
            super.p5(a, b, c, d);
            if (this.yc.c0.g$b(a, b, c, d)) {
                this.qm(false);
                this.ph();
            }
            let e = typeCast(NumericAxisBase.$, this.w0);
            switch (b) {
                case AnchoredRadialSeries.$$p[1]:
                case AnchoredRadialSeries.$$p[2]:
                    this.pb();
                    break;
                case "FastItemsSource":
                    if (typeCast(IFastItemsSource_$type, c) !== null) {
                        c.deregisterColumn(this.yi);
                        this.yi = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) !== null) {
                        this.yi = this.da(this.y0);
                        this.yc.cv.e(this.hu);
                    }
                    if (e != null && !e.c1()) {
                        this.yc.cv.e(this.hu);
                        this.qm(this.f0 && c != null);
                    }
                    break;
                case AnchoredRadialSeries.$$p[3]:
                    if (this.dd != null) {
                        this.dd.deregisterColumn(this.yi);
                        this.yi = this.da(this.y0);
                    }
                    break;
                case "ValueColumn":
                    if (e != null && !e.c1()) {
                        this.yc.cv.e(this.hu);
                        this.qm(this.f0 && this.dv);
                    }
                    break;
                case "TrendLineBrush":
                    this.qb(b);
                    break;
                case "TrendLineType":
                    this.ph();
                    break;
            }
        }
        oc(a, b, c, d) {
            switch (a) {
                case 4:
                case 1:
                case 0:
                    this.yc.cv.e(this.hu);
                    break;
            }
            this.yc.c0.g$e(a, b, c, d);
            switch (a) {
                case 4:
                    if (this.w0 != null && !this.w0.c1()) {
                        this.qm(true);
                    }
                    break;
                case 1:
                    if (this.w0 != null && !this.w0.c1()) {
                        this.qm(true);
                    }
                    break;
                case 0:
                    if (this.w0 != null && !this.w0.c1()) {
                        this.qm(true);
                    }
                    break;
                case 2:
                    if (this.y0 != null && this.yc.cv.b > 0 && this.w0 != null && !this.w0.c1()) {
                        this.qm(true);
                    }
                    break;
                case 3:
                    if (d == this.y0) {
                        if (this.w0 != null && !this.w0.c1()) {
                            this.qm(true);
                        }
                    }
                    break;
            }
        }
        gw(a, b, c) {
            let d = super.gw(a, b, c);
            let e = c;
            if (this.dd == null || this.dd.count == 0 || this.wy == null || this.yi == null || this.wy.lf == 0 || this.w0 == null || isInfinity(this.w0.lx) || isInfinity(this.w0.lw) || e.cv.b < 1) {
                d = false;
            }
            return d;
        }
        getOffsetValue() {
            return this.yn(this.wy, this.cl.by, this.cl.bx, this.getEffectiveViewport1(this.cl));
        }
        getCategoryWidth() {
            return this.wy.getCategorySize(this.cl.by, this.cl.bx, this.getEffectiveViewport1(this.cl));
        }
        get_yl() {
            return false;
        }
        get yl() {
            return this.get_yl();
        }
        get_d6() {
            return true;
        }
        get_fq() {
            return this.w0 != null && this.w0.ch;
        }
        yn(a, b, c, d) {
            let e = 0;
            let f = this.preferredCategoryMode(a);
            if (f == 0 && a.categoryMode != 0) {
                f = 1;
            }
            switch (f) {
                case 0:
                    e = 0;
                    break;
                case 1:
                    e = 0.5 * a.getCategorySize(b, c, d);
                    break;
                case 2:
                    e = a.getGroupCenter(this.xt(), b, c, d);
                    break;
            }
            if (a.ch) {
                e = -e;
            }
            return e;
        }
        x1(a, b) {
            let c = b.by;
            let d = b.bx;
            let e = this.getEffectiveViewport1(b);
            let f = this.wy;
            let g = this.w0;
            let h = g.lx;
            let i = g.lw;
            a.f.clear();
            a.n.clear();
            a.q.clear();
            let j = this.vr();
            let k = 0;
            let l = b;
            let m = new CollisionAvoider();
            let n = 0;
            let o = b.cv.d;
            n = this.yn(f, c, d, e);
            l.c0.i = this.w0.no;
            l.c0.h = this.w0.nn;
            l.c0.j = (p, q) => this.yo(p, q, c, d);
            l.c0.k = (p, q) => this.yp(p, q, c, d);
            let p = ((() => {
                let $ret = new Clipper(0, d, false);
                $ret.i = a.q;
                return $ret;
            })());
            let q = ((() => {
                let $ret = new TrendResolutionParams();
                $ret.e = b.cv.b;
                $ret.f = b.cv.c;
                $ret.g = o;
                $ret.a = n;
                $ret.d = this.hu;
                $ret.h = d;
                $ret.i = c;
                return $ret;
            })());
            l.c0.l(a.q, this.yg, this.yi, this.yr, (r) => this.wy.getScaledAngle(r), (r) => this.w0.nu(r), q, p);
            let r = true;
            if (this.ym(b)) {
                o--;
            }
            for (let s = b.cv.c; s <= o; ++s) {
                let t = s;
                if (t * b.cv.b >= this.wy.lf) {
                    t -= intDivide((this.wy.lf), b.cv.b);
                }
                let u = b.cv.getBucket(t);
                if (!isNaN_(u[0])) {
                    u[0] = f.getScaledAngle(u[0]) + n;
                    if (u[1] < h || u[1] > i) {
                        continue;
                    }
                    u[1] = g.nu(u[1]);
                    if (b.cv.b > 1) {
                        if (u[2] < h || u[2] > i) {
                            continue;
                        }
                        u[2] = g.nu(u[2]);
                    }
                    else {
                        u[2] = u[1];
                    }
                    if ((isNaN_(u[1]) || isNaN_(u[2])) && r && this.yl && this.yk()) {
                        o++;
                    }
                    else {
                        r = false;
                    }
                    a.f.add(u);
                    if (j) {
                        let v = Math.min(t * b.cv.b, this.dd.count - 1);
                        let w = this.w1.d(u[0], u[1], c, d);
                        let x = this.w1.e(u[0], u[1], c, d);
                        let y = new Rect(0, w - 5, x - 5, 11, 11);
                        if (!isNaN_(w) && !isNaN_(x) && !isInfinity(w) && !isInfinity(x) && m.tryAdd(y)) {
                            a.n.add({ $type: Point_$type, x: w, y: x });
                            let z = b.cw.item(k);
                            z.al = t;
                            z.ak = v;
                            z.content.item = this.dd.item(v);
                            ++k;
                        }
                    }
                }
                else {
                    if (r && this.yl && this.yk()) {
                        o++;
                    }
                }
            }
            b.cw.count = k;
            return;
        }
        yo(a, b, c, d) {
            return this.w1.d(a, b, c, d);
        }
        yp(a, b, c, d) {
            return this.w1.e(a, b, c, d);
        }
        ym(a) {
            let b = a;
            return !this.yl && b.cv.c == 0 && b.cv.d == this.wy.lf;
        }
        yb(a, b, c) {
            let d = null;
            let e = c.by;
            let f = c.bx;
            if (b > -1 && !e.isEmpty && !f.isEmpty) {
                let g = a._inner[0][0] < f.left - 2000 ? f.left - 10 : NaN;
                let h = f.bottom + 10;
                let i = a._inner[b][0] > f.right + 2000 ? f.right + 10 : NaN;
                let j = f.top - 10;
                d = new Clipper(1, g, h, i, j, false);
            }
            return d;
        }
        y7(a, b, c, d, e) {
            if (a.count > 0 && d.count > 0) {
                if (!e || this.yj()) {
                    a.add(this.zo);
                    a.add(a._inner[0]);
                    d.add(this.zo);
                    d.add(d._inner[0]);
                }
            }
        }
        yk() {
            return !this.yj();
        }
        yj() {
            let a = this.cl.by;
            return !a.containsPoint({ $type: Point_$type, x: 0.5, y: 0.5 });
        }
        n7(a, b) {
            super.n7(a, b);
            let c = b;
            if (a) {
                c.cw.clear();
            }
            c.c0.g$d();
        }
        x4(a, b) {
            this.pt();
            let c = b.by;
            let d = b.bx;
            let e = this.getEffectiveViewport1(b);
            let f = this.u1(b);
            let g = b;
            g.c0.g$g(a.q);
            CategoryMarkerManager.e(this, a.n, g.cw, this.vt);
            this.y3(b, a);
            g.cp();
            this.y2(d, c, e, f, g);
        }
        ya(a, b, c) {
            if (b < a || a < 0 || a > this.yi.count || b < 0 || b > this.yi.count || c == null) {
                return null;
            }
            let d = new Array((b - a) + 1);
            let e = c.cn;
            let f = null;
            if (e) {
                f = c.i$b;
            }
            for (let g = a; g <= b; g++) {
                let h = g;
                if (e) {
                    h = f._inner[h];
                }
                d[g - a] = this.dd.item(g);
            }
            return d;
        }
        y5(a, b, c, d, e, f) {
            let g = this.bo != 1;
            let h = this.cf != 1;
            let i = this.ce != 1;
            this.w7.a3(this.w7.d, d.cn, a, b, c, d, e, f, true);
            this.w7.aa(this.hs);
            let j = this.w7.ax;
            let k = null;
            let l = null;
            let m = null;
            let n = this.dd;
            let o = null;
            let p = null;
            let q = null;
            if (g && this.c1 != null) {
                k = this.c1.dj.getHighlightingInfo(this, n, j.z, j.y, true);
                if (this.c1.dj.isCrossContextHighlight(this)) {
                    o = this.c1.dj.getHighlightingInfo(this, n, j.z, j.y, true);
                }
                j.c = k;
            }
            if (h && this.c1 != null) {
                l = this.c1.dk.getHighlightingInfo(this, n, j.z, j.y, true);
                if (l == null && this.be != null) {
                    l = this.c1.dk.getHighlightingInfo(this.be, this.be.dd, j.z, j.y, true);
                }
                if (this.c1.dk.isCrossContextHighlight(this)) {
                    p = this.c1.dk.getHighlightingInfo(this, n, j.z, j.y, true);
                }
                j.d = l;
            }
            if (i && this.c1 != null) {
                m = this.c1.di.getHighlightingInfo(this, n, j.z, j.y, true);
                if (this.c1.di.isCrossContextHighlight(this)) {
                    q = this.c1.di.getHighlightingInfo(this, n, j.z, j.y, true);
                }
                j.b = m;
            }
            j.h = f;
            this.x2(j);
            this.w7.y(this, k, l, m, f, g, h, i, j.v, this.c1.dj.totalHighWaterMark, j.x, this.c1.dk.totalHighWaterMark, j.t, this.c1.di.totalHighWaterMark);
        }
        y6(a, b, c, d, e, f) {
            let g = this.bo != 1;
            let h = this.cf != 1;
            let i = this.cf != 1;
            this.w7.a3(this.w7.b, d.cn, a, b, c, d, e, f, false);
            this.w7.ab(this.hs);
            let j = this.w7.ay;
            let k = null;
            let l = null;
            let m = null;
            let n = this.dd;
            if (g && this.c1 != null) {
                k = this.c1.dj.getHighlightingInfo(this, n, j.z, j.y, false);
                j.c = k;
            }
            if (h && this.c1 != null) {
                l = this.c1.dk.getHighlightingInfo(this, n, j.z, j.y, false);
                if (l == null && this.be != null) {
                    l = this.c1.dk.getHighlightingInfo(this.be, this.be.dd, j.z, j.y, false);
                }
                j.d = l;
            }
            j.h = f;
            this.x3(j);
            this.w7.z(this, k, l, m, f, g, h, i, b < 0);
        }
        y3(a, b) {
            a.b6 = true;
            this.w7.a1(this, this.xn(), runOn(this, this.wv), this.xr(a), this.xs(a));
            let c = this.w7.d;
            let d = c != null;
            let e = this.wy;
            if (e == null) {
                return;
            }
            let f = this.getEffectiveViewport1(a);
            let g = new ScalerParams(0, a.by, a.bx, e.ch, f);
            let h = this.dd == null ? 0 : this.dd.count;
            let i = a;
            let j = b.f;
            let k = i.cv.c;
            let l = i.cv.d;
            let m = i.cv.b;
            let n = k * m;
            for (let o = 0; o < a.cw.count; o++) {
                let p = a.cw.item(o);
                let q = p.content;
                if (d) {
                    let r = p.al;
                    this.y5(j, r, h, e, g, a.q);
                }
                this.w7.ac(p, q);
            }
        }
        y2(a, b, c, d, e) {
            e.c1(a, b, c, d);
        }
        ra() {
            super.ra();
            if (this.index < 0) {
                return;
            }
            this.yc.c2();
        }
        j9(a, b) {
            if (a == this.yc.c0.g$j) {
                return null;
            }
            return super.j9(a, b);
        }
        fx(a) {
            let b = this.cl.by;
            b = b.copy();
            let c = this.cl.bx;
            let d = !b.isEmpty && !c.isEmpty && this.dd != null ? this.dd.indexOf(a) : -1;
            if (this.wy == null || this.yi == null || this.w0 == null) {
                return false;
            }
            if (d < 0 || d > this.yi.count - 1) {
                return false;
            }
            let e = this.wy.getScaledAngle(d);
            let f = this.w0.nu(this.yi.item(d));
            if (isNaN_(f)) {
                f = (this.w0.nn + this.w0.no) / 2;
            }
            let g = 0.5 + (Math.cos(e) * f);
            let h = 0.5 + (Math.sin(e) * f);
            if (!isNaN_(g)) {
                if (g < b.left + 0.1 * b.width) {
                    g = g + 0.4 * b.width;
                    b.x = g - 0.5 * b.width;
                }
                if (g > b.right - 0.1 * b.width) {
                    g = g - 0.4 * b.width;
                    b.x = g - 0.5 * b.width;
                }
            }
            if (!isNaN_(h)) {
                if (h < b.top + 0.1 * b.height) {
                    h = h + 0.4 * b.height;
                    b.y = h - 0.5 * b.height;
                }
                if (h > b.bottom - 0.1 * b.height) {
                    h = h - 0.4 * b.height;
                    b.y = h - 0.5 * b.height;
                }
            }
            if (this.ct != null) {
                this.ct.au(this.c1, b, true);
            }
            return d >= 0;
        }
        qo(a, b) {
            super.qo(a, b);
            if (!this.gj) {
                this.cl.a4(b);
                return;
            }
            this.cl.a4(b);
            let c = typeCast(AnchoredRadialSeriesView.$, this.ck);
            c.cv.e(this.hu);
            if (this.dt(this.ck)) {
                return;
            }
            if (!this.gc) {
                this.yf = new RadialFrame(3);
                this.x1(this.yf, c);
            }
            this.gc = false;
            this.x4(this.yf, c);
            this.gj = false;
        }
        ql(a, b, c, d, e) {
            super.ql(a, b, c, d, e);
            let f = this.a2.a$i.item(d);
            let g = f;
            g.cv.e(this.hu);
            f.a3(c);
            if (this.dt(g)) {
                return;
            }
            if (this.ye == null) {
                this.ye = new RadialFrame(3);
            }
            this.ye.v();
            this.x1(this.ye, g);
            this.x4(this.ye, g);
        }
        ow(a) {
            super.ow(a);
            this.a4.exportTrendlineData(this, a, this.yc.c0.g$j);
        }
    }
    AnchoredRadialSeries.$t = /*@__PURE__*/ markType(AnchoredRadialSeries, 'AnchoredRadialSeries', RadialBase.$);
    AnchoredRadialSeries.y8 = /*@__PURE__*/ DependencyProperty.i("ActualTrendLineBrush", Brush.$, AnchoredRadialSeries.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue)));
    AnchoredRadialSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, AnchoredRadialSeries, 'raisePropertyChanged', ['HighlightedValueMemberPath:yt:y9', [2, null], 'ValueMemberAsLegendLabel:yw:zh', [2, null], 'ValueMemberAsLegendUnit:yy:zi', [2, null], 'ValueMemberPath:y0:zj', [2, null], 'TrendLineType:yg:zf', [TrendLineType_$type, /*@__PURE__*/ enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness:yq:ze', [1, 1.5], 'TrendLinePeriod:yr:zd', [1, 7], 'TrendLineZIndex:ys:zg', [1, 1], 'TrendLineBrush:zl:za', [Brush.$, null], 'TrendLineDashArray:zm:zb', [DoubleCollection.$], 'TrendLineDashCap:zn:zc', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)]]);
    return AnchoredRadialSeries;
})();
/**
 * @hidden
 */
export let AnchoredRadialSeriesView = /*@__PURE__*/ (() => {
    class AnchoredRadialSeriesView extends RadialBaseView {
        constructor(a) {
            super(a);
            this.cz = null;
            this.c0 = null;
            this.cv = new AnchoredRadialBucketCalculator(this);
            this.cz = a;
            this.c0 = new RadialTrendLineManager();
        }
        c1(a, b, c, d) {
        }
        c2() {
            this.cz.zk = null;
            if (this.cz.zl != null) {
                this.cz.zk = this.cz.zl;
            }
            else {
                this.cz.zk = this.cz.tw;
            }
        }
        a7(a, b) {
            if (a.d) {
                if (!b) {
                }
                if (this.cz.yg != 0 && !b) {
                    let c = this.c0.g$j;
                    c.ad = this.cz.yq;
                    c._stroke = this.cz.zk;
                    c.ai = this.cz.zm;
                    c.aj = this.cz.zn;
                    a.v(c);
                }
            }
            super.a7(a, b);
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'>";
            if (this.cz.wy.f0 != null) {
                a += "<span>${item." + this.cz.wy.f0 + "}</span><br/>";
            }
            a += "<span";
            let b = this.e.a2.a$t(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.cz.title + ": </span><span class='ui-priority-primary'>" + "${item." + this.cz.y0 + "}</span></div>";
            return a;
        }
    }
    AnchoredRadialSeriesView.$t = /*@__PURE__*/ markType(AnchoredRadialSeriesView, 'AnchoredRadialSeriesView', RadialBaseView.$);
    return AnchoredRadialSeriesView;
})();
