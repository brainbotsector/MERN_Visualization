/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnnotationLayer } from "./AnnotationLayer";
import { Axis } from "./Axis";
import { DependencyProperty } from "igniteui-react-core";
import { DataToolTipLayerGroupingMode_$type } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { Base, enumGetBox, EnumUtil, fromEnum, typeCast, String_$type, typeGetValue, Point_$type, Array_$type, markType, markDep, runOn, TypeRegistrar } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { RectUtil } from "igniteui-react-core";
import { DataTooltipGroupedPositionX_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionY_$type } from "igniteui-react-core";
import { DataAbbreviationMode_$type } from "igniteui-react-core";
import { DataLegendValueMode_$type } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-react-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-react-core";
import { DataLegendSummaryType_$type } from "igniteui-react-core";
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
import { DataLegendUnitsMode_$type } from "igniteui-react-core";
import { DataLegendLabelMode_$type } from "igniteui-react-core";
import { DataToolTipLayerFrame } from "./DataToolTipLayerFrame";
import { Dictionary$2 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { DataToolTipSeriesInfo } from "./DataToolTipSeriesInfo";
import { DataContext } from "igniteui-react-core";
import { DataTooltipCollisionInfo } from "./DataTooltipCollisionInfo";
import { DeviceUtils } from "igniteui-react-core";
import { HashSet$1 } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { stringEmpty } from "igniteui-react-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { PointerTooltip } from "./PointerTooltip";
import { IOnDemandRender_$type } from "igniteui-react-core";
/**
 * @hidden
 */
export let DataToolTipLayer = /*@__PURE__*/ (() => {
    class DataToolTipLayer extends AnnotationLayer {
        bb() {
            return new DataToolTipLayer();
        }
        get_ec() {
            return true;
        }
        constructor() {
            super();
            this.y1 = 1;
            this.z6 = new Dictionary$2(String_$type, Base.$, 0);
            this.z7 = new List$1(String_$type, 0);
            this.yt = 8;
            this.yx = 11;
            this.zh = null;
            this.y9 = null;
            this.y8 = null;
            this.zc = null;
            this.ze = null;
            this.zb = null;
            this.zd = null;
            this.zg = null;
            this.zf = null;
            this.za = null;
            let a = new DataToolTipLayerFrame();
            let b = new DataToolTipLayerFrame();
            let c = new DataToolTipLayerFrame();
            this.vr = a;
            this.vq = b;
            this.vs = c;
            this.ab = DataToolTipLayer.$;
        }
        ci() {
            return new DataToolTipLayerView(this);
        }
        px(a) {
            super.px(a);
            this.y5 = a;
        }
        get_en() {
            return true;
        }
        get y2() {
            return this.y1;
        }
        set y2(a) {
            let b = this.y1;
            this.y1 = a;
            if (b != this.y1) {
                this.raisePropertyChanged("ActualGroupingMode", enumGetBox(DataToolTipLayerGroupingMode_$type, b), enumGetBox(DataToolTipLayerGroupingMode_$type, this.y1));
            }
        }
        y4() {
            let a = true;
            let b = true;
            let c = true;
            let d = true;
            if (this.y3 != 0) {
                return this.y3;
            }
            let e = this.yk();
            if (e != null) {
                for (let f of fromEnum(e.db())) {
                    if (!f.ed && !f.fh) {
                        a = false;
                    }
                    if (!f.ed && !f.fa) {
                        b = false;
                    }
                    if (!f.ed && !f.fi) {
                        c = false;
                    }
                    if (!f.ed && !f.fe) {
                        d = false;
                    }
                }
            }
            if (a || b || c || d) {
                return 2;
            }
            return 1;
        }
        p5(a, b, c, d) {
            super.p5(a, b, c, d);
            switch (b) {
                case DataToolTipLayer.$$p[41]:
                    this.qm(true);
                    break;
                case DataToolTipLayer.$$p[48]:
                    this.qm(true);
                    break;
                case DataToolTipLayer.$$p[12]:
                    this.y2 = this.y4();
                    break;
                case "ActualGroupingMode":
                    this.qm(true);
                    break;
                case DataToolTipLayer.$$p[10]:
                    this.yu = this.yw();
                    break;
                case DataToolTipLayer.$$p[11]:
                    this.yy = this.y0();
                    break;
                case "SeriesViewer":
                    this.y5.cl();
                    break;
                case DataToolTipLayer.$$p[30]:
                case DataToolTipLayer.$$p[24]:
                case DataToolTipLayer.$$p[5]:
                case DataToolTipLayer.$$p[23]:
                case DataToolTipLayer.$$p[4]:
                case DataToolTipLayer.$$p[49]:
                case DataToolTipLayer.$$p[51]:
                case DataToolTipLayer.$$p[52]:
                case DataToolTipLayer.$$p[53]:
                case DataToolTipLayer.$$p[50]:
                case DataToolTipLayer.$$p[56]:
                case DataToolTipLayer.$$p[55]:
                case DataToolTipLayer.$$p[54]:
                case DataToolTipLayer.$$p[57]:
                case DataToolTipLayer.$$p[58]:
                case DataToolTipLayer.$$p[62]:
                case DataToolTipLayer.$$p[61]:
                case DataToolTipLayer.$$p[60]:
                case DataToolTipLayer.$$p[59]:
                case "ValueTextStyle":
                case DataToolTipLayer.$$p[16]:
                case DataToolTipLayer.$$p[15]:
                case DataToolTipLayer.$$p[13]:
                case DataToolTipLayer.$$p[14]:
                case DataToolTipLayer.$$p[17]:
                case DataToolTipLayer.$$p[22]:
                case DataToolTipLayer.$$p[20]:
                case DataToolTipLayer.$$p[21]:
                case DataToolTipLayer.$$p[18]:
                case DataToolTipLayer.$$p[19]:
                case "HeaderTextStyle":
                case DataToolTipLayer.$$p[8]:
                case DataToolTipLayer.$$p[9]:
                case DataToolTipLayer.$$p[6]:
                case DataToolTipLayer.$$p[7]:
                case "GroupTextStyle":
                case DataToolTipLayer.$$p[34]:
                case "SummaryTitleTextStyle":
                case DataToolTipLayer.$$p[37]:
                case DataToolTipLayer.$$p[36]:
                case DataToolTipLayer.$$p[35]:
                case DataToolTipLayer.$$p[33]:
                case DataToolTipLayer.$$p[40]:
                case "SummaryValueTextStyle":
                case DataToolTipLayer.$$p[32]:
                case DataToolTipLayer.$$p[31]:
                case "SummaryLabelTextStyle":
                case DataToolTipLayer.$$p[39]:
                case DataToolTipLayer.$$p[38]:
                case "SummaryUnitsTextStyle":
                case DataToolTipLayer.$$p[0]:
                case DataToolTipLayer.$$p[1]:
                case DataToolTipLayer.$$p[44]:
                case DataToolTipLayer.$$p[47]:
                case DataToolTipLayer.$$p[45]:
                case DataToolTipLayer.$$p[46]:
                case "UnitsTextStyle":
                case DataToolTipLayer.$$p[43]:
                case DataToolTipLayer.$$p[42]:
                case "TitleTextStyle":
                case DataToolTipLayer.$$p[25]:
                case DataToolTipLayer.$$p[26]:
                case DataToolTipLayer.$$p[27]:
                case "LabelTextStyle":
                    this.adt(b, c, d);
                    break;
            }
        }
        adt(a, b, c) {
            if (!this.z6.containsKey(a)) {
                this.z7.add(a);
                this.z6.addItem(a, c);
            }
            else {
                this.z6.item(a, c);
            }
            this.qm(true);
        }
        adx(a, b) {
            switch (a) {
                case DataToolTipLayer.$$p[12]:
                    this.y3 = EnumUtil.getEnumValue(DataToolTipLayerGroupingMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[28]:
                    this.aab = b;
                    break;
                case DataToolTipLayer.$$p[29]:
                    this.aac = b;
                    break;
                case DataToolTipLayer.$$p[2]:
                    this.z9 = b;
                    break;
                case DataToolTipLayer.$$p[3]:
                    this.aaa = b;
                    break;
                case DataToolTipLayer.$$p[10]:
                    this.yv = EnumUtil.getEnumValue(DataTooltipGroupedPositionX_$type, b);
                    break;
                case DataToolTipLayer.$$p[11]:
                    this.yz = EnumUtil.getEnumValue(DataTooltipGroupedPositionY_$type, b);
                    break;
                case DataToolTipLayer.$$p[30]:
                    this.z1 = b;
                    break;
                case DataToolTipLayer.$$p[24]:
                    this.yi = b;
                    break;
                case DataToolTipLayer.$$p[5]:
                    this.yd = b;
                    break;
                case DataToolTipLayer.$$p[23]:
                    this.yh = b;
                    break;
                case DataToolTipLayer.$$p[4]:
                    this.yc = b;
                    break;
                case DataToolTipLayer.$$p[49]:
                    this.ym = EnumUtil.getEnumValue(DataAbbreviationMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[51]:
                    this.abb = typeGetValue(b);
                    break;
                case DataToolTipLayer.$$p[52]:
                    this.abc = typeGetValue(b);
                    break;
                case DataToolTipLayer.$$p[53]:
                    this.ys = EnumUtil.getEnumValue(DataLegendValueMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[50]:
                    this.adb = b;
                    break;
                case DataToolTipLayer.$$p[56]:
                    this.z3 = b;
                    break;
                case DataToolTipLayer.$$p[55]:
                    this.adh = b;
                    break;
                case DataToolTipLayer.$$p[54]:
                    this.yj = b;
                    break;
                case DataToolTipLayer.$$p[57]:
                    this.agf = b;
                    break;
                case DataToolTipLayer.$$p[58]:
                    this.z4 = b;
                    break;
                case DataToolTipLayer.$$p[62]:
                    this.adq = b;
                    break;
                case DataToolTipLayer.$$p[61]:
                    this.z5 = b;
                    break;
                case DataToolTipLayer.$$p[60]:
                    this.agg = b;
                    break;
                case DataToolTipLayer.$$p[59]:
                    this.afy = b;
                    break;
                case "ValueTextStyle":
                    this.zr = b;
                    break;
                case DataToolTipLayer.$$p[16]:
                    this.abz = b;
                    break;
                case DataToolTipLayer.$$p[15]:
                    this.yg = b;
                    break;
                case DataToolTipLayer.$$p[13]:
                    this.abv = b;
                    break;
                case DataToolTipLayer.$$p[14]:
                    this.yn = EnumUtil.getEnumValue(DataLegendHeaderDateMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[17]:
                    this.yo = EnumUtil.getEnumValue(DataLegendHeaderTimeMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[22]:
                    this.ab4 = b;
                    break;
                case DataToolTipLayer.$$p[20]:
                    this.afq = b;
                    break;
                case DataToolTipLayer.$$p[21]:
                    this.af9 = b;
                    break;
                case DataToolTipLayer.$$p[18]:
                    this.af8 = b;
                    break;
                case DataToolTipLayer.$$p[19]:
                    this.zu = b;
                    break;
                case "HeaderTextStyle":
                    this.zj = b;
                    break;
                case DataToolTipLayer.$$p[8]:
                    this.afp = b;
                    break;
                case DataToolTipLayer.$$p[9]:
                    this.af7 = b;
                    break;
                case DataToolTipLayer.$$p[6]:
                    this.af6 = b;
                    break;
                case DataToolTipLayer.$$p[7]:
                    this.zt = b;
                    break;
                case "GroupTextStyle":
                    this.zi = b;
                    break;
                case DataToolTipLayer.$$p[34]:
                    this.aft = b;
                    break;
                case "SummaryTitleTextStyle":
                    this.zm = b;
                    break;
                case DataToolTipLayer.$$p[37]:
                    this.yq = EnumUtil.getEnumValue(DataLegendSummaryType_$type, b);
                    break;
                case DataToolTipLayer.$$p[36]:
                    this.acn = b;
                    break;
                case DataToolTipLayer.$$p[35]:
                    this.agc = b;
                    break;
                case DataToolTipLayer.$$p[33]:
                    this.agb = b;
                    break;
                case DataToolTipLayer.$$p[40]:
                    this.afv = b;
                    break;
                case "SummaryValueTextStyle":
                    this.zo = b;
                    break;
                case DataToolTipLayer.$$p[32]:
                    this.aci = b;
                    break;
                case DataToolTipLayer.$$p[31]:
                    this.afs = b;
                    break;
                case "SummaryLabelTextStyle":
                    this.zl = b;
                    break;
                case DataToolTipLayer.$$p[39]:
                    this.act = b;
                    break;
                case DataToolTipLayer.$$p[38]:
                    this.afu = b;
                    break;
                case "SummaryUnitsTextStyle":
                    this.zn = b;
                    break;
                case DataToolTipLayer.$$p[0]:
                    this.af5 = b;
                    break;
                case DataToolTipLayer.$$p[1]:
                    this.y7 = EnumUtil.getEnumValue(LegendItemBadgeShape_$type, b);
                    break;
                case DataToolTipLayer.$$p[44]:
                    this.yr = EnumUtil.getEnumValue(DataLegendUnitsMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[47]:
                    this.ac4 = b;
                    break;
                case DataToolTipLayer.$$p[45]:
                    this.afx = b;
                    break;
                case DataToolTipLayer.$$p[46]:
                    this.age = b;
                    break;
                case "UnitsTextStyle":
                    this.zq = b;
                    break;
                case DataToolTipLayer.$$p[43]:
                    this.agd = b;
                    break;
                case DataToolTipLayer.$$p[42]:
                    this.afw = b;
                    break;
                case "TitleTextStyle":
                    this.zp = b;
                    break;
                case DataToolTipLayer.$$p[25]:
                    this.yp = EnumUtil.getEnumValue(DataLegendLabelMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[26]:
                    this.afr = b;
                    break;
                case DataToolTipLayer.$$p[27]:
                    this.aga = b;
                    break;
                case "LabelTextStyle":
                    this.zk = b;
                    break;
            }
        }
        adu(a) {
            for (let b = 0; b < this.z7.count; b++) {
                let c = this.z7._inner[b];
                a.updatePropertyByName(c, this.z6.item(c));
            }
        }
        w3(a, b) {
            {
                if (!this.at.c) {
                    this.qm(b);
                }
            }
        }
        w4(a, b) {
            if (!this.at.c) {
                this.qm(b);
            }
        }
        w6(a, b) {
            super.w6(a, b);
            this.y1 = this.y4();
            let c = a;
            let d = this.y5.b9;
            let e = this.z2;
            let f = false;
            c.m.clear();
            c.i.clear();
            c.l.clear();
            c.g.clear();
            c.f.clear();
            c.k.clear();
            c.j.clear();
            c.h.clear();
            if (isNaN_(this.x9.x) && isNaN_(this.x9.y)) {
                d.count = 0;
                return;
            }
            {
                if (this.y2 == 2) {
                    let g = 0;
                    {
                        for (let h of fromEnum(this.c1.series)) {
                            if (this.vx(h)) {
                                this.adw(h, c, e, f, g);
                                g++;
                            }
                            if (h.isStacked) {
                                h.o0((i) => {
                                    if (this.vx(i)) {
                                        this.adw(i, c, e, f, g);
                                        g++;
                                    }
                                    if (i.d2) {
                                        i.oy((j) => {
                                            if (this.vx(j)) {
                                                this.adw(j, c, e, f, g);
                                                g++;
                                            }
                                            return true;
                                        });
                                    }
                                    return true;
                                });
                            }
                            if (h.d2) {
                                h.oy((i) => {
                                    if (this.vx(i)) {
                                        this.adw(i, c, e, f, g);
                                        g++;
                                    }
                                    return true;
                                });
                            }
                        }
                        this.ads(c);
                    }
                    d.count = g;
                }
                else {
                    let i = this.yk();
                    let j = this.z8(i);
                    let k = this.y6(i, j, e);
                    this.adv(k, c, e);
                }
            }
        }
        z8(a) {
            let b = new List$1(Series.$, 0);
            if (a == null) {
                return b;
            }
            for (let c of fromEnum(a.de)) {
                b.add(c);
            }
            return b;
        }
        yk() {
            if (this.yl != null) {
                return this.yl;
            }
            if (this.c1 == null) {
                return null;
            }
            for (let a of fromEnum(this.c1.series)) {
                if (a.ej) {
                    let b = a.as();
                    if (b != null && b.co()) {
                        return b;
                    }
                }
            }
            for (let c of fromEnum(this.c1.series)) {
                if (!c.ej) {
                    let d = c.ag();
                    let e = d != null && d.length > 0 ? d[0] : null;
                    if (e != null && e.co()) {
                        return e;
                    }
                }
            }
            return null;
        }
        y6(a, b, c) {
            let d = 1.7976931348623157E+308;
            let e = -1.7976931348623157E+308;
            let f = new List$1(DataContext.$, 0);
            let g = new List$1(Base.$, 0);
            let h = false;
            let i = true;
            let j = { $type: Point_$type, x: NaN, y: NaN };
            let k = 0;
            let l = 0;
            for (let m = 0; m < b.count; m++) {
                let n = b.item(m);
                k = n.c1.l;
                l = n.c1.m;
                if (n.ej) {
                    let o = n;
                    let p = new List$1(Series.$, 0);
                    if (o.isStacked) {
                        o.o0((q) => {
                            p.add(q);
                            if (q.d2) {
                                q.oy((r) => {
                                    p.add(r);
                                    return true;
                                });
                            }
                            return true;
                        });
                    }
                    else if (o.d2) {
                        p.add(o);
                        o.oy((q) => {
                            p.add(q);
                            return true;
                        });
                    }
                    else {
                        p.add(o);
                    }
                    for (let q = 0; q < p.count; q++) {
                        let r = p._inner[q];
                        let s = p._inner[q];
                        if (!r.categoryAxis.co()) {
                            continue;
                        }
                        if (i) {
                            h = s.isVertical;
                        }
                        else {
                            if (h != s.isVertical) {
                                continue;
                            }
                        }
                        let t = this.wz(s);
                        if (!t.c) {
                            continue;
                        }
                        j = s.up(t.d);
                        let u = s.uu(t.d, c, false);
                        if (h) {
                            if (!isNaN_(u.y)) {
                                d = Math.min(d, u.y);
                                e = Math.max(e, u.y);
                            }
                        }
                        else {
                            if (!isNaN_(u.x)) {
                                d = Math.min(d, u.x);
                                e = Math.max(e, u.x);
                            }
                        }
                    }
                }
                else {
                    let v = n.ag();
                    for (let w = 0; w < v.length; w++) {
                        if (!v[w].co()) {
                            continue;
                        }
                    }
                    let x = n.uu(this.x9, c, false);
                    j = n.up(this.x9);
                    if (h) {
                        if (!isNaN_(x.y)) {
                            d = Math.min(d, x.y);
                            e = Math.max(e, x.y);
                        }
                    }
                    else {
                        if (!isNaN_(x.x)) {
                            d = Math.min(d, x.x);
                            e = Math.max(e, x.x);
                        }
                    }
                }
                let y = null;
                let z = n.j2(this.x9);
                if (n.eo && z != null) {
                    y = n.av(z);
                }
                else {
                    y = new DataContext();
                    y.item = z;
                    y.series = n;
                }
                f.add(y);
            }
            let aa = 0;
            let ab = 0;
            if (h) {
                ab = (d + e) / 2;
                aa = this.u9.right;
                if (!isNaN_(j.x)) {
                    aa = j.x;
                }
                if (ab < 0 || ab > this.u9.bottom) {
                    ab = NaN;
                }
            }
            else {
                aa = (d + e) / 2;
                if (!isNaN_(j.y)) {
                    ab = j.y;
                }
                if (aa < 0 || aa > this.u9.right) {
                    aa = NaN;
                }
            }
            let ac = new DataToolTipSeriesInfo();
            ac.f = { $type: Point_$type, x: aa, y: ab };
            ac.e = { $type: Point_$type, x: j.x, y: j.y };
            ac.b = f;
            ac.a = h;
            return ac;
        }
        o3() {
            this.x9 = { $type: Point_$type, x: NaN, y: NaN };
            this.qm(false);
            this.y5.cj(false);
        }
        o4() {
            this.x9 = { $type: Point_$type, x: NaN, y: NaN };
            this.qm(false);
            this.y5.cj(true);
        }
        get af2() {
            let a = RectUtil.n(this.cl.bx);
            let b = new Size(1, this.cl.bx.width, this.cl.bx.height);
            return new Rect(3, a, b);
        }
        get af1() {
            let a = RectUtil.n(this.cl.bx);
            let b = new Size(1, this.cl.bx.width, this.cl.bx.height);
            return new Rect(3, this.y5.cm(a), b);
        }
        get af0() {
            let a = new Rect(0, 0, 0, this.c1.m, this.c1.l);
            let b = RectUtil.n(a);
            let c = new Size(1, a.width, a.height);
            return new Rect(3, this.y5.cm(b), c);
        }
        get af4() {
            let a = { $type: Point_$type, x: 0, y: 0 };
            return new Rect(3, a, this.y5.cr());
        }
        af3() {
            return this.af2;
        }
        zy(a, b, c) {
            if (Rect.l_op_Equality(a, Rect.empty)) {
                return false;
            }
            let d = a.top;
            return c < d;
        }
        zv(a, b, c, d) {
            if (Rect.l_op_Equality(a, Rect.empty)) {
                return false;
            }
            let e = a.bottom;
            return c + d.height >= e;
        }
        zw(a, b, c) {
            if (Rect.l_op_Equality(a, Rect.empty)) {
                return false;
            }
            let d = a.left;
            return c < d;
        }
        zx(a, b, c, d) {
            if (Rect.l_op_Equality(a, Rect.empty)) {
                return false;
            }
            let e = a.right;
            return c + d.width > e;
        }
        aa1(a, b) {
            return a.top + b;
        }
        aaz(a, b, c) {
            return a.bottom - c.height - b;
        }
        aa0(a, b) {
            return ((a.bottom + a.top) / 2) - (b.height / 2);
        }
        aba(a, b, c, d, e) {
            let f = c.y - d.height - b;
            return f;
        }
        aa8(a, b, c, d, e) {
            let f = c.y + b;
            return f;
        }
        aa9(a, b, c, d, e) {
            let f = c.y - (d.height / 2);
            return f;
        }
        aa4(a, b, c, d, e) {
            let f = c.y - d.height;
            f = f - b;
            return f;
        }
        aa2(a, b, c, d, e) {
            let f = c.y;
            f = f + b;
            return f;
        }
        aa3(a, b, c, d, e) {
            let f = c.y - (d.height / 2);
            return f;
        }
        aak(a, b) {
            return a.left + b;
        }
        aam(a, b, c) {
            return (a.right - (c.width)) - b;
        }
        aal(a, b, c) {
            return ((a.right + a.left) / 2) - (c.width / 2) + b;
        }
        aat(a, b, c, d, e) {
            let f = (c.x - d.width) - b;
            return f;
        }
        aav(a, b, c, d, e) {
            let f = c.x + b;
            return f;
        }
        aau(a, b, c, d, e) {
            let f = (c.x - (d.width / 2));
            f = f + b;
            return f;
        }
        aaq(a, b, c, d, e) {
            let f = c.x - d.width;
            f = f - b;
            return f;
        }
        aas(a, b, c, d, e) {
            let f = c.x;
            f = f + b;
            return f;
        }
        aar(a, b, c, d, e) {
            let f = c.x - (d.width / 2);
            f = f + b;
            return f;
        }
        aag(a, b, c, d, e, f, g, h) {
            switch (a) {
                case 1:
                    {
                        return this.aa4(e, b, h, f, true);
                    }
                case 2:
                    {
                        return this.aa2(e, b, h, f, true);
                    }
                case 3:
                    {
                        return this.aa3(e, b, h, f, true);
                    }
                case 5: return this.aa5(e, c, b, h, f);
                case 6: return this.aa6(e, c, b, h, f);
                case 4: return this.aa7(e, c, b, h, f);
                case 8: return this.aaw(e, c, b, h, f);
                case 9: return this.aax(e, c, b, h, f);
                case 7: return this.aay(e, c, b, h, f);
                case 13: return this.aa1(d, b);
                case 14: return this.aaz(d, b, f);
                case 15: return this.aa0(d, f);
                case 10: return this.aba(e, b, g, f, true);
                case 12: return this.aa9(e, b, g, f, true);
                case 11:
                default: return this.aa8(e, b, g, f, true);
            }
        }
        aan(a, b, c, d, e) {
            let f = d.x;
            f = f + b / 2;
            f = f - e.width;
            f = f - c;
            return f;
        }
        aao(a, b, c, d, e) {
            let f = d.x;
            f = f + b / 2;
            f = f - e.width / 2;
            f = f + c;
            return f;
        }
        aap(a, b, c, d, e) {
            let f = d.x;
            f = f + b / 2;
            f = f + c;
            return f;
        }
        aah(a, b, c, d, e) {
            let f = d.x;
            f = f - b / 2;
            f = f - e.width;
            f = f - c;
            return f;
        }
        aai(a, b, c, d, e) {
            let f = d.x;
            f = f - b / 2;
            f = f - e.width / 2;
            f = f + c;
            return f;
        }
        aaj(a, b, c, d, e) {
            let f = d.x;
            f = f - b / 2;
            f = f + c;
            return f;
        }
        aay(a, b, c, d, e) {
            let f = d.y;
            f = f + b / 2;
            f = f - e.height;
            f = f - c;
            return f;
        }
        aax(a, b, c, d, e) {
            let f = d.y;
            f = f + b / 2;
            f = f - e.height / 2;
            f = f + c;
            return f;
        }
        aaw(a, b, c, d, e) {
            let f = d.y;
            f = f + b / 2;
            f = f + c;
            return f;
        }
        aa7(a, b, c, d, e) {
            let f = d.y;
            f = f - b / 2;
            f = f - e.height;
            f = f - c;
            return f;
        }
        aa6(a, b, c, d, e) {
            let f = d.y;
            f = f - b / 2;
            f = f - e.height / 2;
            f = f + c;
            return f;
        }
        aa5(a, b, c, d, e) {
            let f = d.y;
            f = f - b / 2;
            f = f + c;
            return f;
        }
        aaf(a, b, c, d, e, f, g, h) {
            switch (a) {
                case 10: return this.aat(e, b, g, f, true);
                case 11: return this.aav(e, b, g, f, true);
                case 12: return this.aau(e, b, g, f, true);
                case 13: return this.aak(d, b);
                case 14: return this.aam(e, b, f);
                case 15: return this.aal(e, b, f);
                case 5: return this.aaj(e, c, b, h, f);
                case 6: return this.aai(e, c, b, h, f);
                case 4: return this.aah(e, c, b, h, f);
                case 8: return this.aap(e, c, b, h, f);
                case 9: return this.aao(e, c, b, h, f);
                case 7: return this.aan(e, c, b, h, f);
                case 1:
                    {
                        return this.aaq(e, b, h, f, true);
                    }
                case 3:
                    {
                        return this.aar(e, b, h, f, true);
                    }
                case 2:
                default:
                    {
                        return this.aas(e, b, h, f, true);
                    }
            }
        }
        afz(a, b, c, d) {
            let e = this.yu;
            let f = this.yy;
            let g = this.yk();
            let h = 0;
            if (g != null && g.cb && this.c1 != null) {
                h = g.getCategorySize(this.c1.vh, this.u9, this.getEffectiveViewport());
                if (g.categoryMode == 0) {
                    h = 0;
                }
            }
            let i = this.aad(e);
            let j = this.aae(f);
            let k = this.aaf(e, i, h, this.af2, a, b, c, d);
            let l = this.aag(f, j, h, this.af2, a, b, c, d);
            let m = this.zz(a, i, k, b);
            let n = this.z0(a, j, l, b);
            if (!m) {
                let o = this.ye(e);
                let p = 0;
                while (!m && p < o.length) {
                    e = o[p];
                    i = this.aad(e);
                    k = this.aaf(e, i, h, this.af2, a, b, c, d);
                    m = this.zz(a, i, k, b);
                    p++;
                }
            }
            if (!n) {
                let q = this.yf(f);
                let r = 0;
                while (!n && r < q.length) {
                    f = q[r];
                    j = this.aae(f);
                    l = this.aag(f, j, h, this.af2, a, b, c, d);
                    n = this.z0(a, j, l, b);
                    r++;
                }
            }
            return { $type: Point_$type, x: k, y: l };
        }
        aae(a) {
            if (!isNaN_(this.aac)) {
                return this.aac;
            }
            switch (a) {
                case 1: return this.aaa;
                case 2: return this.aaa;
                case 3: return 0;
                case 4: return this.aaa;
                case 5: return this.aaa;
                case 6: return this.aaa;
                case 7: return this.aaa;
                case 8: return this.aaa;
                case 9: return 0;
                case 10: return this.aaa;
                case 11: return this.aaa;
                case 12: return 0;
                case 13: return this.aaa;
                case 14: return this.aaa;
                case 15: return 0;
            }
            return this.aaa;
        }
        aad(a) {
            if (!isNaN_(this.aab)) {
                return this.aab;
            }
            switch (a) {
                case 4: return this.z9;
                case 6: return 0;
                case 5: return this.z9;
                case 13: return this.z9;
                case 15: return 0;
                case 14: return this.z9;
                case 7: return this.z9;
                case 9: return 0;
                case 8: return this.z9;
                case 1: return this.z9;
                case 3: return 0;
                case 2: return this.z9;
                case 10: return this.z9;
                case 12: return 0;
                case 11: return this.z9;
            }
            return this.z9;
        }
        yf(a) {
            let b = [a];
            switch (a) {
                case 1:
                    b = [2, 3, 13, 14];
                    break;
                case 2:
                    b = [1, 3, 14, 13];
                    break;
                case 3:
                    b = [1, 2];
                    break;
                case 4:
                    b = [8, 7, 3, 13, 14];
                    break;
                case 5:
                    b = [7, 8, 3, 13, 14];
                    break;
                case 6:
                    b = [9, 8, 4, 3];
                    break;
                case 7:
                    b = [5, 4, 2, 14, 13];
                    break;
                case 8:
                    b = [4, 5, 3, 14, 13];
                    break;
                case 9:
                    b = [6, 4, 8, 3];
                    break;
                case 10:
                    b = [11, 12, 2, 1, 3, 13, 14];
                    break;
                case 11:
                    b = [10, 12, 1, 2, 3, 14, 13];
                    break;
                case 12:
                    b = [10, 11];
                    break;
                case 13: break;
                case 14: break;
                case 15: break;
            }
            return b;
        }
        ye(a) {
            let b = [a];
            switch (a) {
                case 1:
                    b = [2, 3, 13, 14];
                    break;
                case 2:
                    b = [1, 3, 14, 13];
                    break;
                case 3:
                    b = [1, 2];
                    break;
                case 4:
                    b = [8, 7, 3, 13, 14];
                    break;
                case 5:
                    b = [7, 8, 1, 14, 13];
                    break;
                case 6:
                    b = [9, 8, 4, 3];
                    break;
                case 7:
                    b = [5, 4, 2, 14, 13];
                    break;
                case 8:
                    b = [4, 5, 3, 13, 14];
                    break;
                case 9:
                    b = [6, 4, 8, 3];
                    break;
                case 10:
                    b = [11, 12, 2, 1, 3, 13, 14];
                    break;
                case 11:
                    b = [10, 12, 1, 2, 3, 14, 13];
                    break;
                case 12:
                    b = [10, 11];
                    break;
                case 13: break;
                case 14: break;
                case 15: break;
            }
            return b;
        }
        zz(a, b, c, d) {
            return !(this.zw(a, b, c) || this.zx(a, b, c, d));
        }
        z0(a, b, c, d) {
            return !(this.zy(a, b, c) || this.zv(a, b, c, d));
        }
        ads(a) {
            let b = new List$1(DataTooltipCollisionInfo.$, 0);
            for (let c = 0; c < a.f.count; c++) {
                let d = new DataTooltipCollisionInfo();
                d.d = c;
                d.e = { $type: Point_$type, x: a.f._inner[c], y: a.g._inner[c] };
                d.c = a.k._inner[c];
                d.a = a.j._inner[c];
                d.b = a.m._inner[c];
                if (isNaN_(d.e.x) || isNaN_(d.e.y)) {
                    continue;
                }
                b.add(d);
            }
            b.aa((e, f) => {
                if (e.e.y < f.e.y) {
                    return -1;
                }
                if (e.e.y > f.e.y) {
                    return 1;
                }
                if (e.b < f.b) {
                    return -1;
                }
                if (e.b > f.b) {
                    return 1;
                }
                return 0;
            });
            let e = this.zs(b);
            if (!e) {
                return;
            }
            for (let f = 0; f < b.count - 1; f++) {
                let g = b._inner[f];
                let h = b._inner[f + 1];
                let i = new Rect(0, g.e.x, g.e.y, g.c, g.a);
                let j = new Rect(0, h.e.x, h.e.y, h.c, h.a);
                if (i.intersectsWith(j) || i.top > j.bottom) {
                    h.e = { $type: Point_$type, x: h.e.x, y: i.bottom + 1 };
                }
            }
            if (b._inner[b.count - 1].e.y + b._inner[b.count - 1].a > this.cl.bx.height) {
                b._inner[b.count - 1].e = { $type: Point_$type, x: b._inner[b.count - 1].e.x, y: b._inner[b.count - 1].e.y - ((b._inner[b.count - 1].e.y + b._inner[b.count - 1].a) - this.cl.bx.height) };
            }
            for (let k = b.count - 1; k >= 1; k--) {
                let l = b._inner[k];
                let m = b._inner[k - 1];
                let n = new Rect(0, l.e.x, l.e.y, l.c, l.a);
                let o = new Rect(0, m.e.x, m.e.y, m.c, m.a);
                if (n.intersectsWith(o) || n.top < o.bottom) {
                    m.e = { $type: Point_$type, x: m.e.x, y: n.top - (o.height + 1) };
                }
            }
            for (let p = 0; p < b.count; p++) {
                let q = b._inner[p].d;
                let r = b._inner[p];
                a.f._inner[q] = r.e.x;
                a.g._inner[q] = r.e.y;
            }
        }
        zs(a) {
            if (a.count <= 1) {
                return false;
            }
            let b = this.cl.bx;
            for (let c = 0; c < a.count - 1; c++) {
                let d = a._inner[c];
                let e = a._inner[c + 1];
                let f = new Rect(0, d.e.x, d.e.y, d.c, d.a);
                let g = new Rect(0, e.e.x, e.e.y, e.c, e.a);
                if (f.intersectsWith(g)) {
                    return true;
                }
            }
            return false;
        }
        adw(a, b, c, d, e) {
            let f = this.wz(a);
            if (!f.c) {
                return;
            }
            let g = a.uu(f.d, c, d);
            let h = this.y5.b9;
            let i = this.x9;
            if (!c) {
                i = this.uz(g);
            }
            let j = a.j2(i);
            let k = h.item(e);
            let l = this.cl.bx;
            let m = this.y5.b8(k);
            if (!Base.equalsStatic(m.target, this.c1)) {
                m.target = this.c1;
            }
            let n = new List$1(String_$type, 0);
            if (a.d2 && this.y2 == 2) {
                a.oy((o) => {
                    if (this.vx(o)) {
                        n.add(o.dataLegendKey);
                    }
                    return true;
                });
            }
            m.includedSeries = [a.dataLegendKey];
            m.excludedSeries = n.toArray();
            this.adu(m);
            m.targetCursorPositionX = this.x9.x;
            m.targetCursorPositionY = this.x9.y;
            if (!this.y5.cb(k, a)) {
                return;
            }
            let o = this.y5.cq(k);
            b.i.add1(k);
            let p = g.x;
            let q = g.x;
            q = Math.max(q, l.left);
            q = Math.min(q, l.right);
            b.l.add(q);
            let r = g.y;
            r = Math.max(r, l.top);
            r = Math.min(r, l.bottom);
            b.m.add(r);
            let s = DeviceUtils.g(10);
            let t = g.x + s;
            if (t + o.width > l.right) {
                t = (p - o.width) - s;
            }
            if (t < l.left) {
                t = l.left;
            }
            b.f.add(t);
            let u = (g.y - o.height) - s;
            if (u + o.height > l.bottom) {
                u = (l.bottom - o.height) - s;
            }
            if (u < l.top) {
                u = l.top;
            }
            b.g.add(u);
            b.k.add(o.width);
            b.j.add(o.height);
            let v = this.tw;
            if (v == null) {
                v = this.t2;
            }
            if (v == null) {
                v = a.tw;
            }
            b.h.add(v);
        }
        adv(a, b, c) {
            this.yt = this.yw();
            this.yx = this.y0();
            let d = a.f;
            let e = a.e;
            let f = 0;
            let g = this.y5.b9.item(0);
            this.y5.cb(g, null);
            let h = this.y5.b8(g);
            if (!Base.equalsStatic(h.target, this.c1)) {
                h.target = this.c1;
            }
            let i = new List$1(String_$type, 0);
            let j = this.yk();
            if (j != null) {
                for (let k of fromEnum(j.db())) {
                    if (k.isStacked) {
                        k.o0((l) => {
                            i.add(l.dataLegendKey);
                            if (l.d2) {
                                l.oy((m) => {
                                    i.add(m.dataLegendKey);
                                    return true;
                                });
                            }
                            return true;
                        });
                    }
                    else if (k.d2) {
                        i.add(k.dataLegendKey);
                        k.oy((l) => {
                            i.add(l.dataLegendKey);
                            return true;
                        });
                    }
                    else {
                        i.add(k.dataLegendKey);
                    }
                }
                h.includedSeries = i.toArray();
                h.excludedSeries = null;
            }
            else {
                h.includedSeries = null;
                h.excludedSeries = null;
            }
            this.adu(h);
            h.targetCursorPositionX = this.x9.x;
            h.targetCursorPositionY = this.x9.y;
            let l = this.y5.cq(g);
            let m = 0;
            let n = 0;
            let o = 0;
            let p = 0;
            let q = false;
            let r = false;
            o = d.x;
            p = d.y;
            let s = this.cl.bx;
            let t = this.y5.cr();
            let u = this.af3();
            let v = this.afz(u, l, e, d);
            let w = v.x;
            let x = v.y;
            {
            }
            b.l.add(w);
            b.m.add(x);
            b.f.add(w);
            b.g.add(x);
            b.k.add(l.width);
            b.j.add(l.height);
            b.i.add1(g);
            let y = null;
            b.h.add(y);
            this.y5.b9.count = 1;
        }
        abd(a) {
            return a.toolTip;
        }
        w9(a, b) {
            super.w9(a, b);
            let c = a;
            let d = c.m.count;
            let e = b.bx.left;
            let f = b.bx.right;
            let g = b.bx.top;
            let h = b.bx.bottom;
            for (let i = 0; i < d; i++) {
                if (isNaN_(c.l._inner[i]) || isNaN_(c.m._inner[i]) || isNaN_(c.f._inner[i]) || isNaN_(c.g._inner[i])) {
                    this.y5.ci(c.i._inner[i]);
                    continue;
                }
                let j = c.f._inner[i];
                let k = c.g._inner[i];
                let l = c.k._inner[i];
                let m = c.j._inner[i];
                let n = false;
                if (n) {
                    this.y5.ci(c.i._inner[i]);
                    continue;
                }
                let o = c.i._inner[i];
                let p = Math.min(c.f._inner[i], c.l._inner[i]);
                let q = Math.min(c.g._inner[i], c.m._inner[i]);
                let r = c.l._inner[i] - c.f._inner[i];
                let s = c.m._inner[i] - c.g._inner[i];
                if (o != null) {
                    this.y5.ck(o, p, q, r, s);
                }
            }
        }
        fu() {
            return true;
        }
        get yu() {
            return this.yt;
        }
        set yu(a) {
            let b = this.yt;
            this.yt = a;
            if (b != this.yt) {
                this.raisePropertyChanged("ActualGroupedPositionModeX", enumGetBox(DataTooltipGroupedPositionX_$type, b), enumGetBox(DataTooltipGroupedPositionX_$type, this.yt));
            }
        }
        yw() {
            if (this.c1 == null) {
                return 2;
            }
            let a = false;
            let b = false;
            let c = false;
            let d = false;
            let e = this.yk();
            if (e == null) {
                if (this.yv != 0) {
                    return this.yv;
                }
                else {
                    return 2;
                }
            }
            for (let f of fromEnum(e.de)) {
                if (f.ek) {
                    a = true;
                }
                if (f.isVertical) {
                    b = true;
                }
                if (f.fa) {
                    c = true;
                }
                if (f.fh) {
                    d = true;
                }
            }
            let g = ((() => {
                let $ret = new HashSet$1(DataTooltipGroupedPositionX_$type, 0);
                $ret.add_1(1);
                $ret.add_1(2);
                $ret.add_1(3);
                $ret.add_1(4);
                $ret.add_1(5);
                $ret.add_1(6);
                $ret.add_1(7);
                $ret.add_1(8);
                $ret.add_1(9);
                return $ret;
            })());
            let h = g.contains(this.yv);
            if (this.yv != 0) {
                return this.yv;
            }
            if (h && b) {
                return 11;
            }
            if (c || d) {
                return 11;
            }
            if (b) {
                return 11;
            }
            if (a) {
                return 8;
            }
            return 8;
        }
        get yy() {
            return this.yx;
        }
        set yy(a) {
            let b = this.yx;
            this.yx = a;
            if (b != this.yx) {
                this.raisePropertyChanged("ActualPositionModeY", enumGetBox(DataTooltipGroupedPositionY_$type, b), enumGetBox(DataTooltipGroupedPositionY_$type, this.yx));
            }
        }
        y0() {
            if (this.c1 == null) {
                return 11;
            }
            let a = false;
            let b = false;
            let c = false;
            let d = this.yk();
            if (d == null) {
                if (this.yz != 0) {
                    return this.yz;
                }
                else {
                    return 11;
                }
            }
            for (let e of fromEnum(d.db())) {
                if (e.isVertical) {
                    a = true;
                }
                if (e.fa) {
                    b = true;
                }
                if (e.fh) {
                    c = true;
                }
            }
            let f = ((() => {
                let $ret = new HashSet$1(DataTooltipGroupedPositionY_$type, 0);
                $ret.add_1(1);
                $ret.add_1(2);
                $ret.add_1(3);
                $ret.add_1(4);
                $ret.add_1(5);
                $ret.add_1(6);
                $ret.add_1(7);
                $ret.add_1(8);
                $ret.add_1(9);
                return $ret;
            })());
            let g = f.contains(this.yz);
            if (this.yz != 0) {
                return this.yz;
            }
            if (g && !a) {
                return 11;
            }
            if (b || c) {
                return 11;
            }
            if (a) {
                return 8;
            }
            if (!a) {
                return 11;
            }
            return 11;
        }
        get zr() {
            return this.zh;
        }
        set zr(a) {
            let b = this.zh;
            this.zh = a;
            if (b != this.zh) {
                this.raisePropertyChanged("ValueTextStyle", b, this.zh);
            }
        }
        get zj() {
            return this.y9;
        }
        set zj(a) {
            let b = this.y9;
            this.y9 = a;
            if (b != this.y9) {
                this.raisePropertyChanged("HeaderTextStyle", b, this.y9);
            }
        }
        get zi() {
            return this.y8;
        }
        set zi(a) {
            let b = this.y8;
            this.y8 = a;
            if (b != this.y8) {
                this.raisePropertyChanged("GroupTextStyle", b, this.y8);
            }
        }
        get zm() {
            return this.zc;
        }
        set zm(a) {
            let b = this.zc;
            this.zc = a;
            if (b != this.zc) {
                this.raisePropertyChanged("SummaryTitleTextStyle", b, this.zc);
            }
        }
        get zo() {
            return this.ze;
        }
        set zo(a) {
            let b = this.ze;
            this.ze = a;
            if (b != this.ze) {
                this.raisePropertyChanged("SummaryValueTextStyle", b, this.ze);
            }
        }
        get zl() {
            return this.zb;
        }
        set zl(a) {
            let b = this.zb;
            this.zb = a;
            if (b != this.zb) {
                this.raisePropertyChanged("SummaryLabelTextStyle", b, this.zb);
            }
        }
        get zn() {
            return this.zd;
        }
        set zn(a) {
            let b = this.zd;
            this.zd = a;
            if (b != this.zd) {
                this.raisePropertyChanged("SummaryUnitsTextStyle", b, this.zd);
            }
        }
        get zq() {
            return this.zg;
        }
        set zq(a) {
            let b = this.zg;
            this.zg = a;
            if (b != this.zg) {
                this.raisePropertyChanged("UnitsTextStyle", b, this.zg);
            }
        }
        get zp() {
            return this.zf;
        }
        set zp(a) {
            let b = this.zf;
            this.zf = a;
            if (b != this.zf) {
                this.raisePropertyChanged("TitleTextStyle", b, this.zf);
            }
        }
        get zk() {
            return this.za;
        }
        set zk(a) {
            let b = this.za;
            this.za = a;
            if (b != this.za) {
                this.raisePropertyChanged("LabelTextStyle", b, this.za);
            }
        }
    }
    DataToolTipLayer.$t = /*@__PURE__*/ markType(DataToolTipLayer, 'DataToolTipLayer', AnnotationLayer.$);
    DataToolTipLayer.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, DataToolTipLayer, 'raisePropertyChanged', ['BadgeMargin:af5:ady', [Thickness.$, /*@__PURE__*/ new Thickness(1, 0, 0, 0, 0)], 'BadgeShape:y7:adz', [LegendItemBadgeShape_$type, /*@__PURE__*/ enumGetBox(LegendItemBadgeShape_$type, 0)], 'DefaultPositionOffsetX:z9:ad0', [1, /*@__PURE__*/ DeviceUtils.g(10)], 'DefaultPositionOffsetY:aaa:ad1', [1, /*@__PURE__*/ DeviceUtils.g(10)], 'ExcludedColumns:yc:ad2', [Array_$type, null], 'ExcludedSeries:yd:ad3', [Array_$type, null], 'GroupRowMargin:af6:ad7', [Thickness.$, /*@__PURE__*/ new Thickness(0, 5)], 'GroupRowVisible:zt:ad8', [0, false], 'GroupTextColor:afp:ad9', [Brush.$, null], 'GroupTextMargin:af7:aea', [Thickness.$, /*@__PURE__*/ new Thickness(1, 2, 0, 0, 0)], 'GroupedPositionModeX:yv:ad4', [DataTooltipGroupedPositionX_$type, /*@__PURE__*/ enumGetBox(DataTooltipGroupedPositionX_$type, 0)], 'GroupedPositionModeY:yz:ad5', [DataTooltipGroupedPositionY_$type, /*@__PURE__*/ enumGetBox(DataTooltipGroupedPositionY_$type, 0)], 'GroupingMode:y3:ad6', [DataToolTipLayerGroupingMode_$type, /*@__PURE__*/ enumGetBox(DataToolTipLayerGroupingMode_$type, 0)], 'HeaderFormatCulture:abv:aeb', [2, /*@__PURE__*/ stringEmpty()], 'HeaderFormatDate:yn:aec', [DataLegendHeaderDateMode_$type, /*@__PURE__*/ enumGetBox(DataLegendHeaderDateMode_$type, 0)], 'HeaderFormatSpecifiers:yg:aed', [Array_$type, null], 'HeaderFormatString:abz:aee', [2, null], 'HeaderFormatTime:yo:aef', [DataLegendHeaderTimeMode_$type, /*@__PURE__*/ enumGetBox(DataLegendHeaderTimeMode_$type, 0)], 'HeaderRowMargin:af8:aeg', [Thickness.$, /*@__PURE__*/ new Thickness(0, 5)], 'HeaderRowVisible:zu:aeh', [0, true], 'HeaderTextColor:afq:aei', [Brush.$, null], 'HeaderTextMargin:af9:aej', [Thickness.$, /*@__PURE__*/ new Thickness(1, 2, 0, 0, 0)], 'HeaderText:ab4:aek', [2, null], 'IncludedColumns:yh:ael', [Array_$type, null], 'IncludedSeries:yi:aem', [Array_$type, null], 'LabelDisplayMode:yp:aen', [DataLegendLabelMode_$type, /*@__PURE__*/ enumGetBox(DataLegendLabelMode_$type, 0)], 'LabelTextColor:afr:aeo', [Brush.$, null], 'LabelTextMargin:aga:aep', [Thickness.$, /*@__PURE__*/ new Thickness(1, 8, 0, 0, 0)], 'PositionOffsetX:aab:aeq', [1, NaN], 'PositionOffsetY:aac:aer', [1, NaN], 'ShouldUpdateWhenSeriesDataChanges:z1:aes', [0, true], 'SummaryLabelTextColor:afs:aet', [Brush.$, null], 'SummaryLabelText:aci:aeu', [2, null], 'SummaryRowMargin:agb:aev', [Thickness.$, /*@__PURE__*/ new Thickness(0, 5)], 'SummaryTitleTextColor:aft:aew', [Brush.$, null], 'SummaryTitleTextMargin:agc:aex', [Thickness.$, /*@__PURE__*/ new Thickness(1, 2, 0, 0, 0)], 'SummaryTitleText:acn:aey', [2, null], 'SummaryType:yq:aez', [DataLegendSummaryType_$type, /*@__PURE__*/ enumGetBox(DataLegendSummaryType_$type, 0)], 'SummaryUnitsTextColor:afu:ae0', [Brush.$, null], 'SummaryUnitsText:act:ae1', [2, null], 'SummaryValueTextColor:afv:ae2', [Brush.$, null], 'TargetAxis:yl:ae3', [Axis.$, null], 'TitleTextColor:afw:ae4', [Brush.$, null], 'TitleTextMargin:agd:ae5', [Thickness.$, /*@__PURE__*/ new Thickness(1, 0, 0, 0, 0)], 'UnitsDisplayMode:yr:ae6', [DataLegendUnitsMode_$type, /*@__PURE__*/ enumGetBox(DataLegendUnitsMode_$type, 0)], 'UnitsTextColor:afx:ae7', [Brush.$, null], 'UnitsTextMargin:age:ae8', [Thickness.$, /*@__PURE__*/ new Thickness(1, 0, 0, 0, 0)], 'UnitsText:ac4:ae9', [2, null], 'UseInterpolation:z2:afa', [0, false], 'ValueFormatAbbreviation:ym:afb', [DataAbbreviationMode_$type, /*@__PURE__*/ enumGetBox(DataAbbreviationMode_$type, 0)], 'ValueFormatCulture:adb:afc', [2, /*@__PURE__*/ stringEmpty()], 'ValueFormatMaxFractions:abb:afd', [1, -1], 'ValueFormatMinFractions:abc:afe', [1, -1], 'ValueFormatMode:ys:aff', [DataLegendValueMode_$type, /*@__PURE__*/ enumGetBox(DataLegendValueMode_$type, 0)], 'ValueFormatSpecifiers:yj:afg', [Array_$type, null], 'ValueFormatString:adh:afh', [2, null], 'ValueFormatUseGrouping:z3:afi', [0, true], 'ValueRowMargin:agf:afj', [Thickness.$, /*@__PURE__*/ new Thickness(0, 5)], 'ValueRowVisible:z4:afk', [0, true], 'ValueTextColor:afy:afl', [Brush.$, null], 'ValueTextMargin:agg:afm', [Thickness.$, /*@__PURE__*/ new Thickness(1, 2, 0, 2, 0)], 'ValueTextUseSeriesColors:z5:afn', [0, false], 'ValueTextWhenMissingData:adq:afo', [2, "N/A"]]);
    return DataToolTipLayer;
})();
/**
 * @hidden
 */
export let DataToolTipLayerView = /*@__PURE__*/ (() => {
    class DataToolTipLayerView extends AnnotationLayerView {
        constructor(a) {
            super(a);
            this.b9 = null;
            this.cc = null;
            this.b7 = null;
            this.ca = false;
            this._htmlTest = null;
            this.b7 = a;
            this.htmlTest = /^[^<]*(<[\w\W]+>)[^>]*$/;
            this.cc = new List$1(PointerTooltip.$, 0);
        }
        ak() {
            super.ak();
            for (let a = 0; a < this.b9.a.count; a++) {
                this.b9.a._inner[a].br();
            }
            for (let b = 0; b < this.b9.b.count; b++) {
                this.b9.b._inner[b].br();
            }
            this.b9.clear();
        }
        cd() {
            let a = new PointerTooltip();
            a.bw(this.e.jf);
            a._visibility = 1;
            a.ap = this.e.c1.c8.k;
            let b = null;
            if (TypeRegistrar.isRegistered("XamDataLegend")) {
                b = TypeRegistrar.create("XamDataLegend");
            }
            b.pixelScalingRatio = 1;
            if (this.e.c1 != null) {
                let c = this.e.c1.c8.j.ae.createElement("div");
                let ren_ = this.e.c1.c8.j.ae.getSubRenderer(c);
                let len_ = b;
                len_.provideContainer(ren_);
            }
            a.ai = typeCast(IOnDemandRender_$type, b);
            a.ai.shouldOnDemandRender = true;
            this.cc.add(a);
            return a;
        }
        cf(a) {
            let b = a;
        }
        ch(a) {
            let b = a;
            b._visibility = 1;
        }
        cg(a) {
            let b = a;
            b.bz();
            b.content = null;
            this.cc.remove1(a);
        }
        au() {
            super.au();
            this.b9 = ((() => {
                let $ret = new Pool$1(Base.$);
                $ret.create = runOn(this, this.cd);
                $ret.activate = runOn(this, this.cf);
                $ret.disactivate = runOn(this, this.ch);
                $ret.destroy = runOn(this, this.cg);
                return $ret;
            })());
        }
        get htmlTest() {
            return this._htmlTest;
        }
        set htmlTest(a) {
            this._htmlTest = a;
        }
        cb(a, b) {
            let c = a;
            let d = c.ai;
            return true;
        }
        cq(a) {
            let b = a;
            let c = new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
            b.cy = 1;
            let d = b.cx(new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
            b.cy = 0;
            return d;
        }
        cp() {
            if (this.e.c1 != null) {
                let a = this.e.c1.va();
                let b = this.e.c1.c8.a8;
                let c = this.e.c1.c8.a7;
                return new Rect(0, 0, 0, b, c);
            }
            return Rect.empty;
        }
        co() {
            if (this.e.c1 != null) {
                let a = this.e.c1.va();
                let b = this.e.c1.c8.a8;
                let c = this.e.c1.c8.a7;
                return new Rect(0, 0, 0, b, c);
            }
            return Rect.empty;
        }
        cn() {
            let a = 0;
            let b = 0;
            if (this.e.c1 != null) {
                let c = this.e.c1.va();
                a += c.x;
                b += c.y;
                let d = this.e.c1.c8.a8;
                let e = this.e.c1.c8.a7;
                return new Rect(0, a, b, d, e);
            }
            return Rect.empty;
        }
        cm(a) {
            let b = 0;
            let c = 0;
            if (this.e.c1 != null) {
                let d = this.e.c1.va();
                b += d.x;
                c += d.y;
            }
            return { $type: Point_$type, x: b + a.x, y: c + a.y };
        }
        ck(a, b, c, d, e) {
            let f = null;
            if (this.e.c1 != null) {
                f = this.e.c1.c8.j.i();
            }
            let g = a;
            if (g == null) {
                return;
            }
            if (d == 0 && e == 0) {
                g.cy = 1;
            }
            else {
                g.cy = 0;
            }
            g.aq = f;
            g.cs = { $type: Point_$type, x: d, y: e };
            g._visibility = 0;
            g.n = b;
            g.o = c;
        }
        cr() {
            let a = (window.innerWidth);
            let b = (window.innerHeight);
            return new Size(1, a, b);
        }
        ci(a) {
            if (a != null) {
                let b = a;
                b._visibility = 1;
            }
        }
        cl() {
            if (this.e.c1 == null) {
                this.cj(true);
            }
        }
        a8(a, b) {
            super.a8(a, b);
            if (b) {
                return;
            }
            let c = 0;
            let d = 0;
            let e = this.e.c1;
            if (e != null) {
                let f = e.c8.j.b8();
                c += f.x;
                d += f.y;
            }
            for (let g = 0; g < this.cc.count; g++) {
                this.cc._inner[g].by(this.cc._inner[g].n + c, this.cc._inner[g].o + d);
            }
        }
        an(a) {
            super.an(a);
            for (let b = 0; b < this.cc.count; b++) {
                let c = this.cc._inner[b];
                let d = 0;
                let e = 0;
                if (this.e.c1 != null) {
                    let f = this.e.c1.va();
                    d += f.x;
                    e += f.y;
                }
                let g = c.a5();
                let h = c.n - d;
                let i = c.o - e;
                let j = c.ai;
                let k = null;
                if (j != null) {
                    k = j.exportVisualData();
                }
                this.e.a4.addPointerTooltipWithDataLegend(a, g, h, i, k);
            }
        }
        b8(a) {
            let b = a;
            return b.ai;
        }
        cj(a) {
            this.as();
            for (let b = 0; b < this.cc.count; b++) {
                this.ci(this.cc._inner[b]);
                if (a) {
                    this.cc._inner[b].bs();
                }
            }
        }
    }
    DataToolTipLayerView.$t = /*@__PURE__*/ markType(DataToolTipLayerView, 'DataToolTipLayerView', AnnotationLayerView.$);
    return DataToolTipLayerView;
})();
