import { XYChartDescription } from "./XYChartDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class CategoryChartDescription extends XYChartDescription {
    static $t: Type;
    private wy;
    get tooltipTemplateRef(): string;
    set tooltipTemplateRef(a: string);
    private w3;
    get width(): string;
    set width(a: string);
    private ww;
    get height(): string;
    set height(a: string);
    private wu;
    get background(): string;
    set background(a: string);
    protected get_type(): string;
    constructor();
    private wn;
    get transitionInDuration(): number;
    set transitionInDuration(a: number);
    private wo;
    get transitionOutDuration(): number;
    set transitionOutDuration(a: number);
    private wz;
    get transitionInEasingFunctionRef(): string;
    set transitionInEasingFunctionRef(a: string);
    private w2;
    get transitionOutEasingFunctionRef(): string;
    set transitionOutEasingFunctionRef(a: string);
    private wv;
    get chartType(): string;
    set chartType(a: string);
    private wx;
    get markerCollisionAvoidance(): string;
    set markerCollisionAvoidance(a: string);
    private u5;
    get isSplineShapePartOfRange(): boolean;
    set isSplineShapePartOfRange(a: boolean);
    private u6;
    get isTransitionInEnabled(): boolean;
    set isTransitionInEnabled(a: boolean);
    private w0;
    get transitionInMode(): string;
    set transitionInMode(a: string);
    private w1;
    get transitionInSpeedType(): string;
    set transitionInSpeedType(a: string);
    private vs;
    get xAxisInterval(): number;
    set xAxisInterval(a: number);
    private vv;
    get xAxisMinorInterval(): number;
    set xAxisMinorInterval(a: number);
    private vr;
    get xAxisGap(): number;
    set xAxisGap(a: number);
    private vu;
    get xAxisMinimumGapSize(): number;
    set xAxisMinimumGapSize(a: number);
    private vt;
    get xAxisMaximumGap(): number;
    set xAxisMaximumGap(a: number);
    private vw;
    get xAxisOverlap(): number;
    set xAxisOverlap(a: number);
    private v2;
    get yAxisInterval(): number;
    set yAxisInterval(a: number);
    private wt;
    get autoMarginAndAngleUpdateMode(): string;
    set autoMarginAndAngleUpdateMode(a: string);
    private u7;
    get shouldAutoExpandMarginForInitialLabels(): boolean;
    set shouldAutoExpandMarginForInitialLabels(a: boolean);
    private u8;
    get shouldConsiderAutoRotationForInitialLabels(): boolean;
    set shouldConsiderAutoRotationForInitialLabels(a: boolean);
    private vp;
    get autoExpandMarginExtraPadding(): number;
    set autoExpandMarginExtraPadding(a: number);
    private vq;
    get autoExpandMarginMaximumValue(): number;
    set autoExpandMarginMaximumValue(a: number);
    private vc;
    get yAxisFavorLabellingScaleEnd(): boolean;
    set yAxisFavorLabellingScaleEnd(a: boolean);
    private u9;
    get xAxisEnhancedIntervalPreferMoreCategoryLabels(): boolean;
    set xAxisEnhancedIntervalPreferMoreCategoryLabels(a: boolean);
    private vb;
    get yAxisEnhancedIntervalPreferMoreCategoryLabels(): boolean;
    set yAxisEnhancedIntervalPreferMoreCategoryLabels(a: boolean);
    private w4;
    get yAxisAutoRangeBufferMode(): string;
    set yAxisAutoRangeBufferMode(a: string);
    private vd;
    get yAxisIsLogarithmic(): boolean;
    set yAxisIsLogarithmic(a: boolean);
    private wp;
    get yAxisLogarithmBase(): number;
    set yAxisLogarithmBase(a: number);
    private v4;
    get yAxisMinimumValue(): number;
    set yAxisMinimumValue(a: number);
    private v3;
    get yAxisMaximumValue(): number;
    set yAxisMaximumValue(a: number);
    private v5;
    get yAxisMinorInterval(): number;
    set yAxisMinorInterval(a: number);
    private uz;
    get negativeBrushes(): string[];
    set negativeBrushes(a: string[]);
    private u0;
    get negativeOutlines(): string[];
    set negativeOutlines(a: string[]);
    private va;
    get yAxisAbbreviateLargeNumbers(): boolean;
    set yAxisAbbreviateLargeNumbers(a: boolean);
    private vx;
    get xAxisZoomMaximumCategoryRange(): number;
    set xAxisZoomMaximumCategoryRange(a: number);
    private vy;
    get xAxisZoomMaximumItemSpan(): number;
    set xAxisZoomMaximumItemSpan(a: number);
    private vz;
    get xAxisZoomToCategoryRange(): number;
    set xAxisZoomToCategoryRange(a: number);
    private v0;
    get xAxisZoomToCategoryStart(): number;
    set xAxisZoomToCategoryStart(a: number);
    private v1;
    get xAxisZoomToItemSpan(): number;
    set xAxisZoomToItemSpan(a: number);
    private u3;
    get isCategoryHighlightingEnabled(): boolean;
    set isCategoryHighlightingEnabled(a: boolean);
    private u4;
    get isItemHighlightingEnabled(): boolean;
    set isItemHighlightingEnabled(a: boolean);
}
