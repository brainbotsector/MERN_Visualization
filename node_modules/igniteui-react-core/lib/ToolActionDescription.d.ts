import { Description } from "./Description";
import { Type } from "./type";
/**
 * @hidden
 */
export declare abstract class ToolActionDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private h;
    get actions(): ToolActionDescription[];
    set actions(a: ToolActionDescription[]);
    private al;
    get width(): number;
    set width(a: number);
    private bw;
    get parentId(): string;
    set parentId(a: string);
    private bg;
    get beforeId(): string;
    set beforeId(a: string);
    private be;
    get afterId(): string;
    set afterId(a: string);
    private bv;
    get overlayId(): string;
    set overlayId(a: string);
    private bi;
    get commandId(): string;
    set commandId(a: string);
    private bh;
    get commandArgument(): string;
    set commandArgument(a: string);
    private a5;
    get commandArgumentValue(): any;
    set commandArgumentValue(a: any);
    private ai;
    get paddingLeft(): number;
    set paddingLeft(a: number);
    private w;
    get actualPaddingLeft(): number;
    set actualPaddingLeft(a: number);
    private aj;
    get paddingRight(): number;
    set paddingRight(a: number);
    private x;
    get actualPaddingRight(): number;
    set actualPaddingRight(a: number);
    private ah;
    get paddingBottom(): number;
    set paddingBottom(a: number);
    private v;
    get actualPaddingBottom(): number;
    set actualPaddingBottom(a: number);
    private ak;
    get paddingTop(): number;
    set paddingTop(a: number);
    private y;
    get actualPaddingTop(): number;
    set actualPaddingTop(a: number);
    private ba;
    get actualHoverBackground(): string;
    set actualHoverBackground(a: string);
    private bo;
    get hoverBackground(): string;
    set hoverBackground(a: string);
    private a7;
    get actualBackground(): string;
    set actualBackground(a: string);
    private bf;
    get background(): string;
    set background(a: string);
    private bd;
    get actualTextColor(): string;
    set actualTextColor(a: string);
    private bz;
    get textColor(): string;
    set textColor(a: string);
    private a8;
    get actualDisabledTextColor(): string;
    set actualDisabledTextColor(a: string);
    private bj;
    get disabledTextColor(): string;
    set disabledTextColor(a: string);
    private bk;
    get fontFamily(): string;
    set fontFamily(a: string);
    private z;
    get fontSize(): number;
    set fontSize(a: number);
    private bl;
    get fontStyle(): string;
    set fontStyle(a: string);
    private bm;
    get fontWeight(): string;
    set fontWeight(a: string);
    private o;
    get isDisabled(): boolean;
    set isDisabled(a: boolean);
    private p;
    get isHighlighted(): boolean;
    set isHighlighted(a: boolean);
    private bt;
    get name(): string;
    set name(a: string);
    private b0;
    get title(): string;
    set title(a: string);
    private by;
    get subtitle(): string;
    set subtitle(a: string);
    private br;
    get iconName(): string;
    set iconName(a: string);
    private bp;
    get iconCollectionName(): string;
    set iconCollectionName(a: string);
    private ae;
    get iconViewBoxLeft(): number;
    set iconViewBoxLeft(a: number);
    private af;
    get iconViewBoxTop(): number;
    set iconViewBoxTop(a: number);
    private ag;
    get iconViewBoxWidth(): number;
    set iconViewBoxWidth(a: number);
    private ad;
    get iconViewBoxHeight(): number;
    set iconViewBoxHeight(a: number);
    private bq;
    get iconFill(): string;
    set iconFill(a: string);
    private bb;
    get actualIconFill(): string;
    set actualIconFill(a: string);
    private i;
    get iconFillColors(): string[];
    set iconFillColors(a: string[]);
    private bs;
    get iconStroke(): string;
    set iconStroke(a: string);
    private bc;
    get actualIconStroke(): string;
    set actualIconStroke(a: string);
    private j;
    get iconStrokeColors(): string[];
    set iconStrokeColors(a: string[]);
    private ac;
    get iconStrokeWidth(): number;
    set iconStrokeWidth(a: number);
    private b1;
    get visibility(): string;
    set visibility(a: string);
    private n;
    get closeOnExecute(): boolean;
    set closeOnExecute(a: boolean);
    private ab;
    get highlightWidth(): number;
    set highlightWidth(a: number);
    private u;
    get actualHighlightWidth(): number;
    set actualHighlightWidth(a: number);
    private aa;
    get highlightRadius(): number;
    set highlightRadius(a: number);
    private t;
    get actualHighlightRadius(): number;
    set actualHighlightRadius(a: number);
    private bn;
    get highlightColor(): string;
    set highlightColor(a: string);
    private a9;
    get actualHighlightColor(): string;
    set actualHighlightColor(a: string);
    private bu;
    get onCommandRef(): string;
    set onCommandRef(a: string);
    private bx;
    get performedRef(): string;
    set performedRef(a: string);
}
