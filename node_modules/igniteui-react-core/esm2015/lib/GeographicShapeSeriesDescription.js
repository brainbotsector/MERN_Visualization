/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { GeographicShapeSeriesBaseDescription } from "./GeographicShapeSeriesBaseDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let GeographicShapeSeriesDescription = /*@__PURE__*/ (() => {
    class GeographicShapeSeriesDescription extends GeographicShapeSeriesBaseDescription {
        get_type() {
            return "GeographicShapeSeries";
        }
        constructor() {
            super();
            this.fv = null;
            this.ft = null;
            this.fu = null;
            this.ff = 0;
            this.fe = 0;
            this.fs = null;
            this.fq = null;
            this.fo = null;
            this.fr = null;
            this.fm = null;
            this.fp = null;
            this.fd = 0;
            this.fn = null;
            this.fl = null;
            this.fj = null;
            this.fk = null;
            this.fw = null;
        }
        get shapeStyleSelectorRef() {
            return this.fv;
        }
        set shapeStyleSelectorRef(a) {
            this.fv = a;
            this.g("ShapeStyleSelectorRef");
        }
        get shapeFill() {
            return this.ft;
        }
        set shapeFill(a) {
            this.ft = a;
            this.g("ShapeFill");
        }
        get shapeStroke() {
            return this.fu;
        }
        set shapeStroke(a) {
            this.fu = a;
            this.g("ShapeStroke");
        }
        get shapeStrokeThickness() {
            return this.ff;
        }
        set shapeStrokeThickness(a) {
            this.ff = a;
            this.g("ShapeStrokeThickness");
        }
        get shapeOpacity() {
            return this.fe;
        }
        set shapeOpacity(a) {
            this.fe = a;
            this.g("ShapeOpacity");
        }
        get markerType() {
            return this.fs;
        }
        set markerType(a) {
            this.fs = a;
            this.g("MarkerType");
        }
        get markerOutlineMode() {
            return this.fq;
        }
        set markerOutlineMode(a) {
            this.fq = a;
            this.g("MarkerOutlineMode");
        }
        get markerFillMode() {
            return this.fo;
        }
        set markerFillMode(a) {
            this.fo = a;
            this.g("MarkerFillMode");
        }
        get markerTemplateRef() {
            return this.fr;
        }
        set markerTemplateRef(a) {
            this.fr = a;
            this.g("MarkerTemplateRef");
        }
        get markerBrush() {
            return this.fm;
        }
        set markerBrush(a) {
            this.fm = a;
            this.g("MarkerBrush");
        }
        get markerOutline() {
            return this.fp;
        }
        set markerOutline(a) {
            this.fp = a;
            this.g("MarkerOutline");
        }
        get markerThickness() {
            return this.fd;
        }
        set markerThickness(a) {
            this.fd = a;
            this.g("MarkerThickness");
        }
        get markerCollisionAvoidance() {
            return this.fn;
        }
        set markerCollisionAvoidance(a) {
            this.fn = a;
            this.g("MarkerCollisionAvoidance");
        }
        get actualMarkerTemplateRef() {
            return this.fl;
        }
        set actualMarkerTemplateRef(a) {
            this.fl = a;
            this.g("ActualMarkerTemplateRef");
        }
        get actualMarkerBrush() {
            return this.fj;
        }
        set actualMarkerBrush(a) {
            this.fj = a;
            this.g("ActualMarkerBrush");
        }
        get actualMarkerOutline() {
            return this.fk;
        }
        set actualMarkerOutline(a) {
            this.fk = a;
            this.g("ActualMarkerOutline");
        }
        get styleShapeRef() {
            return this.fw;
        }
        set styleShapeRef(a) {
            this.fw = a;
            this.g("StyleShapeRef");
        }
    }
    GeographicShapeSeriesDescription.$t = /*@__PURE__*/ markType(GeographicShapeSeriesDescription, 'GeographicShapeSeriesDescription', GeographicShapeSeriesBaseDescription.$);
    return GeographicShapeSeriesDescription;
})();
