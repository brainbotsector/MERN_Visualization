/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { XYChartDescription } from "./XYChartDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let FinancialChartDescription = /*@__PURE__*/ (() => {
    class FinancialChartDescription extends XYChartDescription {
        get tooltipTemplateRef() {
            return this.xt;
        }
        set tooltipTemplateRef(a) {
            this.xt = a;
            this.g("TooltipTemplateRef");
        }
        get width() {
            return this.xv;
        }
        set width(a) {
            this.xv = a;
            this.g("Width");
        }
        get height() {
            return this.xs;
        }
        set height(a) {
            this.xs = a;
            this.g("Height");
        }
        get background() {
            return this.xq;
        }
        set background(a) {
            this.xq = a;
            this.g("Background");
        }
        get_type() {
            return "FinancialChart";
        }
        constructor() {
            super();
            this.xt = null;
            this.xv = null;
            this.xs = null;
            this.xq = null;
            this.wf = 0;
            this.vr = false;
            this.wj = 0;
            this.vz = false;
            this.xi = 0;
            this.wq = 0;
            this.ws = 0;
            this.wr = 0;
            this.wt = 0;
            this.xu = null;
            this.xw = null;
            this.wl = 0;
            this.wo = 0;
            this.wm = 0;
            this.wn = 0;
            this.wp = 0;
            this.xy = null;
            this.vt = false;
            this.xr = null;
            this.xx = null;
            this.vv = false;
            this.u3 = null;
            this.u8 = null;
            this.vx = false;
            this.wi = 0;
            this.vw = false;
            this.vy = false;
            this.xz = null;
            this.u4 = null;
            this.u5 = null;
            this.u6 = null;
            this.u7 = null;
            this.vb = null;
            this.va = null;
            this.u2 = null;
            this.u0 = null;
            this.wk = 0;
            this.wh = 0;
            this.wg = 0;
            this.we = 0;
            this.u1 = null;
            this.xe = 0;
            this.wd = 0;
            this.xh = 0;
            this.xf = 0;
            this.xd = 0;
            this.xg = 0;
            this.u9 = null;
            this.uz = null;
            this.vu = false;
            this.x0 = null;
            this.wu = 0;
            this.vs = false;
            this.wa = new Date();
            this.v9 = new Date();
            this.vc = null;
            this.xp = null;
        }
        get leftMargin() {
            return this.wf;
        }
        set leftMargin(a) {
            this.wf = a;
            this.g("LeftMargin");
        }
        get isHorizontalZoomEnabled() {
            return this.vr;
        }
        set isHorizontalZoomEnabled(a) {
            this.vr = a;
            this.g("IsHorizontalZoomEnabled");
        }
        get toolbarHeight() {
            return this.wj;
        }
        set toolbarHeight(a) {
            this.wj = a;
            this.g("ToolbarHeight");
        }
        get yAxisIsLogarithmic() {
            return this.vz;
        }
        set yAxisIsLogarithmic(a) {
            this.vz = a;
            this.g("YAxisIsLogarithmic");
        }
        get yAxisLogarithmBase() {
            return this.xi;
        }
        set yAxisLogarithmBase(a) {
            this.xi = a;
            this.g("YAxisLogarithmBase");
        }
        get yAxisInterval() {
            return this.wq;
        }
        set yAxisInterval(a) {
            this.wq = a;
            this.g("YAxisInterval");
        }
        get yAxisMinimumValue() {
            return this.ws;
        }
        set yAxisMinimumValue(a) {
            this.ws = a;
            this.g("YAxisMinimumValue");
        }
        get yAxisMaximumValue() {
            return this.wr;
        }
        set yAxisMaximumValue(a) {
            this.wr = a;
            this.g("YAxisMaximumValue");
        }
        get yAxisMinorInterval() {
            return this.wt;
        }
        set yAxisMinorInterval(a) {
            this.wt = a;
            this.g("YAxisMinorInterval");
        }
        get volumeType() {
            return this.xu;
        }
        set volumeType(a) {
            this.xu = a;
            this.g("VolumeType");
        }
        get xAxisMode() {
            return this.xw;
        }
        set xAxisMode(a) {
            this.xw = a;
            this.g("XAxisMode");
        }
        get xAxisZoomMaximumCategoryRange() {
            return this.wl;
        }
        set xAxisZoomMaximumCategoryRange(a) {
            this.wl = a;
            this.g("XAxisZoomMaximumCategoryRange");
        }
        get xAxisZoomToCategoryStart() {
            return this.wo;
        }
        set xAxisZoomToCategoryStart(a) {
            this.wo = a;
            this.g("XAxisZoomToCategoryStart");
        }
        get xAxisZoomMaximumItemSpan() {
            return this.wm;
        }
        set xAxisZoomMaximumItemSpan(a) {
            this.wm = a;
            this.g("XAxisZoomMaximumItemSpan");
        }
        get xAxisZoomToCategoryRange() {
            return this.wn;
        }
        set xAxisZoomToCategoryRange(a) {
            this.wn = a;
            this.g("XAxisZoomToCategoryRange");
        }
        get xAxisZoomToItemSpan() {
            return this.wp;
        }
        set xAxisZoomToItemSpan(a) {
            this.wp = a;
            this.g("XAxisZoomToItemSpan");
        }
        get yAxisMode() {
            return this.xy;
        }
        set yAxisMode(a) {
            this.xy = a;
            this.g("YAxisMode");
        }
        get isToolbarVisible() {
            return this.vt;
        }
        set isToolbarVisible(a) {
            this.vt = a;
            this.g("IsToolbarVisible");
        }
        get chartType() {
            return this.xr;
        }
        set chartType(a) {
            this.xr = a;
            this.g("ChartType");
        }
        get yAxisLabelHorizontalAlignment() {
            return this.xx;
        }
        set yAxisLabelHorizontalAlignment(a) {
            this.xx = a;
            this.g("YAxisLabelHorizontalAlignment");
        }
        get isWindowSyncedToVisibleRange() {
            return this.vv;
        }
        set isWindowSyncedToVisibleRange(a) {
            this.vv = a;
            this.g("IsWindowSyncedToVisibleRange");
        }
        get indicatorTypes() {
            return this.u3;
        }
        set indicatorTypes(a) {
            this.u3 = a;
            this.g("IndicatorTypes");
        }
        get overlayTypes() {
            return this.u8;
        }
        set overlayTypes(a) {
            this.u8 = a;
            this.g("OverlayTypes");
        }
        get yAxisAbbreviateLargeNumbers() {
            return this.vx;
        }
        set yAxisAbbreviateLargeNumbers(a) {
            this.vx = a;
            this.g("YAxisAbbreviateLargeNumbers");
        }
        get resolution() {
            return this.wi;
        }
        set resolution(a) {
            this.wi = a;
            this.g("Resolution");
        }
        get xAxisEnhancedIntervalPreferMoreCategoryLabels() {
            return this.vw;
        }
        set xAxisEnhancedIntervalPreferMoreCategoryLabels(a) {
            this.vw = a;
            this.g("XAxisEnhancedIntervalPreferMoreCategoryLabels");
        }
        get yAxisEnhancedIntervalPreferMoreCategoryLabels() {
            return this.vy;
        }
        set yAxisEnhancedIntervalPreferMoreCategoryLabels(a) {
            this.vy = a;
            this.g("YAxisEnhancedIntervalPreferMoreCategoryLabels");
        }
        get zoomSliderType() {
            return this.xz;
        }
        set zoomSliderType(a) {
            this.xz = a;
            this.g("ZoomSliderType");
        }
        get negativeBrushes() {
            return this.u4;
        }
        set negativeBrushes(a) {
            this.u4 = a;
            this.g("NegativeBrushes");
        }
        get negativeOutlines() {
            return this.u5;
        }
        set negativeOutlines(a) {
            this.u5 = a;
            this.g("NegativeOutlines");
        }
        get overlayBrushes() {
            return this.u6;
        }
        set overlayBrushes(a) {
            this.u6 = a;
            this.g("OverlayBrushes");
        }
        get overlayOutlines() {
            return this.u7;
        }
        set overlayOutlines(a) {
            this.u7 = a;
            this.g("OverlayOutlines");
        }
        get volumeOutlines() {
            return this.vb;
        }
        set volumeOutlines(a) {
            this.vb = a;
            this.g("VolumeOutlines");
        }
        get volumeBrushes() {
            return this.va;
        }
        set volumeBrushes(a) {
            this.va = a;
            this.g("VolumeBrushes");
        }
        get indicatorNegativeBrushes() {
            return this.u2;
        }
        set indicatorNegativeBrushes(a) {
            this.u2 = a;
            this.g("IndicatorNegativeBrushes");
        }
        get indicatorBrushes() {
            return this.u0;
        }
        set indicatorBrushes(a) {
            this.u0 = a;
            this.g("IndicatorBrushes");
        }
        get volumeThickness() {
            return this.wk;
        }
        set volumeThickness(a) {
            this.wk = a;
            this.g("VolumeThickness");
        }
        get overlayThickness() {
            return this.wh;
        }
        set overlayThickness(a) {
            this.wh = a;
            this.g("OverlayThickness");
        }
        get overlayMultiplier() {
            return this.wg;
        }
        set overlayMultiplier(a) {
            this.wg = a;
            this.g("OverlayMultiplier");
        }
        get indicatorThickness() {
            return this.we;
        }
        set indicatorThickness(a) {
            this.we = a;
            this.g("IndicatorThickness");
        }
        get indicatorDisplayTypes() {
            return this.u1;
        }
        set indicatorDisplayTypes(a) {
            this.u1 = a;
            this.g("IndicatorDisplayTypes");
        }
        get indicatorPeriod() {
            return this.xe;
        }
        set indicatorPeriod(a) {
            this.xe = a;
            this.g("IndicatorPeriod");
        }
        get indicatorMultiplier() {
            return this.wd;
        }
        set indicatorMultiplier(a) {
            this.wd = a;
            this.g("IndicatorMultiplier");
        }
        get indicatorSmoothingPeriod() {
            return this.xh;
        }
        set indicatorSmoothingPeriod(a) {
            this.xh = a;
            this.g("IndicatorSmoothingPeriod");
        }
        get indicatorShortPeriod() {
            return this.xf;
        }
        set indicatorShortPeriod(a) {
            this.xf = a;
            this.g("IndicatorShortPeriod");
        }
        get indicatorLongPeriod() {
            return this.xd;
        }
        set indicatorLongPeriod(a) {
            this.xd = a;
            this.g("IndicatorLongPeriod");
        }
        get indicatorSignalPeriod() {
            return this.xg;
        }
        set indicatorSignalPeriod(a) {
            this.xg = a;
            this.g("IndicatorSignalPeriod");
        }
        get rangeSelectorOptions() {
            return this.u9;
        }
        set rangeSelectorOptions(a) {
            this.u9 = a;
            this.g("RangeSelectorOptions");
        }
        get customIndicatorNames() {
            return this.uz;
        }
        set customIndicatorNames(a) {
            this.uz = a;
            this.g("CustomIndicatorNames");
        }
        get isVerticalZoomEnabled() {
            return this.vu;
        }
        set isVerticalZoomEnabled(a) {
            this.vu = a;
            this.g("IsVerticalZoomEnabled");
        }
        get zoomSliderXAxisMajorStroke() {
            return this.x0;
        }
        set zoomSliderXAxisMajorStroke(a) {
            this.x0 = a;
            this.g("ZoomSliderXAxisMajorStroke");
        }
        get zoomSliderXAxisMajorStrokeThickness() {
            return this.wu;
        }
        set zoomSliderXAxisMajorStrokeThickness(a) {
            this.wu = a;
            this.g("ZoomSliderXAxisMajorStrokeThickness");
        }
        get isLegendVisible() {
            return this.vs;
        }
        set isLegendVisible(a) {
            this.vs = a;
            this.g("IsLegendVisible");
        }
        get xAxisMinimumValue() {
            return this.wa;
        }
        set xAxisMinimumValue(a) {
            this.wa = a;
            this.g("XAxisMinimumValue");
        }
        get xAxisMaximumValue() {
            return this.v9;
        }
        set xAxisMaximumValue(a) {
            this.v9 = a;
            this.g("XAxisMaximumValue");
        }
        get xAxisBreaks() {
            return this.vc;
        }
        set xAxisBreaks(a) {
            this.vc = a;
            this.g("XAxisBreaks");
        }
        get applyCustomIndicatorsRef() {
            return this.xp;
        }
        set applyCustomIndicatorsRef(a) {
            this.xp = a;
            this.g("ApplyCustomIndicatorsRef");
        }
    }
    FinancialChartDescription.$t = /*@__PURE__*/ markType(FinancialChartDescription, 'FinancialChartDescription', XYChartDescription.$);
    return FinancialChartDescription;
})();
